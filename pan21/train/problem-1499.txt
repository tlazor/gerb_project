Here's my problem: I run a devteam, of around 10 individuals. Each of us has our own private key(s). When I go set up a new server for us, I have to import all of their keys to it. And if we start working with a contractor, I have to get his or her key too, and then import it and place it in .ssh/authorized_keys on the server.
This is one of those "Surely this already exists, and if not, I damn well better build it!" moments.
And it would contact a public repository of public keys, see if there was a user named allegroconmolto, and if so, import their key and add it to my authorized_keys. Adding future users would then be as simple as running import_key for them. I could then scp the authorized_keys file to all my servers and be done!
LDAP servers are often used for this purpose - you indicate which ldap server you trust and which entities you trust... then you have your server services look up credentials as necessary in the server. It's probably more effort than it's worth in your dozen user scenario . A simple shell script that adds new keys to the right file (authrized_keys somewhere) is probably best -> of course that shell script is sensitive... cat < emailedPublicKey >> somewhere/authorized_keys is a reasonable solution at your scale IMO.
Note that you don't get out of the problem of managing trust since you still have to indicate who you trust or how to determine who you trust since you have to either define a mapping to a third party server or maintain your own server.