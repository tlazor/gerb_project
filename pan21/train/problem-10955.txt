You are correct, these are lambdas. A lambda is basically a nameless function that you can write (almost) anywhere. It looks like this, in code
where "parameters here" are a list of parameters to the function as you would write parameters to any function definition, and similar for "body of function." The => token is devoid of any other meaning except indication that the whole expression is a lambda. In particular is has nothing to do with equality or greater-than, in this context. It just as easily could have been some other arbitrary token, the language designers simply chose that one.
The alternative to passing a lambda is usually not a fixed value (that's why you can't just "pass a bool" instead. Lambdas are functions, so if you aren't passing a lambda you're instead passing a delegate (or the name of a function). That function needs to exist elsewhere.
Lambdas are useful for a variety of things, such as for specifying execution logic in a place that is nearby the surround logic that will use it. One often sees them employed as sorting predicates to a list, or as callbacks for asynchronous operations (which is what your use appears to be, on the surface).
Lambdas also have this neat ability to capture local variables, which means they can use those locals inside their bodies. This is useful because if a sort predicate requires a function taking two objects to compare against, that's all well and good: you could write a lambda or just supply the name of a SortObjectsByWhatever function you've written elsewhere. But if you want to also employ some other bit of runtime data in the body of that sort, it's often easier to do that using a lambda, because you can't always change the signature of the delegate type the sort function expects.