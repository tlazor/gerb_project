  [6]: Promote codes to production as soon as they are production-ready, enabling incremental changes
If your developers are shipping compiled code, they would benefit from a workflow to build-test-package-deploy, and you can empower them by setting up a repository and a workflow engine to do this. 
  [5]: Test that your newly updated code will play nicely with the rest of your environment before it goes live
While these tools add some up-front setup, they enable your developers to implement a Continuous Quality[4], Continuous Integration[5] and Continuous Deployment[6] discipline, all of which will catch problems early and reduce the chances you will get a late night call to roll-back a code because a hard-to-spot defect crept in. 
I use rsync for backups. I'd like a script that when someone visits a certain url (It will be private and internal only) that it will start a rsync job on demand straight away.
While you are at it, look at packaging their full work-product (code, module, script, etc) into a package (CPAN if it is perl, NPM if it is NodeJS, RPM if the production servers run Red Hat, CentOS or Oracle Unbreakable) and place it into a repository, so that the full work-product can be delivered atomically, versioned, and if necessary rolled-back. 
  [4]: Run a battery of tests against every commit, and blow the commit if a mistake is found, so mistakes are less likely to sneak into production
Take a look at Hudson[1] or Jenkins[2], both of which are workflow engines specifically designed for "continuous (quality|integration|deployment)". A more general-purpose workflow engine like jBPM from Red Hat[3] would also do the job very well. 
While your OS probably provides a tool for maintaining a repository (create-repo for Red Hat and friends), you may get additional lift by leveraging powerful repo management softwares, such as JFrog Artifactory[7] or Sonatype Nexus[8], since they provide robust management capabilities, web-based repo management and other capabilities. 
If they are simply pushing scripts, they can probably use the facilities of their source-code versioning tool (like GIT) to move the work-product into production, although they would gain benefit from a tooling infrastructure described above. 