The following is the story of a UserCredentialsDto that arrived at one of my endpoints and how it finds its way through all the layers namely 
So, I really hope somebody takes a look at this example and can offer me some advice on how I can improve things. 
Although this is just a short example it already shows some of the issue my current design carries with it. As mentioned before, I have no clean solution for the mapping part yet. In this example it's just a few lines but it's getting messier of course if I have larger collections of data. I do not want to end up having multiple nested loops in the Service Layer, and maybe more complex logic, in order to map a DTO into a Model. I know one could start writing dedicated Mapper classes which provide static functions in order to do the job:
One way I could move this code out of the Service Layer would be to introduce my missing Business Layer. I think my problem here is that I don't know at this point how this layer is supposed to communicate with the others. Imagine a business/domain object like this:
The first layer is very straight forward. Receiving the DTOs, pass it to the Service Layer and handle exceptions in case there are some.
There's nothing to say about this layer since it is entirely managed by Hibernate. Let me call these objects Data Access Objects and please correct me if that terminology is wrong because I am not 100% sure if @Entity @Table objects can actually referred to as DAOs.
In the Service Layer it gets messier. The DTO gets mapped into a Model (Hibernate managed POJO), some other business logic happens there (hash password) and it's getting passed to the Repository Layer where, in this case, the data gets persisted.
and although this looks nice so far I am not sure whether I am over complicating things more than necessary, not seeing a significant flaw with this design and run straight ahead in massive issues in the long run or whether both of those statements are true.
If something is not entirely clear please let me know and I'm happy to provide further information if it helps.
The example below is very simple and one could argue that anything more complex goes towards over engineering but I know for a fact that things get more complicated over time. I have two major issues for which I do not have a "clean" solution: