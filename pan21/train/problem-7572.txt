For instance, you can open a "login" shell via Terminal, and get one set of environmental variables (say, from your .profile), then type "bash" and get a completely different set of variables (from the .bashrc, plus any variables that were exported, minus those which were not). In particular, PATH can get mangled with repeated or missing entries.
bash is a shell that knows whether it was invoked as a login shell or not.  A bash login shell reads .bash_profile or .bash_login or .profile  -- only one, in that order of preference. A non-login shell will not read a .profile but will read from .bashrc.  This is normal bash behavior under modern *nix platforms, but it can lead to difficult to detect weird behaviors if you don't understand what's going on. 
A shell is run after the login process has completed. It gives the user a text-based command-line interface to the facilities of the operating system, including running other programs.  /usr/bin/bash is a good choice for a default shell. You can read more about bash by executing
A practical difference is in the way that the resulting shell environment reads its initial configuration settings. 
This is built linux kernel in Mac OS. Then I think it is almost the same when you get the command in linux. The default shell should be bash.
login only knows how to do one thing - log in a user (athenticate using username/password, set some environmental variables like TERM and PATH, and execute a couple of on-login admin tasks - see the link for details.
As far as I'm aware, login can not be used as a shell at all as it has no functionality of a command line interpreter.
A unix shell (of which bash is an example of) is a command line interpreter coupled with a script interpreter, and its function is to accept input (from the user or supplied programmatically) and execute requested commands.
They are two very different things, and only commonality is that both usually run at the beginning of loggin in a user and both run a configuration dot-file (.login and .bashrc) that are essencially shell scripts. In addition bash, like many modern shells, also allows you to switch between users, which is one of the main purposes of login
/usr/bin/login forks a login shell. I think that it invokes the authentication process, but you may not see any visible authentication interaction if you're already logged in. And, of course, if your login shell is not bash, login will invoke it instead of bash. 
/usr/bin/login is not a shell; it is a program used to login to a system. It manages the process of logging in to a system. As a user of a properly configured system, you should never have to concern yourself with /usr/bin/login. If you are curious about it anyway, read
login is a program used to log in a user, at the end of which the shell (aka command line interpreter) is executed. 