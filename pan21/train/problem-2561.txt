Sub-question: I understand that tiles were very important in decades past because of RAM limitations, but is it reasonable to assume that today's games could simply use a single large background image instead? Even on an iOS game like S:S&S EP?
I think it's safe to assume these are just images and nothing special is going on in their creation. For memory efficiency it would make sense to chunk up the images and load only the chunks that are currently (or likely to soon be) visible.
My Mario clones from school just used a multi-layered tile engine.. Tiles for the foreground (most of them empty ofcourse), then a layer of tiles the player would interact with (the ground mario ran on/into). Then a tile of the background foliage (the 'hills' that you could jump on but not run into them.. not the tops of them, just the filled in 'background' parts that you could run by fit in this bill. And then finally a Back background layer of tiles... For putting together clouds and such.. This is the layer that scrolled at a different speed (smaller tile map as well) to get a bit of parallax scrolling going on.
Are backgrounds like that simply created as large one-of-a-kind images, or are the developers just being extremely clever about their use of repeated sprites and tiles?
This kind of layered use of base images allows for interesting effects like focal depth of field, drawing order and parallax effects.  Even a game like S&S could utilize this style of level creation to allow pass behind effects as well as parallax.
What methods are used to create complex, rich, non-repetitive 2D pixel backgrounds in games like Superbrothers: Sword & Sworcery EP? Examining screenshots from the game, I really can't detect tiles anywhere; there's seemingly no repetition:
It's not a pixel background, but some games like Aquaria do use sprites, but extensively scale and rotate them to create very non-linear/repeating levels from a relatively small set of art assets.  See http://www.bit-blot.com/?p=17 for a video of the Aquaria level editor in action.