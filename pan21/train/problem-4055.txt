The problem with TCP is that it's a general-purpose protocol, and the way it handles these things is not always optimal for games.  For example, it your game sends two position updates to the server, and first update packet is lost along the way, then TCP will hold on to the second packet until the first one has been successfully retransmitted, and only then let the server process both.  In a fast-paced game, you'd probably prefer to have the second update processed as soon as it arrives and just forget about the lost first update.
Thus, if you want to use UDP, you basically have two choices: either use an existing UDP-based networking library like OGP that takes care of some of the things that TCP handles, but in a more game-friendly manner, or study network protocols like TCP and figure out how to implement the same features yourself.  Unless you really like network programming, I'd only recommend the latter option as a last resort.
Unfortunately, while TCP does offer some options to tweak the buffering and retransmission algorithms, there's no way to tell it to just drop lost packets.  For that, you'll need a lower-level protocol like UDP.  The problem with UDP, on the other hand, is that it's a very low-level protocol — a very thin wrapper over raw IP, in fact — and takes care of none of the things listed above.