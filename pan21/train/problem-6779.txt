Initially this issue arose because a researcher was able to get a browser to follow a redirect from a CONNECT method.  They should have just fixed the browser, but instead it was recommended to ignore any body on the response from CONNECT as untrustworthy.
To get around this, and force the browser to display a proper block page required MitM.  There are long discussions about this in the IETF HTTP WG mailing list.
As Fleet Command's answer noted, the firewalls could simply notice the destination IP address is related to YouTube, and block the traffic there.  The end user would know that the traffic is blocked, because the page wouldn't load.
In general, the attitude of many organizations is "we want to control things, and don't care so much about whether the end users have the privacy that they desire".  Here is another example of this same sort of thing happening: Security.StackExchange.com question: "My college is forcing me to install their SSL certificate".
When the web browser receives an SSL certificate (which contains some information, including an SSL key), whether that comes from the actual website or from the "man-in-the-middle" device, the web browser looks to see whether that SSL certificate should be trusted to identify itself as the website.  A common way to do this is for the web browser to look in its certificate store.  Let's see three different scenarios of what happens when someone tries to visit a website called Example.com, and then you'll see the other possible weakness that lets HTTPS filtering work.
However, there is one point that should be elaborated on.  (I figured this would take more characters than a comment, so I'm adding it as an answer.)
The problem with this, is that https URLs via a proxy are handled by the browser by connecting (CONNECT method) to the server via the proxy first.  If a proxy wants to refuse the connection, in the past it would send back a block page response, which could give the user information about what was going on, what to do etc.  With the changes to the browsers to ignore the block page response, the user experience became extremely poor, reporting a generic connectivity error, which sent people looking for router/cable etc problems.  This is the current situation and I wish I had a dollar for every support ticket this has caused us.
If MITM techniques are being deployed, then a device could theoretically allow a web browser to get some content from the website, while other content could be changed (including being blocked).  For instance, video might be allowed, but comments could be changed (or vice versa).  The end user would likely be oblivious to what is happening.
Until browsers allow a way to display a message from a proxy about why a connection was blocked, this will continue to be the case.
One of the main drivers for deployment of MitM is due to browsers refusing to display any content returned by a proxy from a CONNECT command.
The challenge with this is that unless the "man-in-the-middle" device (the "firewall" in this example) handles the key problem, then the web browser will know that the data is not coming from the website that it tried to reach.  The way the web browser knows that the website is what it wants to reach is by using SSL technology.  (Historically, although the S in HTTPS meant "Secure", it was also technically accurate to think of it as "HTTP over SSL".  Although, nowadays, that's usually "HTTP over TLS".)
I think of how many people just choose "I agree" without reading the forms and understanding the security implications.  As long as most average people will just cooperate with steps when an organization says "this is required", and as long as organizations tend to have this controlling attitude, the market seems ripe for companies to keep selling equipment which is designed to be able to snoop on HTTPS traffic using private keys, and for organizations to keep those private keys installed onto machines (so that the equipment can effectively do the intended task of snooping on HTTPS traffic).
For example, you could have a firewall that provides "HTTPS-filtering" capabilities.  This firewall may receive the outbound HTTPS traffic and, instead of routing it to a website, the firewall may just act like it is the website.  Then the firewall establishes its own HTTPS connection to the website, retrieves the data from that website, and passes on the data to the web browser (spying on the traffic, and making any desired filtering/changes, as the firewall desires).
One way to handle this challenge is to get the website's private keys, as noted by Fleet Command.  However, there is another way.
Now that I've discussed the tech, effectively answering the question in the title ("To what extent is filtering HTTPS traffic possible?"), let me provide a straightforward answer to the other question I see:
That is just one approach.  There is another approach: The "man-in-the-middle" could simply use its own certificate.  This technique is being performed by many organizations (including commercial companies, public schools, etc.)
Fleet Command's answer, as currently written, is mostly correct.  I don't want to duplicate that answer, so I recommend starting by reading that answer (in its entirety).