We could actually go further and put all this in a class or classes to manage the database connection and saving.  That would also allow us to call just 
I would suggest you move away from hardcoding DB credentials into files such as this.  DB credentials should ideally be defined in configuration outside of your codebase.
I moved $stmt entirely into the constructor.  So now, we just call Image_Store with the right parameters initially, and we only need to call save with the key for the $_FILES array.  
Consider renaming your file input fields to images[] (note that array notation).  That will allow you to access all your $_FILES values like an array, allowing you to simplify your code.  I will also take the addvantage of the fact that bindParam() binds the a variable to a parameter not a value, meaning you don't need to rewrite these lines of code repeatedly.
In your validateImage() function you are both outputting and returning an error message.  This is odd behavior as typically a function should do one or the other, not both.  Why would you return the error message to the caller if a message had already been output.  I would suggest that typically you would not want a function like this to directly output to standard out.  Leave it up to the calling code to determine how and when to message the user, as it is better positioned to do so.
The rough rule of thumb is that the first time you do something, you write it.  The second time, you copy it and edit to make it work (e.g. change imageOne to imageTwo).  The third time, you refactor so as not to need it.  
I changed $lastId to $campaign_id as more descriptive and consistent with the snake_case naming of $target_dir.  I happen to prefer snake_case for being easier to read internationally, so I standardized on that.  The most important thing is to be consistent.  
You are duplicating work in your validateImages() function and in making your database inserts.  Consider a method like getImagePaths(). To both validate the images and read them into an array that can be used directly in code shown above (i.e. removing need to recalculate file location on server), or provide false result on validation error.  So perhaps a usage pattern like this:
This sort of spurious output can also be problematic when building more complex applications, as you may need to do things like set headers (including cookies) and such throughout your code and having spurious output like this (rather than all output being delivered to browser at one specific point in the application) is going to make your application hard to maintain.