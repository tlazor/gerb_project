It's largely a matter of, what's the default assumption for a given segment of time in your game? Is it more likely that...
With regard to ensuring a regular tick frequency, for games that use it, I recommend checking out this earlier answer.
If it's more likely that nothing happens than something, then an event-based system is a good way to go. Many games with asynchronous multiplayer work this way, where the game state is only updated when one player logs in and takes their turn / actions, then sits idle until the next player needs to act. It might be minutes or hours, even days before the next event that affects a given player occurs, so doing a sub-second tick update throughout that span would be wasteful.
If it's more common that something happens than nothing, a regular server tick is a good way to go. For instance, in a multiplayer shooter game, players can change direction and fire off shots in fractions of a second, so there's stuff happening constantly. It makes sense to send regular, frequent updates to keep everyone appraised of the evolving situation, without excess overhead of trying to sleep through or skip timesteps in which nothing happens, since that's rarely if ever the case.