These terrains often use heirarchical partitioning structures such as quadtrees to determine LOD, and generate a mesh of the appropriate resolution based upon the depth of the tree's node.
LOD is about trying to keep the amount of processing constant over time. Hierarchical level of detail is the only way of doing this for scenes of considerable detail. If you are near enough to an object, it decomposes into multiple objects. This recursive LOD provides not only a simple mechanism for handling the transition points for switching in new levels of detail but also allows the render call count to stay about the same no matter how far / near you get to your world objects.
Many modern projects are starting to use real-time procedural terrain generation to produce massive expanses of terrain (Outerra, Infinity (INovae), to name some of the most prominent). Discrete LOD is simply not an option, because of the procedural nature of the meshes.
It's all very well having great LODs for your meshes and textures, but in at least one game I shipped on the PS2, the way I saved time was just to clump together all the foliage in sectors into single draw calls. This larger draw call took nearly 90% less time than rendering all the low lod variants, even with carefully ordered material transitions and batch rendering each type of mesh. So, consider LOD with care. It's not just about individual objects. It's about the whole render phase.
Hardware tessellation is a very new feature of GPUs and there are not a lot of games that utilize it. I suspect that the games that do use it mostly as a drop-in for bump mapping - rather than bump map in the pixel shader, you can modify the actual geometry. There is probably a lot of room for further research into mesh simplification and improvement using hardware tessellation.
Another subject to consider discussing in your paper (though an entire thesis could easily be written on just this subject alone) is procedural terrain generation.
One modern approach to continuous LOD is hardware tessellation. Hardware tessellation was implemented in DirectX 11 and essentially provides programmable subdivision of surfaces. Because this is implemented on the GPU, it allows for much higher detail than provided by CPU-generated tessellation. By subdividing surfaces based on the view distance, for example, you can provide a form of continuous LOD.
LOD is not only used for terrain, but also for silhouettes of distant structures and for eagle's eye views of strategy/simulation games. I don't know the details of the algorithms, and I guess that's the main part of your question, but I wanted to give you some examples of the state of LOD in modern video games.