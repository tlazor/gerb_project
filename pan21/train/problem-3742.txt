Regarding your final question: I've never used lighttpd, but some servers support a keying process where the server reads the key at startup and then drops permissions in a way that prevents it from reading it subsequently. For example, the server may start as root (as it must, on UNIX/Linux, if it wants to bind to ports 80 and 443), reads the key file then, and then does a setuid to http (or whatever). Others might have a provision for reading the key from a pipe or similar.
So the key-at-rest hygiene has to reflect your threat model. Is it worth the cost (time, inconvenience, delay in startup) to require interaction? Or is the risk of key disclosure (probability of it happening times cost to you) low enough that you can allow unattended startup?
The first line of defense, though, would be to make sure the directory containing the key file is not accessible through any of the webroots, and doing your best to avoid path-traversal vulnerabilities in whatever the server is serving. And locking down the OS in general.
It may also be possible with lighttpd to have it read the key from a temporary copy which the startup procedure deletes after the server starts.
Assuming you continue to keep the server's private key available for unattended startup (i.e. readable by the server with no administrator interaction), here are some considerations:
Key access for servers comes down to a trade-off between attended and unattended startup. You can require interaction with an administrator (e.g. encrypt the private key file and enter the passphrase manually at startup); that protects the key at rest (on disk) from exposure, but prevents unattended startup. Or you can make the key-at-rest available to the server, allowing unattended startup, but that potentially exposes it to attackers.
I like Ivan RistiÄ‡'s Bulletproof SSL and TLS book, available from feistyduck.com, for advice in using SSL/TLS in general and with HTTPS in particular. For web servers, he discusses Apache primarily, but much of the material is broadly applicable.
This may not have received any responses yet because it's a difficult problem, and there's no single correct answer.