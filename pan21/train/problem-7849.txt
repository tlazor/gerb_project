The background: we have several Mikrotik routers with RouterOS v6.39.2 that are located all over the city; the routers are behind NAT and connected to our OpenVPN server that we use for management and monitoring. The protocol we use for OpenVPN is TCP, since UDP for OpenVPN is not supported by Mikrotik.
It is possible to use UDP on mikrotik hardware. You can install a WRT instance in the metarouter. Its a buggy implementation. But it is possible to use a meta to get OpenVPN UDP.
People have been asking for UDP and LZO support for ages and MikroTik simply refuses to implement those.
The problem: from time to time we observe response delays that occur randomly. There is no specific router or time when the issue occurs; we are constantly monitoring the CPU load and traffic and there are no anomalies on the graphs at the time this is happening, but when we simultaneously ping the OpenVPN server from the Mikrotik via public and private IP address using the Mikrotik ping utility we see that packets drop only inside the tunnel.
I apologize, if this question had already been asked and answered, but I was looking for an answer to this for a while without any luck.
The OpenVPN implementation on MikroTik is crippled. It can barely work and its performance is terrible (either on bandwidth or latency), especially on non x86 routers.
Of course there's always the possibility that your configuration is bad (as mentioned in the comments already, FastTrack rules can mess up a lot of stuff in MikroTIk if you don't know what you are doing).
If you need better stability/performance (and security) you should look into some other solution like GRE over IPsec, or EoIP over IPsec.
This reply is from 2010 and they still haven't implemented those features. So you can draw your own conclusions about MikroTik's OpenVPN implementation.
But if you can't get the routers to work without NAT then you could try SSTP, but since this is also TCP based, the performance and latency are not the best. There's also L2TP over IPsec.
I will add to this solution a little more when i dig up my notes, might help someone else in the future.
In any case, your problem is an implementation one at the MikroTik side, so you can't actually fix it. Only MikroTik can. You can only try other protocols and see what fits your needs better.