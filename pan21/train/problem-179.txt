This hurts to read. All the + split apart the string and makes it really hard to know what the whole string is. My solution is to use f"...". This allows you to directly incorporate variables into your strings, without having to +...+, and also avoiding (if present) +str(...)+ which is very ugly to me.
Exclaimer: I had no idea what you were trying to do when inserting data into your tables, so I left that blank. It also didn't help that fake and rstr weren't defined / weren't shown in your program.
At first look, I had no idea what these numbers were supposed to represent. You should assign these numbers to variables, and use those variables instead. This makes the code cleaner and easier to maintain. What if you wanted to change the number of tables or number of people? You'd need to find every instance of that magic number (should you use it more than once) and change it. Having it assigned to a variables fixes this problem, as you can just change the value of the variable.
I wrote a few helper functions for generating some random values in your code. Using helper functions in your code can really help you, as you don't have to cram everything into one function.
Having a redefined list with fixed positions of properties of people is messy. Instead, you can generate a list with instances of a Person, and you can access their properties when incorporating it in your SQL string.
Unless you're really confident about the source, safety and validity of your data, constructing a string and sending it off as executable SQL is enemy number one of database security. This is what prepared statements are for. It's unclear what flavour of SQL you need, so it's unclear which library you'll need for this.
You should use a _. This makes it clear that the variable used for the loop is not needed, and should be ignored.
text_file.write('create table Python_test.'+x+'('+a[0]+' VARCHAR(255),'+a[1]+' VARCHAR(255),'+a[2]+' VARCHAR(255),'+a[3]+' VARCHAR(255),'+a[4]+' VARCHAR(255));\n') 
Currently, you open the file with text_file = open("D:\Output.sql", "a", encoding="utf-8"), and manually close it with text_file.close(). You can save yourself from having to do this with opening the file using with open(...) as ...:. This lets you work with the file, and once done and out of scope, can continue writing the program. "But wait. What about closing the file?". When you use with, once you are out of the scope of the with, it closes itself automatically.
You should include a docstring at the beginning of every module, class, and function you write. This will allow documentation to identify what your code is supposed to do.