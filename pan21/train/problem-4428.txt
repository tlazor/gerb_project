That being said, I'd suggest it's probably easier in the long run to learn Javascript directly and write something for the Canvas element (e.g. a nonsense example I wrote very quickly at http://lzcd.com/mat ) or via one of the Javascript gaming libraries such as Easel ( http://easeljs.com/ ).
However, I really recommend Unity because they have already tackled all of these issues (so you don't have to waste your time tacking them): and C# is a supported language in Unity.
There's always PlayN. I tried it, but didn't like the lack of documentation and long compile times required by the Google Web Toolkit (it's known to be slow). Still, it may fit your needs well.
Note. Currently NaCl as it's called works mainly with C/C++ but the Mono C# compiler generates compatible code. There's not a lot of documentation out about it yet with Mono but Mono is being pushed as a major dev platform for NaCl.
http://jsil.org/ will provide you the ability to convert an XNA spritebatch based game to Javascript so that it's playable in a browser.
Technically it is possible by making an OCX browser control (I am not sure if this will work in browsers other than Internet Explorer) and host XNA inside of it, finally you will likely need to write your own ContentManager and override OpenStream so that it grabs resources from your web server. Keep in mind that this doesn't 'save' your clients from needing to download the .Net runtime or the XNA runtime - furthermore your runtime will still need to be installed manually and GACed (because otherwise you would be running in partial trust and I doubt the .Net runtime will allow XNA to boot up).
Consider Mono and Native Client. Mono is programmed in C# (It runs on Linux, Mac and Windows without .NET) and Native Client allows applications written in C/C++, C#, Java and other languages to run within Chrome Browser. The gonacl site  has details about Native Client and you can watch recent video of a Native Client event that took place in December.