Do a pixel by pixel set inside a loop is, as observed in the question, not efficient enough for game development. Masking is the way to go (assuming our libraries of choice implement this in an efficient way).
When calling Surface.blit() you will use the special_flags parameter to control how pixels are combined. In concrete, most situations will require the pygame.BLEND_RGBA_MULT and an extra image asset to use as the mask image, probably all opaque pixels to white and the rest with alpha set to 0. Procedural generation of the mask image is possible but I found more practical to use an asset.
mask.png image is invisible with this site background color, but if you move the mouse pointer over it you will see where it is. Right click and save.
I don't think there is a single call that can make objects appear on opaque parts of a screen. You would probably have to create a background class and have a function tied to that class that uses the .blit command to only show objects on the opaque parts. 
BLEND_RGBA_MULT will multiply source pixels with destination surface pixels. This can be used to achieve many funny effects, but the most useful is when your mask image contains all white pixels and those you want to discard with alpha set to 0. Alpha 0 in the mask results in alpha 0. And a white pixel in the mask results in the same color than source image.