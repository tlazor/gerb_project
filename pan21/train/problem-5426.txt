In general, most software simply tells the "network stack" that it wants to make a network connection.  In modern operating systems, the "network stack" is built in as part of the operating system (although back in the days of Windows 3.1, a network stack was typically added during the installation of a software program like Microsoft Internet Explorer or Trumpet Winsock).  The software program will typically tell the network stack something like, "Create a new TCP connection to remote port 443."  The network stack will determine what source port number it wants to use.
A process is basically a copy of a program.  So, if you run a program like Notepad multiple times, each specific time will get its own Process.  A process uses resources, such as available RAM on your computer.  If you look at Task Manager and you see the program running multiple times, each different occurrence of the program can be a different process.
Processes and port numbers are very different things.  I agree with most or all of the information in the other answers here.  (However, I added my own answer here because I thought a bit more detail, like where the numbers are assigned from, might help to make the distinction a bit more clear.)
Another command that you may find useful is netstat.  I see you're using netstat.  Try adding the "-b" parameter.  (This option is rather specific to Microsoft Windows, which I presume you are using based on the C:\Users\User> in your prompt.)  That will have Netstat try to use the PID to figure out the name of the executable file, and print that on the next line.
Using the process ID (which identifies an exact, specific copy of a running program), you can determine which software program that process is an instance of.  You can do this using TaskList (from the command line), WMIC PROCESS GET /FORMAT:LIST (from the command line), or Task Manager.  In Task Manager, on some newer versions of Microsoft Windows, you may need to go to the "Details" tab.  If there isn't a column for showing the PID, you can add it.  (In Windows 10, at least, you right-click on a column name, and then can select visible columns.  As memory serves me, older versions of Windows had a menu option for this.)
The PID is the number used internally in your computer to refer to any specific process. A processor can only do one thing at a time, but it has multiple tasks to do, so it alternates between working for different processes, and the PID is the tag that the processor uses to identify each process.
To answer the question directly: there is no connection between the process ID and the port number. They enumerate entirely different things.
(Note: The square brackets are just a notation I made up to make that paragraph a bit easier to read.  In Netstat's output, the port numbers are shown after the colon.  I don't typically prefer to use the term "foreign" to describe port numbers, but I did in this case because that was the term used by netstat.)
The PID identifies a process (eg a Firefox session: each tab may run as a different process), and the port number identifies which port that process is using to communicate. Specific port numbers do have customary uses: 80 is generally used for HTTP and 443 for HTTPS. But a process could get any PID number, depending on when it is started.
A port number is used as part of a network connection.  Not all network communication uses port numbers.  For instance, ICMP, used by TraceRoute (named "TRACERT" on Microsoft Windows) and the Microsoft Windows "ping" command, doesn't use port numbers.  The most common protocols that do are UDP and TCP.  (Maybe SCTP is the next-most-common?)  Many protocols, including HTTP(S) and SMTP (for E-Mail) use TCP, so port numbers are used.
The PID ("process ID") numbers are assigned by the operating system each time a new process is made.
The port number is a tag given to all network communications so that when an answer returns from the network, the router on your home network knows what computer awaits that answer, and when the answer arrives to the computer, the computer knows which process awaits the message.
For instance, the port tag makes sure that when you request this page from the servers of Stackexchange, and the site data arrive at your router, then your router knows that it is your computer, and not your brother's smartphone or any other device that wants them. And when they arrive at your computer, your computer can tell that it is Firefox that wants them, not Word.
As you can see, your local port numbers are used sequentially and are related to neither destination port number or to the PID of the process using them.
It is possible to have multiple TCP connections between the same computers, and port numbers are used to identify those connections.  For instance, if your E-Mail program is getting E-Mail, the network connection may be between [LOCAL PORT 52534, REMOTE/FOREIGN PORT 25], while your web browser can create a connection using [LOCAL PORT 54499, REMOTE/FOREIGN PORT 443].  That way, when the remote computer responds and the incoming traffic is defined as [LOCAL PORT 54499, REMOTE/FOREIGN PORT 443], your computer knows that traffic is not meant for your local E-Mail program.  Actually, your web browser could create multiple TCP connections in order to do something like downloading multiple graphics at the same time.  When your computer receives graphical data, the port numbers can help your web browser know which connection the data is meant for, so the web browser can know which graphic the received data was meant for.