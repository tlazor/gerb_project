There is a lot of use for such strategies when working with an open ended set of EntityTypes, particularly when designing libraries for use by other programmers.  Understanding Template Metaprogramming is a key skill in C++ today and in moving from the OO to Functional approach which I believe provides many dividends in developing type safe multi-threaded code, especially for large systems.  I think you are on the right path in your learning.  I am on the same path with you.  It is very challenging but I expect it to be well worth it.  Keep up the good work.
I used a very similar approach in an ECS game engine I developed.  It worked well for what it did, which was separate entities by type to allow a more data driven approach and thereby improve performance.  Eventually, however, I chose to move even further down a meta-programming path by having the systems provide a method to determine if the EntityType met the criteria for use by the System and a vector each System provided to store all entities of those types.  I chose this, rather than to separate by type which is more of an OO way of thinking to avoid forcing entities to support a base class to be used by a system.  I had an EntityManager with an AddEntityType function which called the AddEntityType function for each System which would only add the EntityType if it met the criteria.