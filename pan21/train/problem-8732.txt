Why was size temporarily decremented? I presume it's to avoid an out of bounds array access in elementData[i + 1]. But you can do that just as well by making that be the guard condition:
And actually, it might be easier to read without the comment altogether.  Then we are returning false from a method named isPairwiseSorted because the ith element is greater than the next element.  That should tell us that it is not pairwise sorted if decreasing.  
Special cases are sometimes useful, but KISS: does this simplify the code or make it more complex for no benefit?
It should be obvious that your method is not thread safe.  If size were accessed while this method was run, its value might not match what it should be.  
This is also more readable.  Now someone can see that our new value is a pairedSize, which is always even.  
There are times when it makes sense to update and then restore, but this doesn't seem to be one of them.  Even if you fixed the error where you return without restoring, there are other hazards.  And this is more work.  
We don't know exactly how a compiler might optimize things, but consider that if size is stored in memory, it will still need to be loaded into something that the processor can access directly.  So we can load size into a register, update that register, and then not save the register back to size.  That's less work than what this does.  
Where you should have had a comment in the original code was for reIncrementSize.  That's confusing in that you set it one place and make use of it in a different place while the true effect is the temporary change in size.  
Yikes! It really shouldn't be necessary to make temporary changes to the state of the class. But if you really absolutely have to do it, you should use try ... finally to guarantee that they are undone. Here the temporary changes introduce a bug: if we hit the return false then the size is permanently decremented.
You want the change to be temporary and have to make a temporary variable regardless.  So just make the temporary change to the temporary variable.  That gives you the exact change that you want without extra scaffolding to make it work.  The code is both shorter and more robust.  