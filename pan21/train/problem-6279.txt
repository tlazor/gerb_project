My question is, how can I transform my features, so that I can use standard classification algorithms like Logistic Regression/Random Forest to classify a new data point? Are these algorithms effective for these scenarios? If so, how  should I proceed to take the previous data points into consideration?
I have a dataset consisting of marketing calls to different clients, which include the timestamp for the call.
I have read that time series data can be converted to a supervised learning problem, by including lead and lag columns of the dependent variable. But since my test data will not have those columns, I am confused to how they might help me.
My goal is to train a model to predict if whether a customer will answer a call or ignore it based on the call time, as well as other features like caller id, etc.
The issue is that the outcome of the call is clearly time dependent, that is, the order of the data points per client matters for the prediction of the dependent variable at a given time.
It doesn't sounds like you are dealing with a standard time-series problem. The timestamps themselves don't strike me as too important for predicting answers to a call. You can probably achieve good results by simply including the time of day and day of the week in addition to the features mentioned above.
They should be effective if you can derive good features, which shouldn't be too difficult. This is more manual than using a sequence-model (say LSTM) but if you derive good features, I would expect this too work better. 
You need to transform your timestamp column into several numerical/categorical columns representing that specific timestamp. After converting that timestamp column into features, you can simply throw supervised algorithms on the problem.
You can aggregate all previous data points into a new features. For example the number of previous (un)successful call attempts or the number of days since the last call. After this aggregation (of transforming previous calls into new scalar features) you are no longer dealing with a time series but have the usual design matrix with one row per client (and one column per feature).