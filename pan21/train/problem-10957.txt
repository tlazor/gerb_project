The one extreme situation is where you have a single threaded task that you are wanting to run as fast as possible.  In which case, the go for clock cycle efficiency on processor architecture and then as high clock speed as affordable.
Two cores running at 3 GHz do not give you the same performance as one core running at 6 GHz. That's like saying that if you buy two Ferraris that can do 200 miles an hour each, you can go 400 mph. So why have two cores at all? Two or more cores can accommodate software that's specifically written to be processed in two cores at the same time, or in "parallel."
If you have multiple tasks running on the server then go for as many cores as you can afford, and the memory and memory bandwidth to keep the CPU's busy.
Therefore, when this "multi-threaded" software is run on a dual core system some of it will run on core 1, some will run on core 2, and the result is a much faster effect to the user.
if you gave us exact model numbers of the CPU's and a description of the task then we would be able to give you a much better insight into what the differences mean.
Dual-processor server often give out more memory slots; thus you get higher CPU speed, drawback is a power consumed and hardware price (more for m/b).
Troggy is correct - we need more information because it really depends on what the server will be doing and running.   The key to getting use out of your multiple core system is always the software. 
2x3.06 < 4x2.4 - that's mostly all there is to it. Also quad core processors are a much newer generation that the old single thread 3.06's (by a lot). Other than that there's little difference at that end of the market over socket vs core.