One of the issues with merging (or other transfers) is the ancillary items that are AD driven but not AD controlled.  These require a comprehensive inventory, and often individual action plans. Consider two SQL Servers A and B that might perform cross server functions (such as log shipping which also involves file shares), but also server multiple web sites using integrated authentication.  Each site has disparate users (let's say), who migrate at different times.  The user's access to each must be accommodated as the users move, and must be accommodated (again) as the server migrates.  As each server migrates, if A and B do not go together, cross-server functions break (or must be changed). 
There are many factors to make it difficult but I will try to focus on the most important points and make it short.
Merging multiple Active Directory (AD) deployments requires planning and testing, but I don't know that it's particularly "mammoth" or "tedious". The product wasn't designed to allow for simple "cut / paste" between disparate AD deployments, but there are tools that make such migrations reasonably straightforward (Active Directory Migration Tool, for example). The integration of security principals from AD on member computers in a domain makes it possible to have reasonably complex configurations with lots of edge-cases that need to be explored in a migration of any significant size.
TL;DR - The configuration information in AD "drives" a lot of functionality and, especially in environments where things are poorly documented and controlled, a lot of people are reticent to make changes to AD for fear of "breaking stuff".
Like you already pointed out, the reason we have two different forests/domains to begin with, is because "historical" issues, whether it be a business M&A, or different business units wanted different control over their environments. The result? The forests/domains represent different business requirements, security obligations, and procedures. Much of time of merging two forests/domains is spent on how to come to an agreement between different parties about how things should be done, to come up with a universal standard.
In a large enterprise that's no rocket science, exactly, but it is an incredible amount of detail to be found and handled.  And there are always surprises -- applications someone is using, on a rogue server for example, that go from hidden to "the whole company will stop if I have to stop using that FoxPro program".  
The worst as usually not Microsoft products, they tend to be applications.  I've done this three times, and each time flushes out (as an example) applications with hard-coded domain assumptions. Even if not hard coded to domain X, they may be hard coded to only work for one domain at a time, and so present challenges during migration. Then you find out no one is maintaining a dozen of those applications any more, and for a few no one has source code.  But even Microsoft applications each present separate challenges needing separate action plans (Exchange, for example, which varies by version; but also sharepoint, SQL Server). 
The simple solution for (very) small companies is to move everything together.  The practical answer for distributed organizations, with travelling computers, multiple sites, etc. is that it may take months, and with each configuration change (say server migration) a new set of issues must be accommodated.
On technical level, you need consider how to retain existing authentication and authorization infrastructure. How do you ensure your users from all environment can still access all of their files/folders/works regardless which forest/domain they are in with minimum disruption. 
Simple thought experiment - if you needed to move, how likely is it you could come up with EVERYONE you needed to send a change of address to, and not miss any?  That's almost exactly what one needs for an AD merge, except for the whole enterprise(s).  To do a successful migration/merge, one needs to have a comprehensive application inventory, and for each application determine how AD is used, and how to mitigate the migration/merge.
Setting aside technical issues, I think a lot of reticence to make sweeping changes to AD environments comes from a mixture of mythology that has grown up around the product and practical concerns about configurations that (may) depend on AD but aren't adequately documented. I've worked a number of contracts for reasonably large IT operations (Fortune 1000 companies) where there was a almost a "paralysis" to make any kind of large scale changes (to any systems-- not just AD) for fear of "breaking" existing functionality. This is, to me, a sign of poor change control practices and ignorance about products.