It depends. I daresay there are any number of ways to feed and care for an EDW, so I suspect there are any number of ways to guard against source system changes.
Most of our stuff is Type 1 and fed with flat files, which ostensibly guards against source system changes—except when they remove a column, or change the order of columns, or any of a number of other or statements.
We get flat files from the Mainframe, .NET applications, and outside entities. A change to the file format of a file breaks the ETL, but we've developed a framework, of sorts, that reports success or error, and load statistics, so we know when there's a failure. I can generally troubleshoot the issue quickly and report back to the responsible team, in polite terms, "Please fix your problem."
We also have some Kimball Design stuff, which reads from Message Queues. I don't know of any specific instances of deprecated columns, but we could certainly modify that framework to NULL out a deprecated column in any new record—assuming they didn't remove a PK, which would present an interesting challenge I'd be up for.
If a column were to be deprecated, but they wanted to preserve existing values in that now deprecated column, I could do it. The load package [we use SQL Server and SSIS] would be modified from Kill N Fill to Insert/Update and never NULL out the deprecated column. On Insert, if the column were empty, then of course the deprecated column for that row would be NULL. We've done this before.