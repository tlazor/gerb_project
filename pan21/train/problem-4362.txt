You should focus on sending as little data as possible to the clients. If it's not important to the game play, there's not much reason to sync it. Using this method, it's not likely that someone will be able to cheat( unless the sever IS a player ), because all important data comes from the server.
All logic that affects how the game is played should be synced between the clients. This logic should only run on the server, and a visual representation should appear on the client. For example, imagine you have a server and one client. You have one player character in the game that can move. So, from this we know we have two copies of the player's data; one on the sever, one on the client. The "real" player should be kept on the server. So, we move the server copy only, and immediately sync the new position, rotation etc to the client so that it can correctly draw the player's current state. The client should only be responsible for a visual representation. Most the game logic is not actually running on the client.
Then there's non-synced data. This may include stuff like particles, or other visual effects that don't need to be synced as they have no affect on game play and may actually be very costly to sync.
From what I've gathered, and believe me, I'm no expert, the "usual" way to do a client server game is to have the game running on both. The server can also be a player. The way you should look at it is, there's two types of data in the game; synced and non-synced. 