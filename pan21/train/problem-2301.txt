Another benefit of gravity is that it makes falling automatic and smooth.  If a player walks off a ledge he'll accelerate downward until landing.  You can use the magnitude of the velocity when landing to determine damage from falling, too, if that's part of your game.
You can then set the velocity back to a negative amount after detecting that some fixed amount of time has passed or that a certain height has been achieved in the jump.  Set it back to zero once the player contacts the ground.
This jumping will still not feel super smooth.  Getting really good jumping requires acceleration when going upward and lots of other small tweaks to "feel right."  It's somewhat common to want to apply a constant upward velocity for a small amount of time (unaffected by gravity) before letting gravity kick in to feel better.  Getting a "perfect jump feel" can be somewhat difficult and depends on your specific game.
You can do further from just acceleration and model force or even impulses as well.  These are typically less useful for standard platformers, though.
Note that this is a very simplistic form of Euler numeric integration.  You may want to use a better (and more complex) form of integration in your game, though the simple methods works perfectly fine for many.
Note that horizontal movement can benefit from velocity and acceleration as well.  It can feel a bit nicer and more "Mario-like" if the player accelerates to and from rest when moving horizontally, giving a very slight slide effect when stopping and a very small "start" effect when starting to move.  In these cases, you'll want to model horizontal movement with a velocity (which is capped at your maximum horizontal speed), an acceleration from input (+/-X for right/left respectively), and a damping effect to remove horizontal movement over time.  For example,
Simply adding or removing a vector to the translation will be insufficient on its own.  You don't want to press jump and then instantly be 10 pixels higher.
That formula removes 1/10th of the horizontal velocity every second.  You can play with the numbers to find the right values for your game.
Now you jump and get that initial high upward velocity.  The player shoots upward but slows down automatically, eventually falling back downward.  Zero out the vertical velocity while in contact with the floor.
Having only velocity will give you linear movement.  It will look "wrong" and feel bad to players.  To make it "right," you need to include some form of acceleration, which will make the player's movement have more "curve" to it (this is all in terms of continuity, curvature, and other topics you would have learned in Calculus I).  Velocity is the first derivative with respect to time of position.  Acceleration is the first derivative with respect to time of velocity, and hence the second derivative of position with respect to time.
You need to apply some very basic form of physics.  At the simplest, you can use velocity and nothing else.  When the player jumps, add a decent upward velocity, say (0,10,0).  This velocity is in units/second.  That is, each frame, take the elapsed time dt and multiply it with the velocity to get a change in position, e.g.
The simplest form of acceleration to use is to just add gravity.  Each frame, before applying velocity to position, first apply acceleration using much the same formula.  Let's say that the best gravity for your game is (0,-10,0)