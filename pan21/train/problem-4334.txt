I did this because I have files that I can't seem to locate, but I know roughly where it is. The FileFinder class can:
I agree with @holroy about the fact that there are too many things done in the constructor. Its job is too heavy, instead of just initialize some things. Moreover, it makes the FileFinder instance unusable for other parameters, e.g. to search in another folder or with another regex, one will need to instantiate a new FileFinder.
I would include the path of the file which is in problem because it will be easier to see what the problem is.
The implementation of this method is correct in general, but is coded entirely with before-Java-7 style. Indeed, java.nio would be a lot of help here.
I would therefore rather have another method like searchDirectory() or something similar with an optional clearing of previous result. This would allow for doing subsequent finds and copies from multiple directories. It might require some extra information regarding root in the result map.
The anything else part I've already covered up top, and I don't know the java.nio package. Whether it is OOP enough? Well, I kind of dislike the amount of work done within the constructor. To me most constructors should do a minimum of work getting ready to answer requests.
findAndCopy() should return a boolean too since copy() does return one to notify if the copying was successful.
The target Path object can be created easier with dest.toPath().resolve(file.getName()), no need to instantiate a File.
Isn't it annoying when you can't find a file you recently created? Especially when you either have a very disorganized drive or a directory with lots of files.
In the constructor, matchingRegex must be initialized before calling getAllFiles(root);, otherwise a NullPointerException is thrown if the root folder contains subfolders.
It should be named getAllMatchingFiles, because in the current implementation it returns only the files with names matching the regex and all the directories. By the way, it is not very clear why the directories are put there.
It's a good idea to use Files.copy() inside it (and even better would be instead of it). Since this is a public method, the validation of the arguments should be done on non-nullability of file and dest. The existence of the files will be checked in Files.copy(), with the respective exceptions thrown.
I'm not sure why you're using protectedon all your "private" variable for your class. Are you really planning to subclass and use those variables ? Is it just what you normally do ? It's not bad do this and I don't have a real argument other than it fells weird. Why are you so open in your class when there is little chance that you will need it. 
Your FileFinder class does not limit itself to just finding files, it can copy them too. I would argue that copying should not be done in that class, maybe in some other class with similar structures. You could also maybe rename your class to show that it's not just responsible to find files.
In chat there has been talked about allowing for partial searches, and that sounds like a good extension. Getting multiple files out of your find function could also be nice. 
I think that this method should be defined elsewhere, because it does not correspond to the functionality of FileFinder.
This implementation will return all the files having fileName. If you want to get them by regex, it's achieved with a little change in the if condition.
You do not log or notify the user what did go wrong. It's ok to not let the program failed in this case since you can't really do anything to resolve the problem, but your user may be able to do something. I would either log it somewhere or notify the user with whatever console or GUI you're using.
First of all, there is FileVisitor interface. Using a SimpleFileVisitor prevents us from pre-calculating Map<String, File> files. It also solves the problem of files with same names in different folders: