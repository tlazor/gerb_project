My apologies if this question has been asked before, but I may not be using the correct terminology in my searches...
Selectors are a option here, but those require manual management. So it might be better to speed up the execution time of playbook itself.
That is not the way to use Ansible. Your playbooks should be written in a way that it doesn't matter if you have applied a configuration set before ("idempotence"). If they are, you just can apply the latest version of the playbook and your systems should end up in the correct state. 
However that doesn't change the need to create idempotent playbook and roles. If the running time of a playbook is a issue there is the option to use stat module to set conditions to skip longer running tasks.
In my spare time I'm managing a limited amount of hosts (desktops and laptops running Debian Stretch) with Ansible. My 'installer playbook' creates a single configuration on all those hosts with different hardware to make management much easier. I'm now manually running an updater role from time to time and every once in a while I find a useful tweak that I then deploy to those hosts that are online. But: some of them rarely come to the office, and if they are available for an update, it's always a hassle to determine which tweaks I still have to deploy on that machine...
This might be a good use-case for ansible-pull. Hosts which are not permanent online could be configured to run ansible-pull when connected to the office network.