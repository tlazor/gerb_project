P.S. If bypassing Linux kernel - is all that DPDK does, I don't understand, what prevented these optimisations earlier, and why vendors needed to spend so much money for building ASICs and other staff, when they could just write new Operating System or library such as DPDK... 
I've tried to do a little research, and the most of what I've been able to undestand is that: DPDK allows application to bypass Linux kernel, reducing some copying and an amount of IRQ requests. Is that all? Or there are also hardware advances in newest x86 CPUs? Maybe some new instructions? Maybe some templating-blocks? Or another architecture optimisations? 
DPDK is about controlling hardware functions through a framework with an Environment Abstraction Layer (EAL) that provides a general API for various device types, hiding the actual complexity. You can write your SDN device as an application using this framework.
I've heard that DPDK library will allow us to use more Software-switches/routers (and maybe even to replace them completely), because somehow it helps dramatically increase performance on processing packets for x86 CPUs.