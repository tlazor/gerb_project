If you don't use InnoDB turn it off. InnoDB has buffer set up with innodb_buffer_pool_size and MyISAM uses key_buffer. You can find both values at mysqladmin variables.
As one might guess from some of my previous posts I run collectl everywhere.  Download/install the rpm from sourcefore and '/etc/init.d/collectl start' and you're done.  It will collectl over a couple of hundred performance metrics every 10 seconds at <0.1% of the cpu.  It will also take a snapshot of process data every minute since that's a heavier weight operation.  You can then play back the collected data in a variety of formats or even plot it with a web-based tool called colplot, which is part of the collectl-utils package.
Regarding knowing what the computer does? It's difficult. Try to find the exact times when the system was busy and check out both system and user crontabs and webserver access logs. 
How to tune a Linux server, running Apache, PHP and MySQL would fill at least 4 large books - and there is no magic solution.
Sounds like you set too high a threshold. Try setting the threshold to 0 and write a parser to strip the parameters out of the queries to identify which ones really are slow. Or just find one already written.
However in my experience, most of the performance problems on LAMP stacks are poorly written database queries. You have discarded this as a possible contribution to what you perceive as a performance issue - I'd recommend you go back and have a very long look at this.
System metrics are good for telling you how the performance of a system is constrained - NOT what the performance actually is. Start recording %D in your apache logs, and analyse the results to find out how your system really is performing. Prioritize the URLs with the highest totals for optimization.
Looking at brief and/or incomplete pictures of what the system is doing ain't going to get  you there.  You need a longer-term picture of fine-grained data that you can drill down into to see what's really happening.
Propably your table are growing with time and you're losing on the mysql buffers. Try to find out if your tables are of type MyISAM or InnoDB and tweak buffer settings accordingly.
The details you've provided from your system are very contextual - assuming that you're webserver is setup correctly, they suggest that the CPU usage is mostly down to mysql - but if the webserver config is wrong then the opposite may be the case.
Once you've sorted out the database, the other things to check are that you are compressing all html, javascript and css (mod_gzip) and PHP generated HTML (output buffering). Do make sure you've got an opcode cache running (like APC). And do make sure you're serving all your static content with sensible caching info.