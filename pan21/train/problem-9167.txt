The answer is there's no silver bullet. You're doing discrete physics, and therefore you're missing a lot of information. For example you don't know which point on the car collided first, you can only make the assumption it's the deepest point. You also don't know 100% which part of the road that point hit. In your above drawing, you can only assume based on the car's velocity it was probably the inclined portion as the car moved forward into it. In general game physics just needs to look close to right. It appears you're fairly familiar with the base concepts of realtime physics simulation, but here's a great resource to help solidify those foundations: https://www.toptal.com/game/video-game-physics-part-i-an-introduction-to-rigid-body-dynamics
If you continue with discrete physics i'd recommend sitting down and thinking about what edge cases you might encounter, what information you have, and how you can use that information to iron out as many situations as possible. Start with the general case, then add exceptions in your algorithm until it's mostly right. If your game has only a few cars, you might consider implementing continuous detection using Conservative advancement. This method has some bad worst-case scenarios, but if you only have 10-20 cars you're very unlikely to see this have a huge impact. Erin Catto, the maker of box2D, has a great talk on his take with conservative advancement which he calls Bilateral Advancement. Here's some resources to get you started on those topics.