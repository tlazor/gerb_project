One of the simplest, to implement and to work with, is to use some sort of text grid, used in a lot of roguelikes. Here's an example from puzzlescript: 
Sometimes you could have gigantic maps; imagine a tile-based space game where most of the space is empty but the map is massive. Representing it as a 2D array would be impractical - a 1 million squared map would take one trillion elements to represent. Here you may want to go with something like a sparse matrix storage, i.e. you only store where interesting tiles are, and not the whole map. There are also certain procedural generation techniques you can use to cut down on storage requirements.
They are extremely easy to read with the human eye, extremely fast to load because they are just .txt files, and quite versatile. As you can see, ~begin, means that it is the beginning of a tile map, ~enemy_rate is a parameter I use to specify things about that map, and ~end means that it is the end. I can have as many of those I want in a file, since they have beginnings and endings in the file. 
For others we've used something as simple as a bitmap where eacht pixel's color meant a different tile-type. The tile-type determined the properties of the tile. This made the map easy to observe and edit with basic image editors. You could decide to store aditional information in different color channels or in an accompanying file.
Sometimes you have lots of tile types/properties and not enough ASCII characters to represent them, so another approach is to use tile IDs. That is, each tile is represented by an ID number, and the entire map is a 2D array of these numbers, followed by tile definitions. So you might have:
In this example getCollGrid(x, y) returns the value at (x, y) position; and checks that it isn't 0. I use that in an example game, so it does work.
However, since this is ASCII, you are limited to a total of ~93 different possible drawn ASCII characters. For most cases, 93 different tiles is more than enough, and you could make modifiers, but something to consider.
As for checking for collisions, I have a really basic version in C++ that does this exact job, but it's not perfect. This is what it looks like:
Loading the tile map has many different possibilities. Probably the most common is an XML file, but I personally dislike XML files because they are way bigger than they need to be. What I do 95% of the time for this, is have a text file that does a diagram of it. Here is an excerpt from a tile map in one of my own games.
What you are trying to do is storing a grid of numbers into an array, there is unlikely to be one, best solution. We've used Paolo's example for some projects. 
Each tile is represented as a single character in a plain text file. One advantage is that you can edit levels using a text editor. You can also use lots of different characters to represent different tile types, so there's some amount of flexibility.
This is how Tiled does it; the actual file could be XML, JSON, or anything that can represent 2D arrays.