Loading that png into your program as you are similarly now, you can then divide it into equal frames (you can also make use of an array here by storing each frame array[0] ... array[5]). Then in your update loop if the character is walking you simply draw the relevant frame.
If a tutorial is using functions or classes you aren't familiar with you should look them up. If a tutorial is using syntax you don't know you should look up a beginner tutorial. If you don't understand a function/class/syntax despite looking it up you could always ask about it specifically.
You will need your sprite drawn into evenly spaced squares/rectangles on a sprite sheet. I will refer to this as an example. You can think of this png as 6 frames of a walking animation.
You won't need to use global variables (and should be avoided for numerous not listed here), as well self and super you don't need to fully understand yet until you start extending your program and using inheritance.
Considering you want to make a full game (and come from Java which is strictly object-orientated) you'd probably want to learn basics such as creating classes and single-inheritance first. You should especially learn naming scopes (such as global/local variables). You can make a game without making classes, but since pygame use objects like Surface you'd probably want some understanding about them.
If you can't figure out splitting the png into frames in code, you could manually save each frame of the png yourself and just load each part in. (Remember arrays are 0 based).
Please note my examples are more C# like syntax as I am not familiar with python. The same fundamental principles apply though.
What this will do is draw the first frame of the sprite, then frame increments by 1 and when draw is called again it will show the next frame of the sprite. It will happen quickly and give the appearance of the walking animation. Depending on your game engine setup and FPS this may be extremely fast so you may want to only increment frame every 15 steps or so.
To answer your question however, the pygame.transform module do offer functions to manipulate (resize, flip, rotate and more) images.
To get a rectangle the same size of an image it's as simple as rect = image.get_rect(). Remember though that a rectangle is an Rect object so you need to know how to assign and accessing attributes from it in order to use it effectively.