If you do these, the shadow will remain rock solid in world space as the camera moves around.  (It won't remain solid if the camera's FOV, near or far planes are changed, though.)
The bigger issue is that this produces a shadow frustum that continuously changes size and position as the camera moves around.  This leads to shadows "swimming", which is a very distracting artifact.  In order to fix this, it's common to do the following additional two steps:
As a bonus, if you do all the above, you're well on your way to implementing cascaded shadow maps, which are "just" a set of shadow maps calculated from the view frustum as above, but using different view frustum near and far plane values to place each shadow map.
There are a couple caveats with this basic approach.  First, the Z bounds for the shadow map will be tightly fit around the view frustum, which means that objects outside the view frustum, but between the view frustum and the light, may fall outside the shadow frustum.  This could lead to missing shadows.  To fix this, depth clamping can be enabled so that objects in front of the shadow frustum will be rendered with clamped Z instead of clipped.  Alternatively, the Z-near of the shadow frustum can be pushed out to ensure any possible shadowers are included.