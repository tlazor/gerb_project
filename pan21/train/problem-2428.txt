It may show the old collation, but it's been changed. Please note that changing the collation at the database level does not change it on any of the items underneath until it is specifically changed, however all new items will use that by default.
For the non-SQL Server Collations (i.e. those having a name that doesn't start with SQL_), you are most likely meaning one of the following two Collations:
Depends, does you application require a specific collation or options? The advantage is for the application to sort and display data properly.
It is not an issue if it is what your app needs. There is a reason why each string column can have its own Collation: sometimes that is necessary. Just keep in mind that new string columns that do not specify a Collation via the COLLATE clause will pick up the default Collation of the Database. And some Database-level meta-data will be using the Database's default Collation, which can cause problems if comparing to string columns of a different Collation. The error you will get about a Collation conflict can be solved by specifying the COLLATE clause in the query / queries.
Third, the SQL Server Collations (i.e. those having naming starting with SQL_) were deprecated with the release of SQL Server 2000. So, if at all possible, you should probably standardize on Latin1_General_100_CI_AI (which is the newer version of Latin1_General_CI_AI).
Second, not only can I not think of an advantage to having SQL_Latin1_General_CP1_CI_AI as the Instance's default Collation while the Databases have a default Collation of either Latin1_General_CI_AI or Latin1_General_100_CI_AI, I can think of some disadvantages, the main one being that the default Collation for tempdb will be SQL_Latin1_General_CP1_CI_AI and so if you create temporary tables and do not specify COLLATE DATABASE_DEFAULT for string columns, then their Collation will very likely be different than that of the string columns in your regular Tables as well as in any Table Variables (which use the "current" Database's default Collation). This can cause issues (one's that are easy enough to work around once you find them) when doing sorts on data in temporary tables as well as when comparing string columns between regular tables / table variables and temporary tables.
It's not an issue for AGs, it's a potential issue for the application. The AG will happily send the log block changes all day.
While I cannot speak to the Availability Group aspects of this question, I can address the Collation aspects:
If you don't trust me (I'm a random internet person!) and you have a test system you'll see that this data is cached. Change the collation, then restart the secondary replica. Now check the collation. I do not know, though, why the metadata cache is not refreshed.
Also keep in mind that string literal and function / procedure parameters use the Database's default Collation and might behave differently than expected in certain situations. Meaning, due to Collation Precedence, comparing two parameters / literals --  IF (@Param = 'literal') -- might produce a different result than when comparing a column in a table with either a parameter of literal -- WHERE alias.ColumnName = @Parameter or WHERE alias.ColumnName = 'literal'. The former scenario will use the Database's default Collation while the latter scenario will use the Column's Collation.
First, there is no Latin1_General_CP1_CI_AI Collation. The only Collations to have "_CP1_" in their names are 16 of the SQL Server Collations (i.e. those having names starting with SQL_). The following query will show you those Collations: