I have a similar problem, though all IT is involved with is the very most basic of setup of a new laptop. I'm not involved in setting up dev environments, each dev is responsible for that (which rapidly becomes a team effort, which is a good thing in its own way). 
Historically we've had people develop on a MacBook, deploy to the Integration environment, then spend a few days working through mac-specific quirks that don't work on the target environment. This "spend a few days" problem went away once these users started using VMs. 
You're battling entrenched practices, and that's always going to take some time to change. At least, without an order from On High.
However, without explicit management support anything you do will be subject to convincing your supported users that what you're doing is for the best. That is a skill we can't teach.
This is a tricky problem, and one that rams right into the political really, really fast. If the corporate culture is very strong in the "devs build their own, it's how they're best productive" vein it can be impossible to crack. However, as IT is definitely involved in at least the initial setup, it sounds like you're not quite that far down the rabbit-hole. 
Because of the nature of our work, we've found that VM-oriented development works really well. Since we also have a mix of OSX, Windows, and Linux laptops as dev-stations, and we develop towards a much more specific combination of tools and OS, virutal-machines are the most reliable way to be sure that new code will work on the target platform. 
A good plan for now is to build a VM in whatever platform you're using that has all the goodies you always put in your fresh builds. Then wire them up to pull updates from a repo hosted by you, so you can better manage what software gets updated when and you get less version-creep. For best effect, include some tweaks that seem to be common to a few developers as that will make the hearts-n-minds battle easier.
As for "GUI IDEs in a VM", this can also work. Several of our Mac users go this exact route, they have a full-screen VM in one Screen upon which they do all of their code-crafting and use the other screens for non-development things like browsing stackoverflow for answers. This works best if the clipboard can be portable between the desktop and the VM.
Whether or not VM-oriented workflow works for you depends in large part on your development practices. This seems to work best if a dev: