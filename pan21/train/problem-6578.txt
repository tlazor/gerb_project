Consider this:  Your table would allow a record that says a Prius is a Toyota and another record that says a Prius is a Chrysler.  Obviously that's not good.
This would give you a normalized schema with no redundancy and very little risk of data corruption due to insert, update and delete anomalies.
Neither of these models correspond to the way an application user sees the data, in forms and reports.  The creation of forms and reports from tables is non trivial, and also tedious and error prone.  You can get help from automation tools in a variety of application builders.  Perhaps one of the simplest is MS Access, with its forms wizard and report wizard.    
The problem is that some of your data depends on part of the key, instead of on the whole key.  This means your table is only in second normal form (2NF).
Over time, you will add to your very simple model.  For example, you may want the website URL for the Manufacturer.  You are going to want to store this in the Manucaturer lookup table, and not in your one great big table for a variety of reasons.  By the time you get up to about a hundred tables, five hundred columns, and maybe a half a million rows,  you'll understand why one great big table is a bad design. It's bad for perfomance, it's bad for data management, it's bad for clarity, and  it's bad for application programming.
There is nothing wrong (in principle) with a three way (or more) intersection table, as long as it properly describes your relation.
As long as you stay with tiny examples that don't even need a database, you can stay with one great big table.  
Most of the time, lookup tables describe subject matter entities while junction tables describe subject matter relationships.  If you want a conceptual model of the data and one that is closely linked to the subject matter and the project requirments, I recommend the Entity-Relationship (ER) model.  If you want a logical model that captures your design of the solution, I recommend the relational data model. The SQL model (lookup tables, junction tables) is close enough to the relational model for most purposes.