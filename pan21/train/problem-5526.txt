test is a virtual command inside bash or what you could call a builtin. /usr/bin/test exists as well as an external command. Along with builtins and commands there are also functions which you can think of more like custom builtins. The priority on how they are called are: functions first, builtins second, external binaries or commands last; but you could customize that.
If you have somehow made a function that has the same name as a builtin e.g. cd, to skip calling the function and call the builtin cd instead, you could use the builtin command builtin e.g. builtin cd args.
Although the program test is part of the GNU coreutils package and will therefore being delivered with any GNU/Linux system, it is also compiled as a builtin into bash in most distributions. I guess that this is to improve performance as it does not need to start a child  process for every conditional statement. Needless to say that the shell will use the builtin in favour of the binary if both are present on the system. But you can call:
Seems that I doesn't really got your question on my first approach. Will try to explain it further... 
Likewise if you have a builtin that has same name as a command stored in the filesystem e.g. test, to call the command test instead, either you give the explicit path e.g. /usr/bin/test or use the builtin command command e.g. command test -n xyz.
Historically, test (and its synonym [) were (and remain) external programs. But most shells provide them as built-in commands for efficiency. The same is true for common commands like true, false, printf, echo, etc.
Further note that bash is not the only shell on most systems and other shells may don't have this builtin feature (like dash for example). Also there are systems which may not even have bash installed. For such situations there is the binary from coreutils.