Xgrid is well suited to any task that can be distributed to run in parallel on multiple computers, whether workstations or servers. Sometimes these problem sets are referred to as "embarrassingly parallel". Computations which take a long time to complete, but require little data to cross the network, are excellent candidates (like Seti@Home).
Xgrid itself simply executes a given task on a remote system, it cannot break down an operation performed by an application into smaller parts (like photoshop applying an effect to a single image). Tasks which can't be broken down into smaller pieces benefit more from co-processors or GPU processing (via CUDA / OpenCL / GPGPU).
Xgrid consists of 3 main parts (controller, agent, client). Tasks are issued from the client (command-line or API) to the controller and run on any available agent, similar to earlier distributed scheduling systems like SGE (bsub/qsub) or MPI. In addition to custom-code utilizing xgrid APIs, any application that can be invoked from the command line can utilize xgrid. Running a task is as easy as the following (where uname could be any command-line application, like matlab, R, blender, maya, etc.):
In the case of Photoshop, xgrid would be useful if you had to apply transforms / effects against thousands of images, as each computer in the grid could work on a separate image concurrently.
Xgrid is not well suited to tasks which are inter-dependent (have to be executed in serial) or those which require moving large amounts of data (where copying data takes longer than just running locally).