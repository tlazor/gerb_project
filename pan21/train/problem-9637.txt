Maybe this isn't a perfect fit for what you're after, but my approach most recently to this has been the combination of two Ruby gems and a web service.
The final piece of the puzzle is SendGrid - and while they push their paid plans, they do have a free plan that allows for 200 emails a day. I'm certainly not coming close to taxing their servers for this script, so it suits me fine. It may take a few hours for them to confirm an account, but once it's set up, I've had no problems.
We're using cron to manage our backups and other jobs in multiple locations. Using chef to populate files in cron.daily, cron.hourly, etc has worked pretty well for us so far, but with some issues:
You could try a structured job scheduler to manage tasks across your systems. Something like the Open Source Job Scheduler would work well for this. The benefit is that you'd have a central console to manage things, have a method to handle dependency-checking and a proper way to re-run or start jobs properly in the case of a missed job window.
Firstly, the gem whenever, which gives you a clean ruby interface for scheduling cron jobs (so, not a cron replacement, just a layer over the top).
I can solve the above problems myself with a bit of scripting, but I'm sure that this is a problem that others have solved already.
Optimally, I'd like a web-based frontend that I can use to see this information, either as an extension on cron or a complete replacement.
You can use Resque - with it's built in web interface - to manage jobs. Check out the Resque Railscast to see it in action.
Note that I acknowledge that this is a completely separate issue from verifying the backups after they've been completed.
Next is the backup gem, which provides a solid set of tools for managing backups quite neatly (including to cloud storage locations). Backup will also email you when tasks fail and/or succeed (it's up to you to configure).