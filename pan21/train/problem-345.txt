Lastly, with that number of reads versus writes be sure to plan your hardware (specifically your drive speed) accordingly.
MySQL can handle thousands of queries per second on decent hardware, and if the app is coded to be able to segregate read queries from update queries, it's really easy to set up read-only slaves for scaling reads. Whatever the language, make sure the app support persistent connections and/or connection pooling.
You're looking at about 30,000 requests a minute, assuming the load is spread throughout the day (unlikely). This is a lot no matter what system design is. 
However, you've underspecified the problem. We don't know how big the database itself is, or how amenable the queries are to caching. We don't know the interface you're giving people; are you required to accept SQL, or is the query language decidable? We also don't know how often the database is going to be updated and how critical those updates to subsequent queries.
As you didn't provide a lot of specifics I'm going to keep this brief as well.  The language is really up to you, although C Sharp / ASP.NET would fit well here.  I'd go with a noSQL database such as cassandra: http://en.wikipedia.org/wiki/Cassandra_%28database%29
Above two points are most crucial to answer your question because on low grade hardware and non-decent setup you would not get the performance mark you are looking for.