Say, for example, you stand up a webserver hosting your application and all relevant configs.  Then you register it as an Amazon AMI so you can deploy multiple copies (say, one for dev, one for test, and one for production).  You roll it out, and with how AWS works, you don't even need to change any IPs by hand.
A few weeks later you realize you need to change SSL session cache size in nginx, or users of your application can't upload large files.
So why not take a few days of your time and write out a simple deployment pipeline with Ansible or Puppet and put it in git?  From that point on, any config changes are only a push away, and you'll rarely have to worry about a similar incident occurring.
Then a week later you deploy a new box (a customer is asking for a UAT environment to test their integration).  You're sick, so someone else is standing up the server instead of you.  Or maybe your instance in AWS dies, so you have to rebuild production in the middle of the night after a good binge-drinking session.  Everything works perfectly... except for one specific config-related feature.  Cue wasting two hours of figuring out why it's happening as an account manager is riding your ass, only to realize the other admin forgot a single stupid config setting when deploying a new server.
Since you only have a few boxes, you do the update by hand.  You do these config changes a few more times and well-document them.
The main advantage to automation isn't just automation itself, but also that it provides you with an identical configuration across all of your resources.
Now, it's not peer-reviewed, APA-cited research papers you're asking for, but point me a sysadmin that's never had this happen to them, and my company will probably throw them a job offer with a pretty nice signing bonus.