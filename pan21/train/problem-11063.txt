This is actually a very simple system (although the answer length might make it seem otherwise). The important parts are:
Let's say your player needs to shoot. For this behavior, the Player Character blueprint should contain (at least) three custom events and one Input event. The Input event is called when the player tries to shoot, and executes one of the custom events; I usually name my events with _Server, _Client, _Multicast suffixes so I don't get confused. 
So if clients cannot see the GameMode, how does shooting work? The answer is in Replication - specifically, replicating the Player Character. If a blueprint is replicated, it is sent to the server every update cycle. It is important to note that, the bigger the blueprint that is being replicated, the more network traffic you generate. Any variables that your blueprint needs to use must also be replicated, otherwise your server-side logic will fail. 
PlayerShoot_Client is marked as "Run On Owning Client", and handles anything specific to the firing player - hit marker sounds, UI updates, inventory updates, and so on. 
The GameMode is key. GameMode is where you define the rules of the game - match time limit, spawn rules, and so on. It is also the place that determines player actions - who shot who, how much damage is done, player respawns. Only the server runs the GameMode, clients cannot see it. 
So in the shooting case, the Input event calls a custom event called PlayerShoot_Server - this is in the Player Character blueprint. This custom event is marked as "Run On Server", and contains all the validation logic: does player have enough ammo, is the weapon valid, is player doing something that would prevent firing. If these checks pass, a linetrace is done (for instant hit weapons) from the gun barrel, to see if anything was hit. If anything was hit, the custom event calls a couple of things: 1. PlayerShoot_Client is called that updates the firing player's ammo counts, and 2. PlayerHit_Client is run on the damaged client to remove health as appropriate. 
Unreal uses the Client-Server model, so when making a multiplayer game, the server is king - it should be the only place that you try to perform game actions. 
But what about weapon firing sounds, impact particles, firing particles and the like? Another custom event called PlayerShoot_Multicast, marked as "Multicast", is broadcast to all clients in the game. This event should play all the visual and sound effects; each client would check their sound attenuations and line-of-sight to determine if the effects are actually seen and heard. 