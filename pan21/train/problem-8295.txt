One thing worth keeping in mind is that when you have a field that is not required, but any values that are present must be unique will require you to store empty values as NULL. Otherwise, you'll only be able to have one tuple with an empty value in that field.
Let's say that the record comes from a form to gather name and address information. Line 2 of the address will typically be blank if the user doesn't live in apartment. An empty string in this case is perfectly valid. I tend to prefer to use NULL to mean that the value is unknown or not given.
For example, say you have a table to store a person' data and it contains a Gender column. You can save the values as 'Male' or 'Female'. If the user is able to choose not to provide the gender data, you should save that as NULL (i.e. user did not provide the value) and not empty string (since there is no gender with value '').
I don't believe the physical storage difference is worth worrying about in practice. As database administrators, we have much bigger fish to fry!
A new thought, a big influence on your choice of NULL / NOT NULL is if you are using a framework.  I use symfony alot and using allowing NULL fields simplifies some of the code and data checking when manipulating the data.
There are also some differences with relational algebra and NULL values: NULL != NULL, for instance.
It depends on the domain you are working on. NULL means absence of value (i.e. there is no value), while empty string means there is a string value of zero length.
If you are not using a framework or if you are using simple sql statements and processing, I would go with whichever choice you feel is simpler to keep track of.  I generally prefer NULL so that doing INSERT statements don't get tedious with forgetting to set the empty fields to NULL.