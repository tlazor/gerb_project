What I mean by that i sthat you could draw out the level using a very specific colour palette then when the level loads (or using a tool then saving the result) you could generate a map using the pixel colour of the full map as a guide for what tiles place in the actual game. So a green pixel could be grass, a grey one a road etc.. 
But drawing it will be slightly faster because you don't need to iterate tiles but can just blit from the original image (assuming your graphic engine is actually doing this and isn't stupidly blitting it tile by tile because the TMX file says so).
Having a huge image for your map will take more texture memory than a tileset would. Assuming a 32bit color depth, a 6400 x 6400 px map will take 156 MB of texture memory. Not much for PCs and consoles but might be too much for some low-end mobile devices. 
With a bit more logic you could place small variations of tiles so that the map looks better without having to do much more work or even create rules so that when a pixel is surrounded by X tiles of the same type it uses a different tile which is more related than the basic one. E.g. a basic tile could be short grass while a tile that is surrounded by 6 tile of the same type is long grass. It could also help make transitions between terrain types smoother (depending on what is required).
As the other answer mentioned it will take more memory to use but will be faster to render... that being said why not use a combination of both?