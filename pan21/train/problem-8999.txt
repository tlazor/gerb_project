You can use master-slave replication with Redis today. In the future, you will be able to configure a cluster.
The web app is running on Tomcat with nginx as the web server front-end. The caches are for sections of the page, not the entire request, so the cached content would be retrieved by the web app, ideally as a JSON document. I've contemplated just using ElasticSearch for this purpose but would rather not use something not purpose-built for caching, even if ElasticSearch is relatively fast.
The problem is I can't find any information on a cache server/NoSQL server that does this automatically out-of-the-box. Basically I'd like something that handles documents the same way that ElasticSearch does, where all servers on a cluster seem to get mirrored to one another very very rapidly simply by inputing the AWS credentials and having ElasticSearch perform a kind of auto-discovery to resolve the mirroring.
I have EC2 instances serving up a non-intensive, relatively low traffic website, and rather than shelling out for ElasticCache I was thinking of doing the caching on each server and mirroring the data in the caches.