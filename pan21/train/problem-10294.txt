You need to separate the ideas of storage and retrieval. Even in the blogs you mention, the entries are likely stored in forward chronological order, but displayed in reverse chronological order (ignoring the fact that it's made easier by using structured storage).
 files of over 18 million terabytes). Seeking the last record or the nth record or the last - n record in the pointer file, then the byte it points to in the main file would be trivial and quick. The trick that a special filesystem or driver would allow would be to make this atomic and make the resource file transparent. 
One could conceivably create a simplistic structured storage system that would store entries in the familiar forward order with "records" of a free-form and variable length with byte-offset pointers stored in a resource file in a fixed-length format (64 bits would support
Unfortunately there isn't an easy way to do what you want.  It would require a re-write of the entire file every time an entry is added. It would be SLOW and gets slower as the file grows.  I think the best you can do is a sequence keyed log that's reversed on display, but kept in "normal" order on disk.  Any SQL db could do this easily but it may be more overhead than you want.  