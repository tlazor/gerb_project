Sometimes a programmer just wants to include an installer so it automatically places shortcuts in the start menu and/or desktop, while the program itself doesn't actually use shared dll's.
When a programmer uses a function that is not native to windows but instead requires a shared dll, for example a framework of some sort, the program needs to be installed in order to make sure all shared dll's are placed at the correct place. 
Lastly, some programming language compile script code into an executable and use certain libraries. Visual Basic is a form of such language. In these cases, you do need to bundle a set of dll's with your program in order to ensure they work properly. Copying the executable may still work if those shared dll's are already present on the system, but if they aren't the user will get an error claiming they miss a certain file, for example: vbvm50.dll (Visual Basic 5.0 runtime)
Uninstall does the same thing, it will see if the shared dll's used by the program are used by other programs, and if not, then it removes the shared dll's.