... and I'm kind of hoping that by posting this you will say "this already exists, and it supports Windows workstations as data repositories"  (I know that it already exists on Linux)
By the way, this would not be used for any mission critical data, high traffic data ... it would hold maybe some archive or a backup of a backup or maybe just a giant scratch disk for junk that needs to be put somewhere from time to time.
2) You don't synch it up. This avoids the problem in 1 above. But the problem is that your redundancy level will gradually drop. If you hit the magic 1/3, you blow up and fail.
... the last part is critical.  If I use a regular linux MD type raid, all the traffic will create havoc on the LAN.  But there must be something that can deal with this little more gracefully ... and if it was really smart it could also handle graceful degradation ... half of the wokstations offline? No problem .. see half of the files.  They come back online.. there they are.
Conceptually, the problem is this: Say you have 9 machines and your design plan is that the data can be recovered with any three. Now say you actually have only three machines and you're still operating. You'll accumulate data that's only on those three machines. When a fourth machine comes up, you are in a vulnerable state where if a machine other than the one that just came up fails, you lose data. So you have to synch fast, regardless of the cost to performance.
1) You synch it up. But this will put a heavy load on all machines and the network until the machine is back in synch. And the data will be changing while you're trying to resynch it, and performance will suck for a while. And who knows, perhaps the moment you get the machine synched back up, it will just get shut off anyway.
That's not to say this is a bad idea. It's just useful only for certain types of data. For example, it's great for backups, since they don't change. And you can put new information on whichever machines are up at the time. And losing access to a backup temporarily isn't critical.
The reason this is difficult to do is simple -- consider what happens when a machine comes back online after having been offline for a long period of time. Most of its data is out of date. At this point, you have two choices: