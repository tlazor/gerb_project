In principle Terraform could be used to coordinate the one-time setup of the data pipeline, and ongoing changes to its configuration. However, at the time of writing Terraform doesn't yet have support for Data Pipeline and so an alternative approach would be required.
Another option would be to use an external orchestration service like AWS Data Pipeline, which can coordinate the process of starting up an instance, running a compute task on it, saving the result somewhere, and then shutting down the instance.
I poked around at Terraform but it seems like the nature of its statefulness makes it difficult to spin up and down boxes like this (I'd have to keep changing the .tf file to add or remove machines). am I correct about that?
In this case there would be a one-time task to set up the Data Pipeline itself and the associated Task Runner that would start up your EC2 instance, and then ongoing usage would involve triggering the pipeline using the Data Pipeline API.
do I have to fall back on managing this manually with Boto or is there something smart that I can do here?
Your problem here certainly isn't the "standard" Terraform use-case. It seems like this breaks down into three sub-problems:
What Terraform brings to the table here is automatically maintaining the state (just the instance id in this case, really) so that the instance can be cleanly shut down, though if you are certain that an EC2 instance is all you will ever need Terraform is likely to be overkill here vs. just using the EC2 API directly and retaining the instance id and IP address yourself in some application-specific store.
I'm working on an AWS-hosted web service that lets a user spin up a box, perform a job on it, and then spin the box back down. because this relies on exclusive usage of a GPU, it's not a standard containers + ELB problem -- the task needs to be the only thing running on that box, and when it finishes, I want to terminate the instance.
ideally, I'd like an "ip_address_of_new_box = api.provisionNewBoxInVPCAndRunContainer()" call. I could then put that IP address into my DB and a service would poll it until it finishes its task, at which time it calls "api.shutDownBox(ip_address_of_new_box)"
This assumes there's some orchestration script wrapping this process, using Terraform as the implementation of steps 1 and 3.