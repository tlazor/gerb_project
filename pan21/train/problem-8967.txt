I have a little pm script that run's user-defined scripts for each logged in user on suspend/hibernate, resume/thaw.  I've used this to kill or restart processes that don't behave well over suspend.  User's can create scripts in ~/.user-pm which are run in lexicographic order on suspend and reverse order on resume.  $1 has the pm operation name.
This is another indirect solution that doesn't involve flushing registered identities/keys from the agent, but would locking the ssh-agent be just as useful (ssh-add -x)? I am unsure how secure this method would be (certainly no where near as secure as removing keys from the agent), however I assume this feature was implemented to offer the kind of added security you are looking for in this situation.
If you add your key using the "-c" option to "ssh-add", it requires that you confirm every use.  This isn't as good as removing the key from your agent on suspend, if you also lock your screen it can have a similar effect, since the key use can't be confirmed until you login.
You might be able to have a user daemon listen for the status change over D-Bus. It looks like gnome-power-manager doesn't expose any signals for this, but you might be able to get something from hal or DeviceKit-power/upower.
In the past I accomplished this key removal by running a simple script that woke up every few seconds and looked for the program that locks the screen, and if it was found it would do the "ssh-add -D".  Then once it went away, it would invoke the "ssh-add -c" again to ask me for the password.  I ended up switching to just relying on confirmation and screen locking when I suspend or leave the keyboard.
You could simply add a user-script that calls "ssh-add -D" on suspend/hibernate.  (you'll have to look up the SSH_AUTH_SOCK somewhere, but I assume you'd need that for any solution).