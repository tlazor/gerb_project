This is not a security problem, per se - it was the correct user working with the staging database, and if there is work to be done on the production database, it would be him as well. I'd love to have a deployment officer to separate out those concerns, but the team isn't big enough for that.
Sure, you could find out what the password is, especially if you're a small team, by looking at the client application's configuration file.  That's the only place where the prod password should exist.  That ensures that you would have to make a deliberate effort to get the prod password.
The same approach can be used if you have two websites, or two servers, or two whole environments: one user account for development with no access (or at least no write access) to production, another user account for working on the production system(s).
I'd love to hear some advice in terms of practice, configuration and controls on how to prevent this.
Just recently, I had a developer accidentally try to restore a database to production, when he should have been restoring to a staging copy. It's easy to do, given that the db names are similar, i.e., CustomerName_Staging versus CustomerName_Production.
There is NEVER a reason for devs to have direct access to Prod - regardless of how small the organization/team is. Your "Dev" may also wear the "Stage" and "Prod" hats, but he needs to have different credentials and processes to hit different environments.
Developers shouldn't know the password to the production database.  The prod password should be random and not memorable â€” something like the result of keyboard mashing (Z^kC83N*(#$Hx).  Your dev password can be $YourDog'sName or correct horse battery staple or whatever.
Your permissions to all environments need to be different - and as annoying as things like things like UAC are, you need them: especially for PROD environments.
A quick and simple solution: use two different user accounts, one for your normal development work which has only access to the development database, and a different one for actually operating on the production database, with full access to it. This way, you will have to actively change the account you are using before you can make any change in production, which should be enough to prevent accidental mistakes.
Ideally, I'd have these on entirely separate boxes, but that is cost prohibitive, and, strictly speaking, it doesn't prevent the same thing from happening if the user connects to the wrong box.
This is the same approach as a sysadmin having a standard non-admin account for routine work (reading email, web surfing, tracking tickets, filing timesheets, writing documentation, etc.) and a distinct full-admin account to be used when actually operating on servers and/or Active Directory.
(As always, you should have point-in-time backups for your production database.  For example, with MySQL, archive the binary logs as incremental backups.  For PostgreSQL, archive the write-ahead logs.  That is your protection of last resort for any kind of disaster, self-inflicted or otherwise.)