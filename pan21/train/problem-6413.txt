Maybe you know about them. Not everyone likes them. However, I think your renderScript() method has a good example of where one would be acceptable. If you're not sure what they are google them, and try not to abuse them. Well abuse them so you learn how to use them, then go back and undo it all. Most people when they first learn about ternary operators use them too much and their code becomes illegible as a consequence. Just know that they are there to help not hinder, so use them only when they won't hinder your code, this means legibility too. Or just don't use them at all, many don't.
I know this is rather old, but I came across it while look through the unanswered pile and thought there were a few things I could add. Because it is so old and I'm unsure if you are still watching this, I won't go into a lot of detail. However, if you want me to, I will of course return and do a more thorough job. That being said...
Type hinting forces your methods to a strict set of rules. When you say your argument is going to be an array, it MUST be an array. The only time this is "ignored" is when you give it a default value, such as NULL. Should you ever pass that argument, with its default value, to another method that does not expect the default value, it will produce errors. Your _mergeSettings() method is such. It gets its argument from the methods that call it, which have those default NULL values, but _mergeSettings() does not expect a NULL default. So of course, should you ever neglect to pass anything to those parent methods, _mergeSettings() will throw so many errors your head will spin.
In your renderScript() method I would just use an include and save that HTML to a separate file. Or at the very least, drop the variable and just return the heredoc. The $markup variable is otherwise unused, so unnecessary.
I used : and endforeach; in the above example instead of {} because this is how this is usually done in HTML documents. However, in this instance, it probably would be better to use the latter. Whichever improves legibility, I used the other simply to show you.
There are a lot of ways to go about generating HTML with PHP. Most people don't like to mix them however. As usr pointed out, it looks odd, and can confuse some people, especially those unfamiliar with PHP. I think its much cleaner to include() HTML when possible, or, in the case that usr is speaking of, escape to PHP from HTML rather than from PHP to HTML. So in the renderButton() method, I would return the $dataAttributes array and use that in the HTML file where you call this class and then escape into PHP when needed.