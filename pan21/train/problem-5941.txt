Just make sure you setColor() back to Color.WHITE after drawing the player sprite or everything drawn after that will also be tinted.
To color your sprite simply use the Sprite#setColor(color) method. This will tint your sprite with the selected color. Make sure to have the parts of your sprite that you want to be colored to be completely white. That way the blending will tint them with 100% of the new color.
Regarding the shader option, it is possible to apply a shader to just a single sprite (sort of), but it would involve rendering the player sprite to an offscreen FrameBufferObject while applying the tinting shader and then compositing that back onto the main scene.
It seems that doing the pixmap conversion would be your best bet. Especially if your thinking of using alot of colors. Once you convert it back to a texture the colors are retained so you wouldnt need to continuously swap colors during your runtime. If you wanted to, you could even load separate textures for each color before the game starts to save processing time. Shaders could work, but as you said, it would be applied to everything on the screen. But if you were to use some shaders, they could change two colors through frame buffers and such, it would just be really heavy on your game. 
Another option is to create a black and white or grayscale version of the character spritesheet and then tint it using SpriteBatch.setColor() before rendering the character, based on the appropriate color for the currently equipped weapon.
To achieve this behaviour, you should definitely use a specific shader. If you apply the shader to your sprite batch before drawing your sprite and set it back to null, it will just apply to your sprite and not to the entire screen.
This option doesn't increase the overall size (like option 1) or memory/cpu usage (like option 2) of the app, and is significantly less complex than option 3 for someone who is learning.