My rewrite of this code uses no global variables, so clearly they are neither faster nor necessary.  Eliminating them allows your code to be more readable and maintainable, both of which are important characteristics of well-written code.  Global variables introduce messy linkages that are difficult to spot and error prone.
Note that now it takes the filename as a parameter and return true if the write was successful.  It is also const because it doesn't alter the underlying student data structure.
The filename is hardcoded right now (see next suggestion), but worse than that, it's done in five completely indpendent places.  Better would be to create a constant:
The only member function of student is writeto which is not a good function name and may as well be a static function by the way it's written.  Instead, I'd suggest something like this:
Instead of having a hardcoded filename, it might be nice to allow the user to control the name and location of the file.  For this, it would make sense to use a command line argument and then pass the filename to the functions as needed.
However, that's not legal C++.  You can't take the address of main nor call it.  It may seem to work with your compiler but it's explicitly not guaranteed by the standard and is undefined behavior meaning that the program might do anything and that it's not predictable.  If you need to repeat something, use a loop.
The name flowcontrol is not really helpful, since it does much more than simply reading -- all of the processing, including output, is done there.  Names like line are fine in context, but myfile is not such a good name.  Variable and function names should tell the reader why they exist, ideally without further comments necessary.  So instead of spacer() I'd probably name it print_empty_lines() for example.
Each of those is a separate call to operator<< but they don't need to be.  Another way to write that would be like this:
Putting using namespace std at the top of every program is a bad habit that you'd do well to avoid.  
Almost every single one of the routines is declared as returning void.  Something is wrong there.  For example, if addrecord fails for some reason such as invalid input data, it would be nice if the function returned a value indicating this fact.
This reduces the entire menu to a single call to operator<< because consecutive strings in C++ (and in C, for that matter) are automatically concatenated into a single string by the compiler.