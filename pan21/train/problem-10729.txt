Consider a game like, let's say, Minecraft. It doesn't load all its map at once (It would be impossible, it's infinite), so it divides it in chunks (16mx16mx256m map pieces), and loads the x chunks nearest to the player. The rest of the map remains unloaded until you get closer to it.
Thats a good approximation: Split the map into pieces, and only load the pieces near the player. This, however, will have one problem: Big objects far away (For example, mountains) will be invisible until player gets unrealistically close to them, unlike in real life.
So, for your particular problem. Without LOD, it's easy. Split the "big" heightmap into smaller heightmaps, and only load the nearest heightmaps to the player. With LOD it gets more difficult, as you should, for each little heightmap, store different levels of detail (one unit per cm at first for example, one unit per 10m, or even 100m, at the end), and load one or another of them depending to the distance to the player.
What we usually do in this case is divide the game-world into smaller zones and only render the zones around the player in full detail. Anything further away from the player is rendered in a much lower level of detail.
When it comes to heightmaps, you could solve this by having a low-res heightmap for the whole world where each pixel represents multiple meters while also having separate high-res heightmaps for all zones where a pixel is a few centimeters. So your 0.3m crater would be represented in the high-res heightmap of the zone it's in but not in the low-res heightmap used for the whole world.
LOD is the solution to that problem. The basis of LOD is, instead only loading the parts of the map you are closest, at full resolution, load a much bigger part of the map, but reduce its resolution proportionally to the distance to the player. This makes sense: The tiny details (Grass, little holes in terrain, etc.) are only visible when you are close to them in real life, so if you load them while the player is far away, he/she is not going to be able to see them anyways, so it is a enormous waste of resources. So, for near objects, you render the world as detailed as possible and, for far objects, you reduce the detail, as the player isn't capable of noticing it anyways. Reducing the resources used this way, you will be able to load a much higher map distance than using the last approximation.
Your problem lies in the fact that its almost impossible to load an entire 20x20 km map fully into memory. You mentioned LOD (I will talk about it later), but for now let's ignore it.
That means every detail of the terrain mesh will be lost (for example little crater with diameter 0.3unit). What i am missing? So is the heightmap even used in real games?
20_000x20_000units. Now if i can have max. resolution of heightmap 8192x8192, it means i will need to encode more than 2x2m in 1 PIXEL. 
Im new in game development. I read some papers about LOD and they were always using heightmaps. I got the basic idea what is LOD and what it solves, but yet i am still not sure i understand what i need to do.
Calculating a whole 20x20 km open world with enough detail for a decent-looking first-person perspective all at once is too much for even the strongest hardware.