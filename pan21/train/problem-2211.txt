For the person who wants to do a quick check that they downloaded the right thing and it wasn't corrupted in transit, publish (prominently) a single SHA256 hash that is easy to verify (e.g. of the thing they just downloaded).  There is an existing question that discusses this: https://stackoverflow.com/questions/8637340/how-to-code-sign-my-binaries-php-scripts .  For this, SHA256 is a perfectly fine hashing algorithm.
I would recommend against auto-scanning your own code.  If someone is going to modify the code, why would they keep the part that scans the code to detect the modification?  I'm not saying it isn't do-able (I don't know enough).  I'm saying it is likely to be an arms race, and that's only fun if you're in it for the race.
For real authentication of the code you generated, you might want to sign your code using a code signing certificate issued to you by a trusted certificate authority.  Note that this is much more complicated, significantly harder to verify for the user in this case (I don't think PHP is typically protected this way), and significantly more expensive. On the other hand, as long as you protect the private key for that certificate, it should be impossible for someone to successfully pass their work off as yours to an informed, paranoid user.
Note also that you can get a good fraction of the way towards solving the above problem (ensuring no undetected corruption of the content in transit) by simply using a valid HTTPS certificate on the web site you use to make your software available to the public and disabling HTTP on that site.