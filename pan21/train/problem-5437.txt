After a while, you should naturally feel the urge to "diverge" from your model, and start taking the game in your own direction. From there it's a downhill road of adding a feature there, fixing a bug here, and generally improving in small steps.
You may be tempted to write extra features into your code, avoid that.  You are prototyping to see what will work.
Looking at 2 days, 2 weeks, or worse, 2 months worth of tasks engages a fight or flight reaction.  Break it into small enough pieces that you can bite each one off sequentially without choking, and my guess is you'll know exactly which bite to start with, and which one to go after next.
Create something on paper, and by that I mean make a mock-up board and cut-out pieces.  Make rules and play your game on the paper mock-up.  Use that to break out your code design into feature sets and modules that you can work on.  This process will help your friend design the story and how the game works, too.
If the game is supposed to fit into an existing genre, or it is somehow similar to another game, simply try to make a crude, simple imitation of that game, or make a "typical" example of the genre. If you are not a good coder, follow a tutorial which will walk you through making a game similar to yours.
What does the game functionally need to do?  What frameworks do you need to make that work?  What are the elements that can be borrowed from existing frameworks, and what do you need to write yourself?
The basic idea is to have the long term vision based on your paper mock-up, and from that a series of short term goals to work on that get you to where you want to go a piece at a time and without the stress of "omg what do I do next?"
Don't plan it to death, but clearly define your requirements, and as soon as you can break the project into bite sized (30min-1hour) pieces, you're ready to start coding.
Before opening Xcode, it might help to just make paper cutouts, and run through all of the game interfaces and dialogs first.  This will give you some idea of what you need to create in Interface Builder.
Once you have a small piece up and running you should work iteratively and at each iteration get just one more feature running.  When something isn't playing well go back and changes features.  Keep iterating and changing.
Next, how do things interact?  What are the distinct styles of interaction required?  That should give you some idea how the controllers need to be divvied up, started and stopped.
If there is a certain concept that is somehow unique to your game, you might also start by building the simplest demonstration of that concept. There's also the option of simply building your game around that concept.