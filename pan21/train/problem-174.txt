We ran into a similar situation a year ago, when our trending graphs showed imminent problems. Our application turned out to be too CPU-heavy, and we were passing all requests for static assets through the application for various ACL checks even for public files, which lead to a high load. My research showed that while a threaded webserver like Nginx or Apache-worker would help limit memory use, it wouldn't help reduce CPU usage much for our PHP processes. We needed to simply reduce the number of dynamic requests.
In all regards Varnish has been great for us, since it works well and has taught us a lot about our application's behaviour. As you can tell, I highly recommend it.
You have to tell Varnish what to cache, either explicitely via it's VCL config language, implicitely by having your app send correct HTTP headers. Some things we had to change in our app were: reduced usage of sessions, to reduce need for cookies. Serious filtering of cookies in Varnish (for example: Varnish won't cache any request that contains any cookies, even cookies meant for the browser like Google Analytics). We cleaned up all our HTTP headers, which tell both Varnish and the webbrowser what to cache. We modified our CMS to send a call to Varnish to purge a URL from cache if the content is edited. Etc.
A quick solution would be to kick all static assets off your servers. Host them in a CDN, for example S3 with CloudFront, and the requests will never even hit your server.
Our solution was to install Varnish in front of Apache to cache static assets and cache dynamic content. A single Varnish instance with 1 Gig of RAM can handle thousands of requests for static files per second with very low CPU load. Varnish is by default very conservative in what it caches, since it doesn't know what's safe to cache, so don't expect an immediate improvement. It took some tweaking to our application to get good results, and you'll learn a lot about HTTP and your apps, but now we're serving about 80% of all requests from Varnish, for about 0.2% CPU usage. It's insanely efficient and has more than halved the load on our servers.
To answer your questions, you need to provide more information. You have to figure out where your bottleneck is, and why! Is it servers resources, like CPU or Memory or disk I/O. Where do you think things will break if the visitor count keeps increasing?
When you answer the where, you need to figure out the why. Is your system simply undersized for the task it's been given? Is your application efficient? Is communication between clients and server efficient, for example with proper Cache-Control headers, compressed transfers, few HTTP requests, etc.?