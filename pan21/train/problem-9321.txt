As noted before, phones are a bad server.  There isn't likely a case where X people are sitting around a table with phones connected to each other.  They are likely in various places, doing various things.  Phone signal strength varies greatly depending on a number of factors, but it is very likely that a phone will go to sleep or lose connection at some point.
Android does support push notifications.  These are useful to tell the phone that you have new updates, and then pull the appropriate data.  This is where your REST server comes into play.  The REST server gives you a central repository so that your game's data won't be lost.  I commonly use two different android devices.  Applications that sync my data between those devices are far more useful than those that do not.  
What is the point of these real time updates?  Real time on a mobile device is almost always bad.  Real time requires almost a constant connection, which usually means a constant flow of network data, which eats up both network bandwidth limits and also will drain the phones battery.  I suggest either using push notifications or polling at a reasonable rate (even better if this rate can be set by the user).
First, don't try to reinvent the wheel.  Take the idea of TCP or UDP and toss them out of the window.  You will likely want to use HTTP with Android's standard URL calls.