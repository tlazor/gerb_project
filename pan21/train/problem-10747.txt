From there, it follows that you don't want to design everything down to the tiniest detail in advance, because you know full well that half of it will change, and then you'll be dealing with a lot of wasted time. Do the minimum design needed to start making the core game. When that's done, iterate as needed, then repeat the process for each new feature.
If I'm working on another project in the meantime, I take my time, make a doodle to get an idea of what the prototype should look like (try not to get distracted by sketch art). Then I share it with friends, partly to see if they have any input, but mostly to make myself think of things that are not obvious right away (there are always tonnes of things, even for the smartest people thinking out the simplest ideas). After a couple hours like this, I'll jot down some key concepts that have to be in the architecture, literally ~20 words. Then I can build a prototype when I have time.
Having said that, I do spend most of my design time on the core gameplay and mechanics (how the main game will function), and that rarely changes much -- it gets tweaks and sometimes I pick up new ideas or drop old ideas; but nothing goes without a working prototype.
Though this is mainly due to having a long commute to work, and nothing else to do.  I would rather spend less time doing this, and more time programming, as fleshing out classes that are most likely going to change seems like overkill.
If the game idea is heavily based on some unusual gameplay concept, I prototype that right away from scratch, using a previous project as a template. 95% of the time this leads to realizing that it's not as fun as I imagined, and to make it fun would require more resources than it's worth.
On the technical side, anything should get at least a few minutes of thought before making the code real. But, you can always refactor later.
I'll flesh out most of the important classes, draw some mock-ups(drawings are usually horrible), do a description of the game. 
Working on small teams across small games (one-man teams on small casual games), I moved from "heavy design" to "quick design." I find iterative development (two weeks focused on a single goal, eg. core gameplay) helps flesh out the design, and gives you something to play, which means that you won't change your mind and invalidate 90% of what you designed which looked good "on paper" but not in-game.
Design documentation has an upkeep cost; as things change you have to go back and re-read and update any existing docs. As such, it should be a production goal to minimize the amount of maintainable documentation because that will maximize time spent actually building the game.