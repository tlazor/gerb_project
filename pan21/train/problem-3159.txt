Going against the grain of most answers, I am guessing that there are a lot of Component types . If there were more than say 20 types than I would either want to maintain
It's easy to see that everything is coming from component and I can read the conditions in a straight line: it has a sensor, it has an input unit, it is valid, and it is not suspended.  And that's exactly how I would read it going through the code the first time.  Someone who comes across this code in the future shouldn't have any trouble figuring out what is going on.
It also introduces another vector for producing bugs either in the creation of the function, or the function's maintenance in the future.  Again, the example is trivial, but it's easy to imagine cases that aren't trivial.
Readability is extremely important, particularly in large projects with many programmers involved with the same code. What you do, using local Boolean variables to clarify potentially complex conditions, is a very good way of improving readability that I try to imprint on my co-workers.
So, in my humble opinion: You have it right - I like how you do it, and you should take pride in writing readable code. But do not waste time on re-writing working code when a simple re-formatting is good enough.
One of my collegue told me politely, that it is not necessary, because people can read a little more complicated code. But I think, that someone who will read this ode after me, will have a easier task (despite the fact, that I make this function a little bit longer)
Having seen your other related post, I would also pair this with having a separate function for each category(x3ro suggested something like isCat24(), etc), and within that function following the format of the last example you gave(one condition per line, no locals created).
When I write my code, I do my best to write it in a very, extremely readable way. But sometimes I have an impression, that I write it too easy... Simple example:
And if I want to verify each set of conditions, I can just look up one function per category and see what they're doing.
Finally, you might want to consider making a function in Component called getCategory().  All of the logic shown uses one Component, and uses no information from anything outside of that Component.  It seems like it should be encapsulated by the Component class, and anyone who wants to know the category can call the getter for that information.
I'm going to throw my hat in the ring and say the format of the last example is the easiest for me to read(like your colleague says).  
With the local booleans, I have to verify that each boolean is coming from component and that the booleans created are the ones being used in the if(...).  In this example it's trivial to see that is the case, but in the case of multiple ifs, elses, or other logic in the function...it may not be so trivial.
That said, in your example, if I wrote that method from scratch, I would do it similarly to your first re-write. However, if I just happened upon the existing code, I would do just about exactly as your second re-write. It is good enough, and I do not really like to change other peoples code unless it is either incorrect, or directly violates the coding standard (which it incidentally does two-fold: The conditional line is too long, and our standard also tells us to place sub-conditions on separate lines).