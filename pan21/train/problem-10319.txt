I would say that it's the other way around: cutting Apache out of the mix will increase performance. You'd keep Apache around if you like some of the other modules Apache provides, or if you have some external reason to keep using Apache for your dynamic content.
Reverse proxying is slower and generally worse, however, some reasons to use it is to maintain (some) compatibility with .htaccess files (which you would have to write (and that isn't always practical) is you use a pure nginx setup) or if you require specific apache modules. (Some may argue that is you have these requirements, it is easier to just use apache.)
It should be fine to let Apache handle the rewrites, so long as you don't do anything to accesses of your static content. But make sure to have an exclude for .ht* in your nginx conf: don't want to accidentally serve those particular static files out to the general public.
I have recently move from Apache, to Nginx. While I do not claim to be an expert, I would recommend dropping Apache and using nginx with PHP-FPM, instead of reverse proxy. Using Nginx without Apache will give you a slight performance gain for non-static content and large performance gain for static content. Since Nginx does not use .htaccess files, this means you will have to configure Nginx to handle all your redirects ect. This may seem a little daunting at first, but once I learnt how to configure Nginx, I actually found it a lot simpler and easier than using .htaccess files. There are tools that automatically convert .htaccess rules to Nginx rules for you, but I would recommend learning to do it yourself instead. I found the tools did not convert accurately enough and used way too many if statements. See: If Is Evil.
If you can, go with the straight nginx+PHP-FPM setup. If you can't, while there may be some merits to reverse-proxying, think through the repercussions, especially if you are dependent on .htaccess files.