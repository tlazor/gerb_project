I'd say the most important thing to remember: DO NOT TRUST WHAT A USER SAYS.  Keep that in mind when answering the phone.. no matter what they say, you will still have to figure it out for yourself, because its ultimately your ass, not theirs, and they generally have no idea. Just because they can put together a buzzword laden paragraph to bamboozle your boss, doesn't mean they actually know what they just said.
I think you don't need to master sed (I kow I don't at least), I manage to get by with one of the greps (grep,egrep,zgrep,etc) easily. You have to know basic regular expression syntax, though.
You have to deal with people too, in our case, that means Manglement, Lusers, Contractors and Suppliers.. arg^n
You should know your way around the authentication system your using (PAM, LDAP). Where are your passwords stored? using what procedures? What applications use what authentication mechanisms?
Also get prepared for the worst: think what you would do if the whole datacenter would blackout due the power outage. How would you boot everything up after the electricity would again became available? What would you do if something would not start up? How would you restore backups? Or what would you do if someone alerted you about a cracker who just breached in to your servers? (This kind of things should be documented as a checklist, but good to have some kind of intuition, too)
You'll never know everything ahead of time. But you can know what you have to work with. The more tools you know about, the more you'll be able to use. If you know what the tool is, what it does, and where to find more information about it, then that's good enough to start with.
I think you should know basic commands to manipulate and/or monitor MTA (postfix or exim) and MDA (dovecot, cyrus, courier) if you maintain a mail server. Even if you don't run one you'll have to be able to run basic SMTP tests on a MTA, if only for local delivery issues.
As a sysadmin I consider myself being a digital doctor (or, depending on the day, sometimes a world-class brain surgeon). 
When something fails, you'll need to be able to immediately diagnose the problem and realize how to fix it.
Perl can be used to do command-line magic using the -e option. Using with -p, -n, and -i, you can quickly write simple filters to do really useful things. For example, say you need to find the IP address of everyone who accessed "/admin.php" in September:
Customer service skills knowing how to talk about what you need/want/have-to-do, getting information to other people, documentation, all are essential in Keeping your sysadmin job. 
So, you need to learn/memorize the basics (and also to some point the internals) of the servers and applications you administer. Let's say your company hosts a web site with the web root being served over NFS. Suddenly all the www nodes start alarming and site stops responding. What to suspect? Ah-ha! NFS server just went down and the failover clustering did not work for some reason, either.
Also, I recommend brushing up on using sed. Think of it as a way to apply regular expressions anywhere. http://www.grymoire.com/Unix/Sed.html
There are a few tools that will help you no matter what type of sysadmin work you're doing. Assuming you know the basics, like chmod, mount, etc., here are a few very helpful tools some admins don't understand well enough:
I'd say a solid understanding of shell scripting does wonders for making difficult things quick and easy. If you have to look up the syntax, then chances are you won't do it at all, so  knowing ahead of time is critical.
Knowing how to properly chain existing tools to do new things can be really helpful as well. Say you need to do the same as above, but also search inside subdirectories --
It's also useful to have some experience with perl. You may not need to write any serious programs with it, but it was designed to do a lot of the things that sed and awk do, only perhaps a little more flexibly. 
The examples given are all great Server related answers.. however.. System administration is never 100% computers.. I wish that it were!
Say you changed your telephone number and need to update all your web pages accordingly (and save a backup copy in case you mess up).
Get really familiar with the man pages. You don't have to memorize them, but you should know where to find what you're looking for. man pages are better than Google for looking up syntax details, since the pages installed on a given system reflect the various quirks or version-specific information that corresponds to the system your looking at. 
If you want to get your projects funded and used: No point trying to get a new server if you don't know how to ask for the money, if you don't have the figures/alternatives/DR plan/quotes/implementation plan etc.. Office politics are a B**CH, money is always: "Tight".. whatever that means.. it doesn't affect the execs company cars, but it will affect your site security & ability to standardise if you can't impress upon them your reasons.
If you use apache a lot, then I recommend learning the apache configuration syntax. If you use nginx instead, then learn that instead. But either way, you should know what both are and how they're different.
When everything works, you'll have plenty of time to improve your own skills and the systems you administer.
Note: I split it up into separate lines for readablity; if you leave the semicolons in, you can put it all in one line. Otherwise the semicolons aren't needed at the end of each line.
For example, let's say you have directory full of mysqldump ".sql" files, each representing a database that needs to be imported into the server. Do you import all 35 of them manually? If you are reasonably familiar with shell scripting, it's really quick an easy to just type one command and then go grab some coffee:
Another important aspect to learn is the base load of the servers you administer. Learn to memorize their average load, cpu usage, memory usage and stuff like that. OK, you don't have to actually memorize all that - graphs created with Cacti or net-snmp+mrtg can help a lot, but if your pager alarms about server X behaving strangely and at the same time helpdesk calls you telling about some other server or service going bonkers, you may be able to combine those two things and go to fix the thing before even looking at the logs, alarm history or graphs.
And, as mentioned by others, go on and script the things that should run (semi-)automatically. Learn and play with the shell/Perl, they truly are your best friends and can very often solve very complex problems with just couple of commands piped together.