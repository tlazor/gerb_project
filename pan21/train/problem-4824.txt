So as a conclusion, you should really learn how to use a game development framework as your design goals become more complex, and if C# is what you know, XNA would be the most obvious answer as to which you should be using.
If the character is less wide than one tile and is positioned around the center of the current tile, you simply check if there is a tile directly underneath it.
XNA is built using C# and is designed to be easily understood. The starter-project provided with the install gets a game window up and running with a SpriteBatch ready to go. You can get 2D sprites drawing in no time. There is some learning curve with the content pipeline, since it is part of the build procedure. Like most graphics frameworks, it is an immediate renderer, so every frame you have to tell XNA what sprites to draw and where to put them. XNA also abstracts out other parts of game development to make your life easier: audio, input (mouse/keyboard/gamepad), content management, etc.
If you are using a 2d-array to represent a tilemap, you can handle collision between the character and the wall this way:
"I'm getting caught in collision detection and how to make a character jump and how to make a character walk up a slope or steps..."
Seems like a bit of a loaded question.  I would use neither as they are both for windows applications, not particularly good for writing games.  Have you looked into the XNA framework?  It uses c# which you seem to want to use, but is actually meant for writing games.
I will start by answering the question about collision detection. This is implemented in a lot of existing frameworks.
Assuming the character starts in a collision free area and her feet are positioned in (x,y), you check which tile that is:
I would reiterate that neither WinForms nor WPF would be good, even for simple games. XNA is specifically made for this scenario.
WinForms has an immediate graphics mode so you will have to refresh and repaint the window every "frame." The trouble is that GDI painting isn't great for performance and you have to play games with double buffering to prevent flickering.
That being said, it's important to pick the right tools for the job. Since you mentioned Jump & Run mechanics and collision detection, then you probably could cook something up in WPF, creating your own game loop and drawing and whatnot, working with UI components instead of your own specialized classes. 
However, is that the smart thing to do when there is XNA? Definitely not, as specialized game development frameworks ease your work so much when creating games with somewhat higher technical or design demands.
Writing games with a WinForms or WPF UI is perfectly fine. There are thousands upon thousands of popular and enjoyable games that don't need or benefit from hardware support. Just think, if nothing else, of the classic Windows games Minesweeper, Solitaire, or Freecell. I could easily imagine those games being implemented today with Forms or WPF. In fact, being the casual games that they are, that might be even the preferred way to go for me.
How to make characters walk up and down a slope or a stairway entirely depends on how you model this slope and or stairway in the code. :) It also depends on the kinds of physics you would like to involve, is the steep slope, slippery? I think these questions could all find answer, however it would be simpler to ask them one at a time and have some base code to start with.
WPF uses retained graphics, which is somewhat easier on you. You can create all your shapes and images, give them to WPF and update them when need be. WPF will automatically redraw what needs redrawn and properly sort everything for you. It also has the benefit of hardware acceleration in some cases. You could potentially do some crazy stuff in WPF to achieve some fancy effects (tranformations, shaders, etc.). But while its great that WPF has this power, it is not meant for real-time graphics.
Why do you want to write it yourself? You could (if you want simple 2d graphics) use an existing framework for platformers and save a lot of time and energy.