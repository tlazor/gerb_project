Finally, this is the first of many steps in the move to universally native 64-bit apps. Presenting the folders differently keeps the distinction visible to developers and users alike, and 32-bit "Program Files (x86)" is the odd man out.
It's not just for human readability, there are many programmatic reasons to separate 32-bit apps from 64-bit. Consider the "Common Files" folder. If you have a 32-bit app and 64-bit app that use the Common Files folder for a file with the same name, you're going to hose whichever one was installed first. There are also differences in how Windows presents these folders to the apps themselves, though I'm not familiar enough with them to explain them well.
You mentioned the reason:  to distinguish 32-bit program files from 64-bit program files.  When you run a 32-bit program on a 64-bit Windows installation, Windows redirects folder requests from that program for %ProgramFiles% [C:\Program Files in the English language version] to the x86 alternative [C:\Program Files (x86)].  Because of this silent redirection, 64-bit and 32-bit programs can coexist without interfering with each other.  (For example, 64-bit Windows includes both 64-bit and 32-bit versions of Internet Explorer.)  Windows also performs similar redirections for its own files and for registry keys.