A friend had a physics-based game with online score board, and tried doing score validation by offline verification.
On the other hand, there is a competition going online in a deterministic single player game supposedly protected from cheating but player A again records her keyboard input until she loses, then she plays back her keyboard input and continues from the spot before she lost. She then repeats this process to allow her to basically save her state.  Can anyone tell she is cheating? Yes but it will require someone to check and compare different playthroughs, even then it would be hard.
The important message to take here is that replays can be used for cheat detection sometimes and not protection. Even so, it may be hard or impossible to detect some types of cheats. It also begs the question what is considered plain cheating and what would be taking full advantage of tools that most players may not consider.. 
Unfortunately, if you use floats anywhere, you won't be perfectly deterministic. Different CPUs may have different internal floating point precisions, which means that as long as a value is in a floating point register, it'll be calculated at a higher precision. This is generally a good thing, but once it gets popped back to memory, the additional precision is lost. Now, if two different CPUs have different precision, a thousand iterations later you will end up with subtly different values.
Generally I think the conclusion is that when you are working to detect or prevent cheats (like any other security related matter), whatever technique you are using, is being used on people and they may outsmart your or simply pick another way you haven't thought of to cheat the system. Human and especially cheaters, are very resourceful.
In a strategy game with keyboard shortcuts, player A creates some advanced keyboard macros that allow her to build up a base faster than any human player using ordinary controls. Is that cheating? Perhaps. But who can tell the difference? Perhaps a machine doing some statistics. Is the implementation here worth it?
Another thing that may be destructive in a game like you specifically described is if someone creates an AI bot that listens to the packets and computes an optimal decision based on the state of the game. This could be impossible to detect.
To make things worse, different optimization passes may cause your compiler to generate slightly different FPU code, which means that even on a single machine, two compilations of the same source (with small changes that may not even seem relevant to the calculation) may cause subtle differences.