In that tricky 3D situation, you probably want to have the first quad draw into a stencil buffer, to track which pixels it drew into on the screen, and then have the second draw disable its depth testing, and use that stencil buffer to clip which pixels it's allowed to draw into (so it doesn't draw on top of closer objects, with its depth testing disabled).
In the fragment shader, you can pick the color of both color, and alpha-blend them manually using X.  Something like this (not tested) :
Alternately, you can use glPolygonOffset() to force the second quad draw to pretend to be slightly closer to the camera, so that it doesn't fight with the first one.  This fix is simpler and easier, but is less predictable, as the parameters to glPolygonOffset() do not have standardised meanings, and may vary in their effect from platform to platform and from GPU to GPU.
Now, what you have to do is to unwrap your object to each texture.  So you must associate to each vertex two texture coordinates in your vertex shader.  Plus, you may wish to add a [0-1] value X to each vertex that tells how much of the first and second texture you wish to use.
The usual way to do it would be to draw the quad twice -- once using the first texture at full opacity, and then drawing the quad again using the second texture, but with vertex alpha set to fade out the second texture where you want the first one to show through.  
Because of this, when coding to OpenGL 1.3, people generally use other, 'hacky' ways to achieve a similar effect.
Now, if you're using 3D, then this gets tricky, as the two draws will exactly overlap each other in the depth buffer.  (If not, then ignore the rest of this answer)
I do not believe that this is directly possible using OpenGL 1.x.  If you're using OpenGL 1.3, you can use Texture Combiners to merge two textures together in various ways, and you can even specify different sets of texture coordinates for the two textures, but I do not believe it's possible to set different opacities for the different textures per vertex within a single draw.