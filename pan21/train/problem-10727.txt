Most likely the index is not used by queries because of its low cardinality. Such an index can be justified if it "covers" queries and prevents them from performing a key lookup from the clustered index, but if this is not the case, and assuming you look at a real load, there's a good chance the index can be removed.
I agree that caching such a huge index and if it is really not useful - is a waste of Buffer Pool and you might run into performance issues like more I/O's or excessive plan recompilations if the plan cache is too constrained.
Not really as maintaining an index - it costs you for modifications like insert, update and deletes as well as disk space. Also, low  cardinality indexes might be ignored by the Query Optimizer as it wont help generate an efficient query plan - its not just selective enough.Try to look into Filtered indexes.
SQL Server has some kind of LRU (least recently used) mechanism for dropping stuff from the buffer pool. The thing is, your index is used - it's being updated whenever the data is changed, and that's why it's still in the buffer pool.
It can be the case where the index from your perspective is not useful, but there might be queries that require that index or part of that Index.
In simple terms, SQL Server tends to rely on Buffer Pool to do its normal operations to avoid expensive disk I/O's. If you have enough RAM and have set up MAX Memory appropriately, then all the queries that are ran across your database will CACHE the objects that are required by your queries.
I have been looking at the memory usage of a server and noticed something odd when drilling into the details. One index is eating up ~15GB of the buffer pool. That happens to be the size of the entire index. A few more notes on this specific index: