When IP uses a MAC-based L2 for local transport, the L2 transport needs to be told the destination node. For this, the next hop IP address needs to be translated to a MAC address. With IPv4 this is ARP's function.
Note that when Ethernet was invented, IPv4 didn't even exist (outside the labs) and IPv6 was in the far future. It was up to IP to make use of the existing infrastructure and technology.
In the original Ethernet scheme (via electrial or logical bus), all nodes on the network physically received the L2 frame but everyone except for the destination dropped it. Today, switches use the L2 destination address for direct packet switching for efficiency. Effectively, they do the hubs' (or repeater's) job while omitting the extraneous copies.
I am sure you could hack up a TCP/IP stack to remove arp and use a single MAC address for everything and you could make it work on a local network with only hubs and no switches or routers. Why anyone would want to do such a think I have no idea.
Skipping ARP and subsequently L2 addressing would require the NIC to understand IP in order to drop unwanted packets (or the OS stack to deal with all that). Additionally, switches would also need to understand IP to work efficiently - IP is much more complex than Ethernet (which is why routers used to be a lot more expensive and less performant than switches), so your network concentrators would be more costly. (This probably isn't true today but it was for a very long time.)
Yes, you're missing the effectiveness of hardware (MAC based) filtering vs. software (IP address based) filtering.
Peter and Jaap are both right but more fundamentally, we use a layered model to ensure interoperability between vendors.  The MAC layer uses a MAC address, full-stop.  ARP allows us to discover those MAC addresses rather than entering them manually into a table.