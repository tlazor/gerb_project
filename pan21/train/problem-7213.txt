Removing nginx from the proxy role also had returned precious memory, because to reach one million persistent connections with only ONE server, is a tough job of tweaking configs, application, and tuning OS parameters. Keep in mind that it's only doable with a lot of RAM (around 1M websockets connections eats about 16GB of RAM, with node.js, I think using sock.js would be ideal for low-memory consumption, but for now, socket.io consumes that much).
Network Interface Card at 1Gbps was saturating at the beginning, and I was seeing a LOT of I/O wait from publish events to all clients.
Just to tell that I successfully built a node.js server with socket.io handling over 1 million persistent connections with a message payload average of 700 Bytes.
This link was my starting point to reach that volume of connections with node. Besides it being an Erlang app, all the OS tuning is pretty much application agnostic and should be of use by anyone who aims at a lot of persistent connections (websockets or long-polling).