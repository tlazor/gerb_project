Now zsh has multi line support, so when you consult this file you may well find that the lines end up being less clear than you originally hoped. Here is some of the output from the file I generated while testing this out:
In zsh's history file, all commands are logged from all terminal sessions. Is there any way to log in which terminal session a command was run (i.e., a unique identifier for this instance of the shell?).
If you run into problems doing this and you just really really want the old behaviour back then you can restore it with:
Now, once you have decided on how you want to identify the line, the next part is to actually replace the default behaviour with your new function. The default behaviour we are replacing is the accept-line function, and if we look at the zle documentation, you will see that accept-line is bound to ^J and ^M.
A possible use case for this would be to look at the history file and determine what was run before or after a given command, restricted to this precise session.
If you don't like this, then it is also possible to get a path that includes the process id of the shell (process ids can also be reused, but this is less likely to hamper you - process ids are used by all processes, while ttys are only terminals). This can be easily done thanks to the /proc/self symlink, which always points to the process folder for the process that looks at it. So to use the process folder, the above function would be:
However it is possible to log the commands to a separate file. You can change the action that is performed when you execute a line to include logging the current line, and then you can consult that file to get the information you desire.
Now $TTY is an identifier for your current shell, but it is not the only one you might use. $TTY is a path to a /dev/pts/NUMBER file. The only problem here is that this number is always the next number available, so if you close one terminal and open another then you will reuse the same tty number.