Does the assignment specifically mandate the explicit use of Windows threading APIs or should the code simply compile and run under Windows? In the case of the latter, the C++ standard library now provides cross-platform threading APIs which can be easier to use.
Regarding your choice of C++: you start out by showing us a class, but it is filled mostly with static methods/variables. This is not the way a class should be designed. You've probably written it this way because of the callback that needs to be passed into CreateThread. As CreateThread also accepts a payload, you can simply pass it a method/lambda that just casts the payload pointer into this and calls an instance method on the specific instance. 
Another design issue is that you create a class for the Reader, but then fill the main function with logic on how to perform the parsing. If you create classes, the main function's job would simply be to create an instance for each, tell them to start doing their jobs and wait for them to finish.
Finally, getting to the threading part. I noticed a Sleep being performed why holding a critical section. This isn't recommended. The Windows API provides events which can be used to do a much better job of signalling another thread that "it's your turn to work".