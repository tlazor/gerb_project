drivers and the kernel itself have a rather small memory footprint. in a modern system, the memory required to load the kernel should be negligible. if you are using an older system, its recommended you use an older OS so its expectations are commensurate with its capabilities.
No, an executable cannot call a driver, it calls a kernel API, which in turn calls code in the driver module. this is the case regardless of the mode of the driver.
A kernel driver is capable of doing great harm to a system, in almost undetectable ways, so all malware authors would love to have the capability to install them easily under a normal users privileges. This is why most OSs choose to protect kernel mode operations.
Just one "mode" of a driver for devices would be enough. I do not get why one needs two kinds of drivers when it's the same concept, isn't it? Can't a regular executable call a kernel driver, and can't that be enough? Too many programs use too much memory.
user mode drivers are an outgrowth of the realization that users do need to be able to isntall drivers for common devices like printers, usb disks, MP3 players, gamepads etc. these devices use common well understood interfaces, which can be constrained by the kernel to operate in a safe way only. 