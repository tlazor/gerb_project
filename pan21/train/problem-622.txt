You also didn't give us the setting of AuthorizedKeysFile in your sshd_config. Very much relevant, if your SSH server is looking for the file somewhere else than you put it.
What I find generally very useful in any such cases is to start sshd without letting it daemonize ("go into background and detach from the terminal"). Often the logs won't be overly helpful, in particular when you have a configuration error (which isn't the obvious case at least).
This method has helped me many many times in finding issues, be it authentication issues, performance issues or other types of issues. To get really verbose output to stdout, use $(which sshd) -Ddddp 10222 (note the added dd to increase verbosity). For more debugging goodness check man sshd.
But aside from the answers so far, there can be a multitude of reasons for this. The problem is that even though you tried, there is not enough information to make a sure guess what's wrong.
Apparently if the file permissions are right but the directory permissions are not the same kind of permissions error can crop up. 
NB: the $(which sshd) is the best method to satisfy sshd requirement of an absolute path. Otherwise you'll get the following error: sshd re-exec requires execution with an absolute path. The -p 10222 makes sshd listen on that alternative port, overriding the configuration file - this is so that it doesn't clash with potentially running sshd instances. Make sure to choose a free port here.
One more thing can be PAM restrictions (UsePAM in sshd_config). Ubuntu used to have that at some point. If the user account didn't have a password set (public key only authentication) it wouldn't be allowed in.
It would make sense to give us some more information about the settings in /etc/ssh/sshd_config, in particular StrictModes (grep StrictModes /etc/ssh/sshd_config). StrictModes is the setting that governs how sensitive sshd reacts to the file and folder permissions of each user's respective ~/.ssh and ~/.ssh/authorized_keys.
This will give you plenty of debug output that would otherwise not appear (without the -d) or end up in the logs if you're lucky.
I ran into this issue when i tried to login to an account that has no password, even though i use SSH key pair authentication and have password login turned off. The solution was to set a password using my root account: