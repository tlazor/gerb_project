I have a spawn manager written in c# which spawns my game object, i use screen.width, to set the maximum screen with and -screen.width to set the minimum screen width for the spawning, but my game object spawns way off the screen.
Or you can just compute your desired position in viewport space (from (0,0) in the bottom-left of the camera's view to (1,1) at the top-right) and convert it o a world space position with Camera.ViewportToWorldPoint(), passing your desired depth as the third coordinate. This will automatically handle both perspective and orthographic cameras.
In almost all scrolling-type games (whether 2D, 3D or anything else) when the game launches you have the difficult issue of what to do about different physical device aspect ratios. (Players on wider screens will "see enemies sooner" that players on narrower screens, so to speak.)  Whatever strategy you adopt to solve this difficult issue, the first step is always getting the screen width/height (at the position of your enemies, background, or whatever the case may be) and then adopting your approach to the problem.
(Footnote - generally, avoid using Unity's hokey "Camera.main"; of course, you'd have the specific camera in question in a variable somehow.)
For completeness, here's how you'd do it with a perspective camera that gets wider the further back in depth you go. For this we'll need an input depth value representing how far from the camera we want to spawn our objects, along the camera's forward vector.
I am using a portrait camera 2:3 instead of free aspect as my camera view, as i want my game to be in portrait mode
Multiplying that by the camera's width:height aspect ratio, camera.aspect, gives us our half-width in worldspace units.
When you're using an orthographic camera, camera.orthographicSize gives you the verical half-height of the camera in world units (the distance from the center of the view to the top).