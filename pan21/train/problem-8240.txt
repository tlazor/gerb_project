I may be taking your wording a bit too literally but in the event I am not, I would suggest that you do not represent your GUI elements with a series of Texture2D instances, but rather, a collection of Rectangle instances.  You could then wrap the Rectangle with something such as BaseWindow class, where each base window class holds both a rectangle and a texture, as well as other tidbits that you will need to manage the object.  This will allow you to have windows that are not the same size as your texture, so that you can employ a few tricks (such as a 1x1 pixel texture being stretched to entirety of the window to simply fill with a solid color).
I am working on a GUI in XNA 4.0 at the moment. (Before you point out that there are many GUIs already in existance, this is as much a learning exercise as a practical project). As you may know, controls and dialogs in Windows actually consist of a number of system-level windows. For instance, a dialog box may consist of a window for the whole dialog, a child window for the client area, another window (barely showing) for the frame, and so on. This makes detecting mouse hits and doing clipping relatively easy. I'd like to design my XNA GUI along the same lines, but using overlapping Textures instead of windows obviously.
My question (yes, there's actually a question in this drivel) is: am I at risk of adversely affecting game performance and/or running low in resources if I get too nuts with the creating of many small textures? I haven't been able to find much information on how resource-tight the XNA environment actually is. I grew up in the days of 64K ram so I'm used to obsessing about resources and optimization.
Well no, generally not. Only thing is that changing the texture state is somewhat slow. So using less textures can make the rendering of the GUI a whole lot faster (~a few milliseconds). But it won't impact anything outside of the GUI rendering code. We are talking about really tiny amounts of memory here and also tiny amount of indices. That wouldn't even have made a impact 10 years ago.
If you are loading up all of your textures via the ContentManager, then your chances of adversely affecting performance is minimal.  The reason being that the content manager class handles duplicate texture loading for you, by simply returning a reference to the original loaded texture, should you try to load the same texture all over again.  This makes it very easy for you, since you really don't have to worry about managing duplicate resources.