You could also solve this in Linux, but it requires shelling out a little cash to someone to buy what's called an SSH tunnel server. It's a remote proxy which you control which has (hopefully) a safer Internet connection than your day-to-day wireless voyages; you connect to it through an encrypted connection. It still depends on the rest of the Internet to be secure, but your immediate surroundings can be insecure. By setting up a ~/.ssh/authorized_keys file on that server you can get the tunnel to work without providing a password, though you might want to (or have to) set up a shell script to add this to firefox by default, as before. 
However, it is still an issue when, say, you're using someone else's WiFi connection. They can "hear" everything which you send which is not TLS, and you have no way of stopping them without, say, using a secure proxying scheme to get through. (Like Tor! ...whoops.) It's not just the wireless security which I'm talking about (though if they're not using proper encryption, your cookies might also be in danger from anyone who has a laptop in the same room as you).  It's the establishment itself. Perhaps your hotel desk clerk happens to be technologically savvy and wants to eavesdrop on Internet traffic at the hotel he works at; how do you stop him? 
Well, let me answer one part of your broader question first: how to do it. My immediate experience is on Linux, but you said that answers on any platform were welcome, so here goes. If you were on Linux, you could probably require root access to access your cookies in any way other than (in principle) deleting them. The general procedure would look like this:
Now let me explain why perhaps this is the wrong question. Gmail happens to have nice options that force you to only send your cookies over TLS/SSL (secured browsing connections). Most login-based services don't. This means that your cookies are in principle viewable to the entire Internet infrastructure. Surprisingly, that infrastructure has proven quite passive and generally will not attack you except perhaps to censor you, although there are parts of the Internet like Tor where this rule breaks completely.
Most modern OSes supports a security model called "Mandatory access control" which can easily achieve what you want, but knowledge required to correctly configure the access control policies are difficult to learn.
A simpler solution on Windows is to use a Host-based intrusion-detection system (HIDS) which is now included in many antivirus software. They will typically allow you to set rules for each application on which resources it can access. Just put your cookies folder in to the list of protected files (or private files, or whatever they are called in your A/V software) and only allow IE to access them. Some anti-virus product does not have protection again read access, in which case, you may have to fall back to creating a user just for accessing that application (IE).
The part that Linux does really well is in these sorts of extra options. I don't know much about Windows 7, but I would be somewhat surprised if it could do the same thing -- if it had a substitute-user system which could restrict the user which you substitute as based  on the executable name. (Notice that if I just give myself arbitrary permission to substitute as foxy, this will not stop a dedicated attacker; they will just substitute an arbitrary command to read out the cookies as foxy.