Solving problems, not only using the most intuitive way which often tends to be very slow, but thinking about a more complex and strategical approach, to get a given task done as fast as possible, this is a major part of computer science.
It can be helpful to try to make the analogy with the listener's own profession, as long as it doesn't backfire by derailing the conversation.
Dealing with (my) parents who are not particularly aware of computers or the difference between a server and a database, I believe I have a fairly simple answer for this question.
Computer science is in many ways equal to solving these problems, only that the problems are of a little more mathematical and logical manner.
I've found that starting off with an analogy helps a lot of the time. Friends and co-workers have reported similar results in my super unscientific poll. The one we use is along the lines of
It's highly mathematical, highly theoretical, and there are a lot of proofs involved, but when you study computer science, you are studying the deeper question in the nature of computation itself, and that's stuff that never gets dated.
In reality, you have to solve problems on your daily basis. It may be a time problem, like "how do I get these five tasks done it just 1 hour?" or "how can I stack these boxes so that they all fit into the cupboard?".
Programming is the actual act of applying the theory and manipulation of the machine. They often get mixed up because programming is such an integral part of CS but is, in fact, only a part of it.
I regularly have to explain what computer science is to parents, and I have lately settled into this explanation:
I'll attempt a self-answer here, based on hindsight and a few previous experiences where I went in knowing I wanted to do this.
One rather common problem of computer science is "how do I sort a list of numbers?". When a person is given this task, he or she will most likely pick out the lowest or highest number first, put it onto the sorted list and continue from the start until no numbers remain in the unsorted list. This is one solution for the sorting problem, and computer scientists often have to solve this task too. As you can imagine, like described above, it will take a relatively long time to sort all the numbers, as you will repeatedly look at all numbers to sort out the lowest / highest one. So one person once thought "how could I solve this problem faster?" and maybe created an algorithm to solve the task for example twice as fast as the original approach.
But there are some things that never change, because they're in the realms of mathematics, or they are fundamental organizing principles.  For instance, computer right now work in binary, 1s and 0s.  The properties of binary numbers themselves aren't going to change no matter what new technology comes around tomorrow.  We might create a computer that's not based on binary, but the properties of binary itself are fixed.  This is the realm of computer science.  Computer science is the foundational stuff that doesn't change.
The downside of this answer is that it doesn't get into the mathematical foundation of CS, or how CS is about unchanging fundamental concepts. But I'm beginning to think that's not a big problem... such topics might be beyond the scope of a five-minute intro for a complete layperson.
In my story above, I segued from this into the Halting Problem and efficiency. Looking back, I think that was too big of a jump, at least when presented as abstract concepts. I like the phone book example mentioned in Peter's answer. I think I'd modify it this way:
This explanation in some form has had a fairly positive response to me. Or, if you're particularly pressed for time: "Programming is part of computer science, but CS is a lot more focused on the understanding of how the computer works."
Computer science is the theory and study of how computers work, algorithms (in layman's terms, a process to solve a problem), and how to think like a computer in order to manipulate it to do what you/the client/whoever want.
Technology keeps changing all the time. You get used to the menus in Microsoft Word, and then they change it to the Ribbon. You learn to program buttons in Java using Applets, and then Applets get removed from every major browser as a security risk.