As to if you need them, the answer is - it depends. #if statements are often used for conditional compilation. For instance, you may have some code that only needs to compiled under certain circumstances. A common example is to use them to guard against repeat inclusions / definitions of code. Less commonly, you might have code that is dependant on certain hardware.
Without seeing the code (and possibly the environment), it's impossible to say whether or not you do or do not need them. You should know what they do. When I was doing C/C++ I rarely used them myself, but they were common in various libraries that I made used of.
Hey I was wandering I am needing some advice I am using #if expressions to execute my code and I was wandering if you have #if expressions is it really needing to use if statements in your c++ source code let me know thanks
In C & C++, preprocessor directives are lines of code that are preceded by a hash symbol (#). Unlike regular lines of code, these lines are not program statements; instead they are instructions (directives) for the preprocessor. The preprocessor executes before the compiler. It evaluates the code before compilation of code begins and resolves all preprocessor directives. After they have been processed, the compiler evaluates (including any changes that may have been made by the preprocessor) and proceeds to generate object code from the 'regular' program statements.