VMWare provides a whole bunch of projects and Vinko Vrsalovic already pointed out that VMWare ESX is indeed an own operating system.
VMware works, as a downloadable version, as a user-level program. It uses a virtual machine monitor to intercept real x86 instructions, and a device driver to execute concurrent execution of a guest OS with CPU virtualization implementation to get hardware-assisted virtualization in order to run guests through its VMM while still being on top of an OS and being a process or so. The same exact thing is with Virtualbox -- they are programs that normally do not run on bare metal (but could) and they themselves use a VMM and CPU VT from Intel and such to intercept x86 and "trick" the guest OS into thinking it's running the whole machine, and emulates support hardware that's usually not truly existing. In a way it's like emulating and not emulating mixed together. For example, it probably emulates BIOS/firmware since there's no virtualization methods for that. It probably also emulates older, legacy hardware that virtualized guest Windows 95/98 may need.
In simplicity, it's using CPU features that aid in virtualization processing to enable another OS to run on the same CPU through a complex monitoring/substituting emulation process while not having to truly be a bare metal OS.
It just depends on what type of VMWare program you run. Some run in the kernel, some run in user space.
Generally, it is possible to run virtual machine monitors (VMM) such as VMWare Workstation, QEmu, or Virtualbox completely in user space. They just take a disk or CDROM image of the OS to run and start emulating a PC by interpreting all instructions and emulating device accesses. For performance reasons, virtualization software however tries to avoid emulation as often as possible, because it is much faster to execute an instruction stream on the real hardware instead of emulating it.