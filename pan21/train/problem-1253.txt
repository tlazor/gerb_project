You can see that even this isn't a perfect abstraction because the verb is usually different. E.g. "Rock crushes Scissors", "Paper disproves Spock". Your list cannot encode this difference. It is already at the limit of what it can describe. Your comment mentions that the rules are a graph. It's probably overkill to model it as a graph but your rules should be first class citizens - not buried in some logic to decide who wins.
I appreciate that this was an example bit of code for an interview so you wouldn't want to spend too much time on it but you also need to show what you can do. If I see a candidate with code that is extensible, even if that extension hasn't been added, I'm going to think that they've thought it through before starting.
Software developers create abstractions - at some point, the code will be complicated but it's our job to encapsulate that and make it easier to understand. Remember: you will spend as much time reading code as you will writing it. 
Not everyone will be aware of the rules of Rock, Paper, Scissors, Lizard, Spock. How would you go about displaying some help text? Will you type it out by hand or resort to convoluted logic over the array values? Consider how you might fill in this code: