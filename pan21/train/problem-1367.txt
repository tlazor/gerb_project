This is solved in diffrent ways, some solve it by using #ifdefs, some solve it by branching And some solve it by having input values that updates per every object so you store an overall painting scheeme for the defualt shader.
and when it comes to scale of the game, itÂ´s actualy no way around this. You will need more shaders for diffrent materials and diffrent objects. I Usualy go with the "per material" shaders. which means that i have some common vertex shaders that i can plugin depending on what you are doing with the vertex. and then you have a specific material shader, like wood, metal, stone and water. i have found this to be quite efficent. you may endup with diffrent customshaders but thats just okay!
I now have a Vertex- and Fragmentshader, for the matrix calculations, and basic lighting. If I want to add a shading-effect for for example water blocks, what to do?
If your game starts to get huge, how on earth can you use 300 shader effects enabled for 1 voxel and disabled for the other?
I have clouds in my voxel-based world, and I want to give it a blue-ish tint with a shader. Do I create a new shader, disable the default shader, enable the cloud-shader, draw the cloud, disable the cloud shader and enable the default one again?