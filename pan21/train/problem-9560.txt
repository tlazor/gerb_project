I have a shopping site with 1m products, to be honest I have a lot of questions - most of them probably subjective, but this one I think fits.
Get your software ready to scale beyond single frontend server (shared sessions), beyond single database server (master-slave/multiple-master-slave setup) and beyond single static content server (CDN, sharding/syncing etc). Once you are sure this works you can start thinking about a load balancer and more complicated setup.
You still have plenty of space to grow with your single server setup: you can upgrade your current server, you can move database to a second one, you can move static content (images) to third server or offload it to CDN and so on. Performance-wise you'll need to get a hang of multiple database server setup way before you'll need a load balancer for your frontend. 
Given that, whats a good load balancer spec? We work with Hetzner, and they have particularly meaty specs. For 50 euros we can get a pretty meaty box. Is this overkill? Is there such a thing as overkill in this context?
You need a load balancer when you need more than one machine.  You need more than one machine when your capacity or availability requirements exceed what is possible (within your risk assessment parameters) of a single machine.
It's supposed to go beyond simple performance scaling - your setup should automatically redistribute load when one of the frontend servers goes down and on the backend be able to handle a database server crashing.
When is the right time to get a load balancer? We have 1 server at the moment, and are rampantly looking for growth. Anything could happen at any moment, so I ask - whens the right time? We have the resources to buy one now and plug it into our app server so if things do start to heat up, we can just plug another box in to the load balancer and be on our merry way.