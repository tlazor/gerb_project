As to the other part, it depends on what you want the world to look like.  You say cylindrical, but I suspect that you don't mean that the world is actually a cylinder.  However, if you do mean cylinder, or even sphere, then the best bet would be to generate the world as a flat plane and wrap it.  But since you mention 2D, I'll assume that you mean that maxX becomes minX and maxY becomes minY as you move across the edge.  In that case, so long as your terrain creation takes that into account (there's isn't a sudden cliff on the edge of one that prevents two-way movement across the border), then it also depends on your engine.  You could do this with trick cameras and some scripts that cover your boundaries, making sure it loads the chunk from the other side and "teleports" your character between coordinates, but the camera makes it look smooth.
For generating the terrain in chunks, you should look into... well, chunks.  An interesting example of that would be the McRegion format that was eventually pulled into Minecraft.  You can read a bit about it here:  https://bukkit.org/threads/is-it-worth-looking-at-the-mcregion-files.35713/
The image above is what we will be doing.  The idea is that you can cut this cylinder lengthwise at any point, and unroll it, and then use this as your map data.  This will effectively wrap your noise around on 1 axis.
If you convert this map data into a texture it would wrap on the x-axis and would look something like:
As mentioned in the comment, I figured what you required was wrappable noise.  With wrappable noise, you can generate seamless textures and game worlds.  You are probably familiar with generating 2D noise already.  
What you need to do is sample 3 dimensional noise instead.  Instead of sampling a rectangular shaped noise pattern, you are going to sample a cylindrical shaped pattern in 3D space.