This is an atypical configuration since it does not allow for any fault tolerance for writes (which is one of the key benefits of replica sets). A recommended approach would be configure all of your nodes as voting, use w:majority to require majority writes, and use read concern majority to ensure documents read are guaranteed not to roll back. The maxStalenessSeconds read preference can also be useful if you are concerned about reading from a secondary that has fallen too far behind.
Meanwhile it will be great if you could please share why you want your cluster to be read only even if only one member is down? It is simply loosing the high availability of your cluster. if you want just to make sure read is not dirty read I think w:majority will allow to read data which will not be roll backed.
However, if you want to ensure writes only succeed with all members available, you could consider one of the following approaches:
Split brain usually refers to a scenario where you have inconsistent data on both sides of a partition, for example with different writes accepted. The quorum requirement in MongoDB replication is designed to avoid that: a primary can only be elected (or sustained) in a partition that has a majority of configured voting members available. Any minority partitions will be increasingly stale, but will still have consistent history with a possibility of resuming sync when the network partition is resolved.
setting w:3 will require acknowledgement from all 3 members of your replica set however if anyone of them is not available, write will be done in the cache file of the primary and which may lead a disk full scenario if down time is large. I believe w:majority is the best approach with a Primary secondary secondary configuration.