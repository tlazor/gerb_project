That's a rather confused question. MySQL doesn't support file systems, that's the job of the operating system. In short, if the OS supports a particular file system and is itself supported by MySQL then MySQL will happily run on that file system. The DB engine used (MyISAM, Innodb, etc.) don't affect this at all.
Similarly 5.1's native partitioning feature only breaks the table up into multiple files, but they all still live in the datadir.
The difficult part is probably going to be figuring our how to logically partition the database so you don't quickly run into storage constraints in the future. 
One workaround I've done is placing the innodb datafiles on one device, and the datadir on another.  That has the effect of being a poor mans way of splitting your innodb and myisam tables across different storage.  But it does not help you in a one-giant-table situation.
Instead of adding storage in the ad-hoc manner you describe you should backtrack a bit and start with an actual plan. Work out how much storage space this DB will require and then set it up accordingly, using the RAID method most appropriate to the way the DB is used.
Realistically, if your DB is growing at this rate, I would probably be looking for a large SAN or other multi-TB storage system, to prevent having to upgrade for a long time. I wouldn't want to be manipulating that amount of data very often. Something in the 30 - 50Tb range would last a long time at your growth rate.
With MySQL 5.1+ you can partition across multiple disks. As long as the new storage appears as a logical drive, you should be able to use it for a partition.
i would shard that scary thing. otherwise you'll have really hard time taking backup of it and especially restoring or maybe adding an index/column.
If you expect this growth to continue indefinitely there's no way around it, you need to design an abstraction layer across multiple mysql servers.   If you think it will taper you can probably get away with a large DAS or entry level SAN.