You have to add them as peers (right click can do that - usually something like IP:PORT). I don't know if there is an API or scripting interface that allows it.
The closest I came to this is manually managing the torrent instances so they would connect to different client and different segments of the files.  Every now and then when a segment would get too popular and I couldn't prevent the machines from duplicating efforts I synced them.  This way I could dedicate most of the bandwidth to other peers.  When all the machines had all the parts, I would pick one machine to assemble the file and make the others peers and complete the file quickly.
So far I don't know of a distributed torrent team, but that would be killer, especially if you had geographically separated machines.
They might already be sharing their progress -- bittorrent works by each computer connecting to several other downloaders.  But the protocol doesn't provide any control over the other downloaders being connected to, so it's hit-or-miss as to whether they're downloading from each other or not.  
This is considered one of Bittorrent's flaws as a protocol; nearby nodes aren't weighted over distant nodes for purposes of choosing peers.  For the past couple of years I've seen press releases about new peer-to-peer protocols that are described as "bittorrent that prefers local connections", but offhand I don't know if any of these technologies were ever matured.
It would be nice if you could have distributed torrent clients working on a torrent like you would have distributed password cracking software.  The clients would divide up the work and coordinate progress.
But more importantly, your computers should just automatically discover each other through the tracker or DHT. This is probably a pointless exercise.
You might be able to do this through the web admin, once the computer have all picked it up and started. Even if they have been added, it won't likely maintain a constant connection regardless, just send/receive packets as needed. A more interesting question is how to do you get n computers to divide the download in roughly n parts (assuming all have plenty of upstream bandwidth available) and prioritize pieces to optimize your download (hint: you can't without writing your own torrent client to my knowledge).