Write a script that does all the stuff you need to do for the task, making sure users can't misuse it with "creative" input, and then give the user in question sudo rights for exactly that script and nothing else. 
I haven't tried this, but have you tried fakeroot? It's commonly used on Debian-based distributions to bootstrap the initial set of files needed for an install (or in the case of a 64-bit system, a chroot with 32-bit files). You didn't say what OS you're using, fakeroot might not work for you.
It's quite probable you could make something work by creating an image file with dd, then partitioning it with fdisk, then creating a second image file with dd, and formatting it directly (or using something like genext2fs), then dd'ing the second filesystem image into the first partitioned image file at the correct offset. . . however, that's going to be difficult and complicated.
I've seen this problem solved another way, use a virtual machine in the build system. In the VM you can be root without messing up the OS on your actual build machine, you can snapshot it so everytime it powers on it's at the same clean state. 
You could work around the problem by creating a template 'disk image' with the partitions at known byte offsets, then splice the real filesystems into that image using dd.