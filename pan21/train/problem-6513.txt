Obj formats are strange in particular because the positions, normals and texture coordinates are separated and each face can choose whatever index from each stream. When you refer to vertex count you think that the vertex positions and normals count is not the same and you can't really refer to the whole count. 
The number of vertices this teapot has is 3644. I know that Unity's Mesh class needs to replicate these vertices for each face shared by the same vertex. I tried this with a Cube imported from a .obj, and using Debug.Log() to print the number of vertexes I found out that there were 24 vertices in the mesh's vertex array.
The final objective for this is that I'm trying to modify an OBJ Importer script from Unity's Wiki, so that the number of vertices resulting from this script are the same as Unity's native importer. Reference: http://wiki.unity3d.com/index.php?title=ObjImporter
However, with the teapot the original file had 3644 vertices, so in Unity the vertex count should be 18960. Instead, when I print the length of the mesh's vertex array, it prints 3260 (even less than the original file). 
During loading all these three attributes must be merged together so one vertex position could end duplicated because the face associated to that vertex position is associated to two normals. This can happen in reverse also so most loaders have a step to optimize the obj but in case of your cube the optimization will not work since the cube has hard edges and each vertex has a different normal(or texture coordinate). This is why you counted 6 vertex positions but unity duplicated those positions resulting in 24 vertices.
To load a mesh you can duplicate positions/normals or texture coordinates so optimizing this is not something simple. It boils down to choosing the minimum number of duplicates from those three streams.