First, let's be clear: Intel's 64-bit architecture is actually AMDs 64-bit extensions to Intel's 32-bit architecture. That's the origin of the very technical term of x86_64. So are you asking about "Intel"-specific CPUs, or about the x86_64 architecture in general? Second, are you writing or editing the Wikipedia article on this entry? If so, we should avoid using Wikipedia to help find the answer :)
The x86_64 "long mode" of addressing allows for 2 MB pages, ie, 2^21 not only 4KB (2^12) pages, a difference of 2^9, so I get (from your calculations) 2^57. But that's more than the architecture currently allows, so it's still "only" 2^48. 
Why wouldn't the theoretical maximum virtual memory size be bounded by the 64-bit word-length of the address pointers? According to the wikipedia article, "AMD decided only the least 48-bits would be used". Future versions of the architecture allow this to be extended. So really, the "theoretical maximum" could be 2^64. So now we're talking about something less than theoretical. 
For physical memory, again from Wikipedia, "Current AMD64 implementations support a physical address space of up to 2^48 bytes of RAM". OK, but maybe there are other bounds imposed elsewhere. On the very low end, we have the motherboard manufacturer which typically set this based on the number of slots. Somehwere in the middle, we have the memory controller, which nowadays are actually integrated into the CPU (but not always, and not necessarily -- so again, how theoretical is this question). The memory controllers will also limit the address space or the number of possible chips they control.