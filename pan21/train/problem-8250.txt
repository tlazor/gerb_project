If you can't you will need to start debugging the application itself to determine how long and where it's spending time in execution.
Sounds like a job for Performance Counters. If you click on start -> Run -> Perfmon.msc then in the app that runs you can add all sorts of monitoring for different aspects of IIS and the system. It should be able to give you end to end answers for IIS requests, including how long they spent waiting to be processed and how long they processed for.
Some common APM tools that come to find and get you started with further research are Dynatrace, AppDynamics, New Relic and Lean Sentry
Do keep in mind that merely buying one of these tools will not solve anything for you. You'll have to engage an expert or learn the tool(s) well enough to collect actionable information but you will probably end up with a lot more detail that simply is not "visible" when you monitor from outside the application without any hooks/apis/etc that reveal some of what's going on under-the-hood.
If you have access to the developers that created this application, get them to write a small instrumentation package (non-blocking!) that allows you to pull this counter out of the application directly.
Quick and simple: Start your measurement directly on the very same server machine or (if you are afraid of load implications) in the very same network (usually a DMZ your web application server is located).
It sounds like you're looking for an Application Performance Management tool. There are several for .NET applications and depending on the tool and your budget, you can assess the performance of individual web requests, get transaction traces down to specific lines of code, catch application errors, correlate server subsystems performance (disk, CPU, memory), monitor the performance of dependencies (caching tiers/mechanisms, external web services, databases) and much, much more. 
You say the CPU is running at 30%. Is it a multi-core computer? If it's got 4 cores and your code isn't parallelised then you could be suffering from maxing out the processor even if it doesn't appear that way.
Since this is a windows machine, you can start with process monitor to get a high level idea of what happens during each request. Then you can move onto more robust debugging tools like windbg logger.exe.
However if you'd like to avoid measurement errors caused by different network speed, bandwidth, client side problems and so on start your gross response time measurement at your localhost (and mark results according to this) or increase the number of measurement points (clients), time frame of measurement and calculate an average amount (You can create your own JavaScript for this purpose or you can use existing tools e.g. Google Analytics).