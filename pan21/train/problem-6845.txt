Another advantage of having a graph for the roads is you can run A* on it if you want things like cars. 
The main thing to do would be keeping the graph up to date. For adding tiles, this is simple; when a new junction or connection is made, check and add any distances, and then update distances produced by the Dijkstra's algorithm if they are less than the current distance. 
This will give you a graph you can pathfind on. You can then use Dijkstra's algorithm to find the shortest distance back to the start for all nodes; any which have not had a distance set at the end are unconnected. 
Buildings and/or individual road tiles should store the nearest junction to them that they are connected to. Then, knowing which junctions are not connected, any of the buildings that are closest to those junctions can be flagged as not being connected. 
You should be using some form of Graph structure. Instead of every road storing information for every other road connected, it should only store the roads that directly connect to it. Or a better way would be to store only the junctions (nodes) and which other junctions connect to it (a dead end should count as a "junction", as should corners), as well as the number of tiles (or cost if you have different road types) between them.
When removing roads, flag the Dijkstra's algorithm to recalculate (probably after, say, X seconds after the last delete, in case they are doing large scale remodeling). 