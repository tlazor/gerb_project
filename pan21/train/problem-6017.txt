Firstly, I'm sure you're aware of this, but I'll state it just in case: your draw calls don't take their data from the buffers directly, rather, they refer to the enabled attribute arrays in the currently bound Vertex Array Object, or VAO. So, for every object you want to draw, you bind the associated VAO and GLSL program, and call the glDraw* function you need to draw your model. So, when you say
This is the same thing that you would do with modern, programmable OpenGL. Just don't call the glDraw* command related to your model, and it won't show!
Now, onto your question. We need to know more about the nature of your data in order to properly answer, but right off the bat, we can address a few issues:
Well, this is not a good idea at all. Even in immediate mode, using glBegin() and glEnd() and all those glVertex() calls between them is not recommended at all. You mention that the option of updating the buffer is CPU intensive, but it doesn't get more CPU intensive than glBegin() and glEnd() when it comes to OpenGL.
Without knowing more about your models, I will assume that your model's vertices will indeed need to change once per second, in which case you have a Dynamic VBO. In that case, you have no choice; you have to update the vertex buffer object. However, there are several practices you can adhere to to make this process more performant, and these are discussed here and here