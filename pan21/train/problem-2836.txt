Redis can be configured with a max memory limit. You could run two instances to control the size of the cache and the session storage independently if needed and it can be configured to use LRU for eviction when it is full.
I recommend considering switching to Redis for both your session storage and your cache storage. Reasons:
I have two web servers with a Magento instance on both. Each shares the same httpd.conf, php.ini and my.cnf, along with local.xml and config.xml magento configuration files.
If this works, then look into the code (app/code/core/Mage/Core/Model/Session/Abstract/Varien.php) to see whether Magento possibly overwrites the save_path. 
You should start debugging the issue by excluding Magento from the possible culprits. Ie. do regular PHP memcache sessions work?
I've successfully telneted from the this above machine to the memcache server onto port 11211 and I can connect to the memcache instance fine. I've also made sure each system has the correct extensions installed via php -m and diff'd the output of "php_info" (they are identical).
When I make a request to the magento instance that is NOT working w/memcache, I get the following error: 
I have another server that stores both the shared DB and shared Memcache instance. Both Magento web servers are able to successfully hit the DB instance, but only ONE of the Magento instances is working properly with memcache.
Also, are you absolutely sure your session handler is memcached? Doublecheck with the output from phpinfo() (under: registered session handlers). 
The phpredis extension supports a native session storage plugin but I have not tested it with Magento.
I realize the session_start() is having an issue connecting to the memcache instance, but I don't understand why?