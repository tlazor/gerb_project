I have some style notes about your script since the others covered the workings so well. The Python style guide PEP0008 is an invaluable resource for this. 
Now, for your docstring you seem to have taken on the javadocs style, which is not the Python way, not to mention you actually misused it anyway by mislabelling parameters, and leaving out information about them to put in a comment instead. Docstrings have their own PEP, but here's one suggestion:
About the name, knightFindPhoneNumbers is both verbose and the wrong naming convention for Python. Python uses snake_case, like knight_find_phone_numbers. The verbosity is a sign that the function is too specific, as pointed out you could make one function do both. find_phone_numbers is pretty good then, I prefer calculate_phone_numbers personally, as you're determining values, not just finding them.
...it's also unclear. with key representing the starting point and where they can go from there? You should write comments that can explain your code to someone who doesn't even know the brief, which this doesn't really do. I'd prefer it as:
Inline comments should be rare. They should only occur as brief comments that best fit on the same line instead of their own line. This isn't a great example:
I'm confused why you're testing if node on knight[start]. You realise that any non empty string will evaluate as True? Meaning this should always be True and I can't see why it would be False or what it would mean. It's either unnecessary code or it's actually a test I've misunderstood. 
Comments should have a space at the start, after the #. Lines should also try to be under 79 characters. You might think this adds lines, but really it encourages you to be more brief. As for what you're actually saying, it's more of a preamble than any explanation of the code or the problem. You begin saying "My approach", but you haven't said what you're approaching. If this is for the employers you send it in an email or explain it in conversation. Comments are for making the code's function clear, not describing your ideas about the way it's done. I'd rewrite this to be a brief explanation of the problem. Don't explain your approach, it's better to let the code do that with comments along the way to clarify more confusing parts.
Still on comments, I don't need to know about redundancies you've left out unless they're confusing me:
chessPlayer isn't a clear name either. It makes it sound like it's a game, when really you just want to get chess_piece. Also to check user input, it's good to use .lower() as well as strip so that you can make sure all the characters are lowercase, in case the user entered Knight or even KNIGHT.
Now, your second inline comment is worse because it's too long. Your big long comment wouldn't fit the requirement even on a line of it's own. Split it onto two lines, and take it out of the dictionary.
This is clearer, gives an indication of how to use the function and actually explains the context more.
The second one here is totally redundant as you just said it one line before, but that first line contains a lot of redundancy. len(path) == 7 says if the total number of length of path is 7 much more concisely than you, so you can leave it out. It is a good idea to have a much shorter inline comment here though:
I'll start with comments. You should make comments, clear, to the point and well readable. You have issues with your opening block:
Is this an error? Something that shouldn't be happening? It seems like it is, and if so then you should really mark it as an error with raise ValueError("Not a valid starting point."). Returning an empty list is confusing, especially in a recursive function where that might mean an incomplete number is raised. If returning the empty list is specific intentional behaviour, explain it with a comment. But if this is your error handling, you should actually raise an error.
You're mostly saying the same thing twice, but also the bishop wouldn't move from 5 to * or # anyway, it'd only move there from 8. I'd just remove both these comments though.
It is good to use an inline here, just to highlight abstractly what this means in a couple brief words.
It seems like it's supposed to be relevant to that particular row rather than the whole knight value. Put it on the line above. 