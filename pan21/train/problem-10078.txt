A sample for user exception would be that a transaction crashed due to a network transport layer error, never becouse the user entered 0 to withdrawal. If however you leave the UI layer and you're in the business layer and you're asked to payout a negative number then you should throw a "negative withdrawal exception" as the business layer has no way to ask for a user correction, it's the consuming code that should check for exception and work with the exception if one occurs. 
When working at NCR we used a logger that logged, depending the log level set all methods and parameter values. We had users cut money in half and glue the other half of the bill with fake/paper tricking a sensor with the sensors finding 50% of the bills validations and making a 200USD deposit from 100USD. Have paperclips or rubber bands on the bills etc.. Have a look at this link for what you need to support. ATM's have a proprietary dialect/ standard of the global standard so there is no generic api that you can implement, also the vendors like NCR, Diebold Nixdorf, etc. have different sensors for manipulation, money validation, cameras. then the cassettes that hold funds can be recyclers (they take and dispense the funds that where payed in) and some that can only pay out. you need to account how much money was taken out of the cassettes and send an alarm if a re-fill is needed, the sensors that keep track all do this a little different. 
If you should have one general try-catch block in the loop or dedicated ones must depend on what you want to do after an exception is thrown/caught in each case. In your code one single block should be sufficient, because you in all cases break the switch and reenter the outer while loop.
I don't think that entering "0" actually exit the program. It just goes to default in the switch statement and continues the outer while-loop.
Then, a side note, you never would like to present the user with a stacktrace, you can log it for sure but never the user. 
A try catch block is there to "Catch" a condition, some conditions you can solve yourself in code, some need to bobble up the stack to the user in form of a message, some end the application.