MySQL Cluster very rarely apply in a web accessible setup. This product is mostly available for data warehousing in dedicated cluster environment. 
Just to correct the point above, MySQL Cluster is commonly used in web applications for scaling write operations - auto-sharding coupled with multi-master replication gives very high write throughput, ie 2.5m writes per second on a cluster of 8 commodity Intel servers:
We're already using the most powerful box AWS has available, so realistically it's looking like a distributed system is possibly the way we should go. Dedicated hardware might be a possibility but it's a very long shot.
You could look into the concept of sharding. Allied with MySQL-Proxy and a carefully crafted LUA script, you could automatically re-write your SQL queries to split write to a cluster of MySQL system (careful about failure rate of AWS instances).
MySQL replication (master/slave, dual master, etc.) will not help if you're biased toward write. For replication to happen, a write must be 'forwarded/executed' on all systems... this will easily lower your global performance. Note: replication could be useful if you have table contention (lock on whole table), but if you are using innodb, I'd be surprise that this happens often. Also, the performance cost of having a slave could be mitigated by the time saved in a crisis/recovery scenario - but this isn't the question asked. 
While you say this is a long shot, dedicated hardware option should be carefuly studied. Most IAAS (such as AWS/EC2) environent are prepared for a very heavy bias toward read IO. On dedicated hardware, you could leverage SSD cache and/or storage tiering. You could also leverage dedicated SAN where I/O OPS capacity are tailored to your specific requirement. 
Would recommend taking a look at the MySQL Performance Guide (reg required) which discusses different sharding strategies: