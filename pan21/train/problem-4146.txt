Unfortunately, there are plenty of applications out there (particularly those of the "database agnostic" variety) that implement their own constraints rather than relying on the database to enforce relational integrity.  They have wildly divergent levels of success in ensuring that the data they produce is reasonable-- some do it quite well, others appear to create a mishmash of crud and call it data.  But all of them will create at least some invalid data.
Of course, things like constraints make a very nice schema and a gurantee that your data is consistent and entries point to real rows. DELETE/UPDATE constraints are also very nice addition but these things can be done with triggers (if supported).
Well, MySQL with MyISAM has no FK constraints and is still used on a very broad basis, so if you take good care of the data and proper exception handling from the app, you should be fine.
OLAP and data-warehousing require the de-normalization of tables. Hence, there may be a reason why your OLAP application does not have explicit constraints defined. 
When using modern ORM frameworks within your Business Logic Layer, many people ignore database level integrity checks even if the database supports them.  The main thing that I would look at within your design is the API layer level for data insertion/modification.  If you have full control of the data at some point above the database layer, checks within the DB might be redundant.  
To sum up, FK and their constraints should be part of a regular database but if these have a real high impact on performance, I think (!) you can leave them aside IF the application is able to insert and retrieve the data properly without corrputing the data.
What is the cost of data quality issues down the line from this system?  Do those costs outweigh the benefits of using this system over some other system that actually enforces referential integrity?
Given that, the question becomes how much the invalid data will cost you down the line to disentangle.  If you're trying to, say, track the sale of securities, any trade that doesn't tie back to a valid client is going to create a problem that has to be tracked down.  If you're trying to track hours on internal project, on the other hand, it's probably merely annoying if some hours worked by individuals don't tie back to a valid project.  If you're going to spend thousands of man hours cleaning up the data you've generated, a system that uses constraints is going to be vastly more cost effective.  If close enough is good enough, implementing your own constraints may well be sufficient.