If you have additional requirements, please describe further and I can likely offer you other alternatives.
There are advantages to abstracting the database with something like MySQL Proxy.  The main one being query manipulation without altering an application.  Nevertheless, high availability and redundancy solutions are often better tackled with other technology.
However, in order to keep everyone's scripts, Query Browser settings and anything else from changing when we switch from using on DB to another I'd like to have everyone connect to DEV_DB and then use something like MySQL Proxy running a lua script which knows the currently active DB is DEV_DB_A and routes queries to there.  If we restore a fresh version of the DB to DEV_DB_B or make some changes (e.g. partition a table) we can easily switch to DEV_DB_B by changing one Lua script instead of updating references everywhere.
Being new to Lua and MySQL Proxy I'm wondering if anyone else has approached the problem this way and how it worked.
I had hoped I might be able to symlink inside of the mysql data directory but that didn't work so it seems like MySQL Proxy is a reasonable approach.
Based on your description it sounds like you want to be able to move database equipment dynamically without application changes.  To accomplish this, it could be as simple as dedicating an IP alias (VIP) to your database.  MySQL doesn't bind to the interface, which enables IP relocation to be done transparently to MySQL and thus your application.