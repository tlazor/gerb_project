2) Create a temporary table, insert each of the values into the temporary table, and perform a JOIN on the two tables.
This seems like the best approach, however, I'm sure there is a far better approach I haven't thought of yet. I'd prefer to not have to create a temporary table and use one query to determine which integers are missing.
From a program, I have a large set of integers.  I'd like to see which of these integers are NOT in the above id_key column.
It sounds like the "large set of integers" is still considerably smaller than the table with "hundreds of thousands of integers".  With that supposition and unless there is a way in MySQL to use an array of your integers as a table in your SQL statement, your second option is probably the best.  It should do a full scan of the temp table and the index on the main table.  The primary benefit being that it only has to scan the index containing hundreds of thousands of integers one time and only has to send the client the results.  Your query could (but need not be) rewritten as the following: