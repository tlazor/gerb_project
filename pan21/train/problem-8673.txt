In the absence of instancing there are a few other ways you can optimize the data.  You know that the index array data is not going to change even if the vertex array data does, so the index array can become a static array.  The same can apply to texture coords (assuming that you don't have an atlas of particle textures) so they can be also shifted into a static VBO, which would - of course - need to be non-interleaved.  That effectively leaves position and colour as being the only dynamic per-vertex data that needs updating, with colour being the only attribute that is duplicated (and if you're using 4 unsigned bytes for colour then the duplication isn't so onerous).
None of this is perfect and you've correctly identified reasons to be unsure of it.  However, before you go ripping things apart it would pay to benchmark and see if using duplicate data actually is a problem.  This can fly in the face of instinct, but it's often the case that pulling tricks to reduce memory usage ends up having overall negative consequences for performance.  Accepting extra memory usage and accepting some duplication of data - even if it does seem instinctively "wrong" - can frequently turn out to be the most optimal approach.