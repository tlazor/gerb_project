Importantly the changes above allow you to logically separate out the concerns of the original method, now your validate function should be more streamlined:
3 - Separate out how you are creating your DbClassesDataContext into its own method, so should this need to be changed, it is changed in one place:
The ?? operator returns the value on the left side if it is not null. Otherwise, it returns the value on the right side.
1 - Refactor the method to return a boolean result.. the method shouldn't really care about how you report errors, it should care about returning a simple result... true, the password's match, false, they don't:
5 - Rename your data context type to something more applicable. I'm sure your app isn't called DbClasses? The naming of a type should be relevant, in terms of data contexts, you might want to name it after the database name.
Then, as mentionned above, there's always the String.IsNullOrEmpty or String.IsNullOrWhitespace if you want to make sure your string is not made up of only blanks.
4 - User compiled queries where possible. If you know you might be performing a query multiple times, there is little sense in having the query provider generate the sql each time, you might as well take advantage of the CompiledQuery type: