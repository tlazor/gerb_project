Declaring variables at the beginning of the block is an old C standard that you don't need in newer versions of C.  The modern standard (in C and most other languages) is to put variable declarations as close to first use as possible.  For number, you're pretty much there.  For power, it could be declared with the  initialization.  
This has been in the C standard for 20 years and a common non-standard extension since 1990. So you might want to question why you are writing programs in such old-fashioned ways. If your teacher/book says "it's ANSI-C" then note that // comments aren't allowed in that old standard either.
I changed from %d to %01d.  Now if you wanted to display, say, two digits at a time, you could change that to %02d and change BASE to 100.  It should zero pad the number so as to always print two digits.  Of course, it would print a single leading digit as two digits too.  That might be undesirable.  You might consider how you could fix that.  
So how to write this without access to pow() but just plain integers? The advantage of pow is that you can iterate digit per digit, starting at 10^n and go down towards 10^0. Without that option, you would rather iterate from least significant digit and upwards. And this in turn complicates printing, because we want to print the most significant digit first.
I prefer snake_case, particularly in C.  It relies less on the reader (who may not be a native English speaker) being able to recognize capital letters.  That said, camelCase is quite common.  Which to use is up to you so long as you do so consistently.  
I put the comment on a separate line so as to be more readable and to avoid side scroll (not so much here as in other examples).  
I also changed to a four column indent.  That is more common than two column in code.  The only place that I'd recommend two column is in markup languages like HTML and XML.  They don't have methods, so their indent increases with their complexity.  With code, if you are indenting so much that you are running out of space on the screen, that may be a sign that you should push code into separate functions or methods.  
The main issue is actually the use of the pow() function, which in turn requires the whole floating point library. Some compilers might be able to optimize it at compile-time, but I wouldn't count on it. On some systems like low-end microcontrollers, floating point isn't even an option.
You may not have gotten there yet, but when you get to recursion, you might try this problem again.  Recursion often helps when you need to reverse the natural order of output.  This is because you can display while returning from the recursion.  So rather than building the largest divisor first, you can incrementally increase the size of the divisor (or better yet, decrease the number, always using the same divisor).  
That's clearer in my opinion and does not require an explanatory comment.  We're counting the number of digits and storing the result in a variable.  We'll know what the variable is later, because we call it digit_count.  
This gets rid of pow and replaces it with a different function and then divides on each iteration.  
I prefer to always put the curly brackets on the same line as the code structure.  Either form is fine so long as you are consistent.  But you'll see both as you go, so might as well start recognizing them now.  
Overall the code looks good, but old style C. Standard C allows variable declarations inside function bodies, and also inside for loops:
This uses a constant BASE instead of the magic number 10.  This improves readability and makes the program easier to modify.  
The %= is just a shorter syntax.  Your original line and the revised one will do the exact same thing.  Assignment operators in C.  
This gets rid of your i variable which only tracked the number of iterations.  We can do that directly.  