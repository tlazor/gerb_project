Finally, the mother of all memory savings: chunking. If you're playing in a large open world, it makes no sense to load everything into memory at once. Especially on platforms like the Xbox 360 and the PS3, where memory is worth its weight in gold. So a solution could be to divide your level into chunks.
This is a topic of research that is increasingly becoming more important. The basic idea is: why render something that is drawn behind something else? However, the intricacies can become quite complicated.
When you turn a corner in an FPS game, the next section is loaded while the old one is thrown away. However, this affects the level design greatly and basically ensures corridors everywhere. There's also no silver bullet: what works for a game like Just Cause 2 doesn't work at all for a game like Fable 3.
A very simple approach to occlusion culling could be: "don't render anything that isn't in the camera's view frustum". Objects check if they're inside the camera's view frustum (the box that defines the camera's transformation of the world to the screen) and if they are, they're added to a list of objects to render.
When you look at the texture model, it looks amazing detailed with probably like a million triangles. But the truth is, it only has the polygons shown on the right! In this case, an artist used the following process:
The most common approach is to label certain objects as "occluders". The rendering then happens in stages:
Others have touched upon this, but it's very true. If you're going to render the same tree model hundreds of times, it makes no sense to load it into memory a hundred times. It's better to load it into memory once and render it at different positions. 
For any game, you should look at what's important to you. If you're on PC, you don't have to care about memory that much. Most gaming rigs these days will have at least 2 GB of memory and 1 GB of video memory. That's a lot of models and textures! Keep in mind that any optimization you make for memory will usually have a price for processing. If you compress your textures to PNG for example, your files will be smaller than BMP images, but they'll take longer to load.