Don't assume that students who have seen other programming languages will be bored. Creating phone apps is hard, so the ability to do that may be of interest to them. If they are extremely advanced, you can encourage them to contribute to App Inventor, which is open source.
I am 16, but first got exposed to block-coding at the age of 9. While I continued with more advanced forms and still make use of them (notably, LEGO Mindstorms), I grew out of block-coding very soon, and progressed to what one may call "real"-er programming languages.  
That said, I'm the head of the programming/computer club at my school and have noticed that students who were first exposed to scratch (A block-coding language developed by MIT which it taught at junior-middle school at my school) pick up "real" programming languages quickly, since all the basic concepts are already known to them.
Disclaimer: I was part of the App Inventor team and am co-author of a book about App Inventor. I have taught App Inventor at the college-level (to non-majors).
However, it is, indeed boring to those who have already had experiences with programming, and this is a problem to which you really should find a solution if you wish to move ahead with GUI-based programming languages in your curriculum.
Scratch and MIT App Inventor are very similar, and both are taught to my juniors at school, and students generally appear to enjoy these.
The main attraction of block-based programming languages is that they expose users to the fun aspects of programming (creativity and design) without requiring them to deal with the less fun aspects (such as syntax and obscure errors). This enables students who might have dropped out of an introductory C++ course to get a taste of programming, both to expand their understanding of the world around them (since they use programs every day) and to motivate some of them to learn text-based languages when they hit the limits of block-based languages.
While teaching my juniors JS or C++ I'll often compare a concept to its equivalent in Scratch. That said, the obvious disadvantage is that scratch is basic, and doesn't cover advanced concepts (return codes, arguments, etc.)