Apache isn't your problem; it'll handle large loads without any tweaking.  It's your apps (and probably your database).  Not much you can do about poor code in pre-packaged PHP applications, but it's rare that much work goes into the database tuning and schemas.  I'd be looking there first and foremost (log and optimise slow queries, tune database memory usage for workload and available memory, etc).
You really need to find out which part of the system is the bottleneck here. Try splitting the services off onto different pieces of hardware, or at least insert some profiling into the apps that are slow.
Tune the maximum number of fastcgi processes in apache.  Sounds like it's using too much memory (max processes * php memory limit), and dying as it swaps endlessly.  Don't confuse the number of apache processes/threads with the number of fastcgi/php processes.
At a random guess though, check your database is using indexes correctly - enable slow query logging, and see how many slow queries you're getting. It generally shouldn't be too many; too many slow queries can cause Apache to stall while waiting for the PHP processes to finish.
Under windows you best bet is to use IIS and fastCGI.  This allows you to recycle the CGI process and not have gobs of them running.  This is what might be killing performance.  The IIS team has a guide to installing fastCGI