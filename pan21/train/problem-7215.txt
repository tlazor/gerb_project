Generally the response to the the load balanced request will go straight to the gateway, not back to the load balancer.
Imagine a load-balancer facing the internet, dispatching requests to several worker-servers in a local network.
You can avoid single point of failure in load balancers by setting up a dual stack with VRRP so that if a single load balancer fails another will take over all of its traffic. VRRP uses a shared MAC address and IP address to accomplish seamless failover.
You can set up the loopback address of several servers to be the same (its called aliasing). This IP is known to the outside world. Requests come with this IP as the destination IP address. The load balancer can direct requests based on the load balancing criteria and direct the request to one of these servers.
So the load balancer is a SPOF for the inbound requests, but because the outbound request goes straight to the gateway, it can bypass that SPOF - although because the ACK would need to come back in through the load balancer, it is still kind of pointless.
Generally you would have two load balancers. Only one of them owns the public IP address at any given time, and they run a heartbeat between them. As soon as the live load balancer loses its heartbeat (i.e. crashes, goes offline, etc), then the 2nd load balancer takes over the IP address.
Is there a way for the worker-servers to respond directly on the original socket / connection / IP or do they have to respond to the load-balancer for it to forward the response (making it the SPOF)?
There are some load balancers that will transparently load balance by using destination NAT but the load balancer will still need to see the return traffic to NAT it back to the original IP that the client opened a connection to. If I open a connection to a load balancer at 10.10.10.10 and a server in the pool sends back a reply from its IP of 192.168.100.100 I'm going to drop that packet because I don't know who 192.168.100.100 is. I'm trying to talk to 10.10.10.10. 