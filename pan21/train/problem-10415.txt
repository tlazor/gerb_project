If you mean databases inside a SQL Server instance, then you can't do that with SQL Server 2005.  SQL Server 2008 introduced the Resource Governor, which sort of achieves what you're after, but not quite.  It can throttle memory and CPU, but not disk IO.
Segregating disk IO between instances gets even more complicated.  You can use storage multipathing to separate traffic between the instances if you're willing to put a lot of time into storage design and pathing.  You can assign one instance's data and log files to a particular array, and then only set up paths to that array through specific host bus adapters (HBAs).  If that doesn't make sense to you, then get your storage administrator involved, and if you don't have a SAN admin, then it's more work (and money) than you want to tackle.
If you mean different SQL Server instances on the same computer, then you can kinda do it.  Each instance has its own min and max memory settings.  In SQL Server Management Studio, right-click on the instance name in Object Explorer and click Properties.  From there you can set the min and max memory that each instance will take.  You can also set CPU affinity masks, which will let you pick which CPUs an instance can use.  If you had a 2-socket, quad-core server (8 total cores) you could assign one instance to two particular cores, and another instance to six cores.  Unfortunately, if one of the instances is idle, the other instance won't be able to take advantage of those idle cores.