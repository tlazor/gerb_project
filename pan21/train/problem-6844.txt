Even if you use Unity3D, only C++ skills and low-level understanding of principles and algorithms involved would allow you to use it to its full potential. This applies to other game engines too, by the way. 
And to do a really good job, to squeeze every last bit of performance out of your platform of choice, and cram as many state-of-the-art effects and algorithms as possible, you can't use anything but C/C++. With bits of assembler, probably. 
Let me note something here, though, as I often see a confusion among programming students.  "C++ skills" are not very useful in the long run.  What you should be seeking out are "programming skills" and "design skills."  If you understand programming language concepts and how a software system is put together, then language doesn't really matter.  I don't consider myself an amazing developer, but I can pick up a new language and produce useful code in a day or two, because I understand the fundamentals.
The core issue, from what I can see, is not C++ or Unity3D, but rather do you need a high-level solution or a low-level solution.
The good thing about Unity3D is that it still employs scripting languages which mirror real world development (C# or JavaScript). The OOP and software engineering concepts you learn (Singletons, facade, state machines, decorators, composition) can be applied in Unity3D. It helps to take care of the cookie-cutter processes such as resources management, scene graph, model loading, rendering, saving of scenes and etc. Even better, if there is a functionality you need which Unity3D don't provide, you can do DLL coding.
From a programming side of things, what you get from Unity is a firm grasp of component design (compared to rolling your own C++ engine, which is usually too heavy on the inheritance side), as well as a very quick and visual environment to try out game code.  You'll hopefully learn good design practices by using Unity, that you can take over to future C++ engines.  
Where does that leave C++? C++ is a language, and there are many programming concepts you do in C++ you can do in Unity3D, sans memory management or perhaps templates ( With Unity 3.2, the language specs have improved to cover closures, for example).
Yes, the feature set that Unity Pro gives you at the cost they charge is ridiculous, especially considering the fact that it's seat licenses instead of per-title licenses.
No, Unity3D in no way endangers C++ skills. In fact, knowing C++ is way more important for a game programmer.
Sure, it's fine to have a preference of one language over another.  Personally I prefer C# over C++.  But what language you use is really driven by the project requirements more so than anything else.  Developers can't really afford to be fanboys since you don't want to lock yourself out of a market because you happen to not like the tools or language for one reason or another. 
A low-level solution is one which you get dirty with the processes of handing input, managing memory or loading the models. A high-level solution is which you get one neat package, like Unity3D.
Unity3D is a really great tool for game development. I really like it myself, and would recommend it for almost any game, especially for small teams. But Unity3D itself is written in C++; and you have to know C++ (and also a bunch of other low-level stuff) to really understand how it works.
To me, whether to use Unity3D (or any other game engine) or C++ depends on the goals of your game and project.
So as I have stated, it's not really C++ vs. Unity3D. It is more of "C++ plus libraries/SDK or roll your own engine" vs. Unity3D. It depends on your goals and objectives. For high-end games or games where you need control over the rendering pipeline or input, you may want to use C++ plus an engine which allows you to mess under the hood. If not, I go with Unity3D as my default choice for 3D games.
However, knowledge with Unity3d is not under the hood experience, but it is a good place to start for learning the overall process of developing games. For instance, you probably will need a semester worth of studying to write a renderer and load a model in OpenGL, plus a basic scenegraph and input. You get that done in Unity3D in less than a day.
Besides, once you really learn a second language you can see that it's mostly just picking up new syntax and paradigms, and it really isn't that hard usually to add new tools to your tool belt.  Yes, you should learn and understand C++, but on a high level you need to understand good design first.
But on top of that, it's a really easy tool to use.  You're not spending as much time training artists and designers how to use the art pipeline.  It's easy to say "just drag in your textures and models and they're good to go.
Unity is growing in popularity in the industry, mostly in smaller companies.  However, it is an excellent teaching environment.  It is an important teaching tool, but not particularly common among mainstream companies.  It's okay that you don't prefer it.
On top of that, it's one of the very few tools that actually let's you do 3D in a browser with any kind of regularity.  They support pretty much every shader platform from fixed function to DX9+ as well as Mac and Windows.  That tech alone is invaluable if you want to target the growing "browser based game" market.  