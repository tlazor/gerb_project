That aside: Your primary concern about the change is that you currently use clustered indexes to basically sort your data in the most convenient order. And, that you currently save (a notable amount of) time because you don't put an ORDER BY on your queries, and rely on the clustered indexes to return the data in the correct order, because that's how it's stored. And, so far, that's working for you.
If the query doesn't use the index, you can use table hints to try to force it to and see if that performs better than the optimizer's best guess - however, overriding the optimizer's call one the best way to bring back your data is something that should be done with care, as it looks things in no matter how your data changes....
So, in purely practical terms, maybe the first thing to ask yourself is - is this a problem for you?
However, I also found one article that may provide a tip as to why ORDER BY LastName performs so poorly for you. At first glance, it may sound like it supports what you're doing now. It doesn't - it specifically mentions that a clustered index can help sort performance with an ORDER BY clause.
The results probably will depend on how you're doing the pagination. If that's ultimately built into the query (for SQL 2012 and later, the OFFSET/FETCH method gets rave reviews), then there's a good chance the optimizer will realize that it's going to be faster to find the right rows with the non-clustered index than with some other method, and will look up the remaining data on the 20-30 rows you actually want when it finds which ones they are.
While it's always best to resolve potential problems before they become actual problems, I'd guess that your DB is not a new one. If you're not expected significant growth, and everything is performing adequately today; you're not running into a situation where disk space is tight, and increasing it is costly; and, if you expect a redesign to cause problems with performance, consider if making a change is the best solution at this time.
You would also want to see the actual impact on your bulk updates. However, in most cases, the queries that the user has to wait for are more critical than the ones that happen off-hours, time-wise; if it those are not as fast, unless they force your normal nightly work to push out beyond its available windows, that's usually OK.
If there are other drivers to change, especially anything that would make a general refactoring effort make sense, then experimenting with alternatives is something that is a logical task, and should probably be done. However, if the only motivation for change is "doing it this way is bad", then (no matter how correct the statement may be), you risk investing a lot of time and effort in making a change that has no obvious visible benefit. Unless you're the boss on this, your boss is likely to think that's a bad idea.
Next step - if you really want to consider changing your clustered index to a narrower one, I'd try this out, and see how it performs for you (in your test system, of course). Change the clustered index (to UserId, I'll assume0, and add a non-clustered index with the definition of the current clustered one. Test the same query - the one where the ORDER BY matches the columns (and sort direction, that's important) of the new index. Now, see if your query performs well or not.
First, note that this could change. I haven't found an actual Microsoft page that says, "data returned from a table with a clustered index can be returned in something other than the clustered index order," but I have found multiple pages that explain that NOT using an ORDER BY means there's no guarantee of the order of your data, clustered index or not. Currently, the SQL Server engine happens to be optimizing its query in a way that happens to return he data in sorted order; changes to your data (a large influx of new data), your server (moving your DB to a server with more CPUs), or your maintenance routines (rebuilding the clustered index more or less frequently) could all result in a change to this behavior.
However, ORDER BY LastName doesn't match the ordering in your clustered index. I encourage you to try adding ORDER BY Is_Deleted, AccountID, LastName to your existing query. Since the ORDER BY matches the index, including it shouldn't impose a notable penalty on the query. I may be wrong - the optimizer may be recognizing that Is_Deleted and AccountID will be the same for all rows returned, and have used the index order in your past tests, but the best way to guarantee the use of an index is to make sure that you include all the columns, and that may be true here as well.