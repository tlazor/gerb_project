I wouldn't be the one to go in depth and explain a better structure, simply because of the fact that I wouldn't know the best practices since I am not quiet an "expert" in dealing with product variants and such, but one thing I do know quite well is how Magento lays out their product variant tables. If you wanted to base your structure off of Magento's that would probably be a smart idea since theirs is tried and proven and it would provide you an easy backbone, and allow you to explore and customize it to your needs. Check this out:
Their database structure is far too complex to go on about in this answer, but if you want to learn more I suggest installing it and taking a look at it, maybe create a couple products to see how the relationships work too. 
The way their database is setup is they have a product entity table where all the actual products reside, in there they have a couple columns like the name or SKU.
Agreeing with the others, it wouldn't be the best to have a separate table with your SKU's/Quantities. You'd wanna add a field or something in the product table with the unique sku, and with each product variation the SKU would have a modifier added on to it, or something along those lines.
Then from there they gave a couple of attribute tables. These are separated by datatypes, varchar, int, decimal, etc... in these tables is where all the attributes for a product reside, like sizes, colors, images, etc. They actually have a list of all the attributes in an eav_attribute table. They also have separate attribute type tables that show available attributes for products or categories also.