Using an if statement and then a switch with the same condition is redundant. Remove the if statement. Since you don't have an else statement to go with it, then there is no need to do anything else. If you decide later to add an else statement, you can just add a FALSE or default case to your switch statement. It will accomplish the same thing.
Now, all that being said, I don't really understand your need for this convoluted workaround. It seems like you should be able to accomplish the same thing, minus the headache and potential security risks, by simply using pure PHP. For example, you could pass that IP address to your page via an AJAX or normal GET request and have that page get the contents of the address and return it. There doesn't seem to be any need for the abstractness of variable-variables, exec(), and eval(). This just seems overly complicated, but maybe I'm missing something.
Your code is violating a few different principles here. Key among them are: "Don't Repeat Yourself" (DRY) and the Arrow Anti-Pattern. The first should be rather self explanatory: Your code shouldn't repeat. Creating additional functions to handle repetition or similar tasks will help out with this. The second principle is about heavy and unnecessary indentation. Your code is quite heavily indented when it needn't be. Removing that if statement I suggested earlier will help with this, as will creating additional functions.
In the above code block I'm telling PHP that I want to call file_get_contents. In order to do that I need to define an options array named $opts that is passed to stream_context_create. The returned results from stream_context_create are then to be stored in a variable named $contents. We then store the returned results from file_get_contents into a variable named $contents. Finally we convert the returned data from file_get_contents into the variable $html.
A purely aesthetic change would be to remove all of those internal comments. If your code is self-documenting, your variables clear and understandable, and you are following core principles, then your code should be able to speak for itself. Anything else should be limited to doccomments. All these internal comments do is add clutter.
To provide a bit of context related to how the backend is used here is a JSON block that is sent to the server as it exists in JavaScript:
And then you should sanitize it before attempting to use it. Any user information, or possible user information (POST, GET, COOKIES, etc...), should always be sanitized. Of course you could do it all at once with filter_input() if you really wanted. This will make that ternary unnecessary. filter_input() automatically returns a FALSE value if the requested element doesn't exist.
So far I have some configuration variables which control the security, allowing us to work in a blacklist or whitelist mode. 
The first, and most crucial, bit of advice, especially if you are worried about security, is not to turn off your error reporting. Instead you should turn it on all the way. While developing it is essential to know where your errors are and to fix them. This will help fill in those security holes as well as make your application more efficient. After development is done you still do not turn off error reporting, you hide it. Log those errors, that way if anything happens that shouldn't you will be able to recreate the scenario with your logs and remove the problems.
Your parse_type() function is recreating a function that already exists in PHP. You can just use gettype() to accomplish the same thing.
I'm looking for constructive advice related to creating code that will allow me to detect things like infinite loops and race conditions as well as anything else I haven't thought of related to security.
Now, I believe it was in version 5.3 that PHP began allowing you to use short ternary. So if your version is 5.3 or higher you can shorten that ternary like so:
This is the backend to my jquery.php plugin which handles requests to make function calls and execute PHP code that is sent in various forms. After requests are processed they're sent back to the client side as a JSON object with a type flag set so JavaScript can convert the returned data to the correct type for the user.
However, this really isn't all that helpful here because you have not verified that that element exists. You are relying on your error reporting level to ignore the errors this is generating. Instead, your ternary should look like this:
Variable-variables are usually considered a security risk, but, as it stands, I don't think they can be avoided. I will point out however, that the curly braces around the entity variable is unnecessary. So, unless it helps with clarity, you can remove them. But that's up to you. There really isn't a standard when it comes to variable-variables because they themselves aren't standard.