Personally, I think the most interesting application of topology was the work done by Herlihy and Shavit. They used algebraic topology to characterize asynchronous distributed computation and gave new proofs of important known results and knocked out a number of long-standing open problems. They won the 2004 Godel prize for that work.
Theories to understand concurrency and modeling concurrent computations are best understood topologically. Apart from the famous work by Herlihy and Shavit on the topological structure of async computability mentioned in an earlier answer- Eric goubault has done work on Modeling concurrency with geometry and Pratt's work on applications of Chu spaces for concurrency at the Stanford Concurrency group is also interesting although i am not familiar with their work.
Topology is such a mature discipline with varied subfields including geometric, algebraic, metric, point-set and (the self deprecating) pointless topology. Computer science is also fairly broad and has many mathematical sub-areas, so I would expect much applications of topological ideas in CS. Marshall Stone said "always topologize," and computer scientists with the requisite background often have. Enough blah. A few examples.
These examples are not just of hard CS problems solved by topology. Sometimes a topological notion transfers very well into a CS setting or gives the basis for a sub area of CS.
Don't forget the Kneser conjecture and the Kahn/Saks/Sturtevant proof for the Aandera-Rosenberg-Karp conjecture. 