If you needed to redirect to a set of hostnames that weren't sequentially numbered, the solution would be similar, but you'd use http-request set-var to store the random number in a transaction variable, then a series of redirect statements, one for each host, each of which with its own anonymous ACL that would evaluate the random value for equality to the integer matching that host, and redirect if the variable contained that value.
I agree with the commenter, this seems like an unusual application, but nevertheless, HAProxy comes through.
{ req.hdr(host) -m str example.com } is an anonmyous ACL that enables the redirect if it matches the current request.  The location is using the rand(n) sample fetch, which generates a random number between 0 and n-1; it's followed by (passes its value to) the add(x) converter, which adds x to the value -- in this case, we take possible values from 0 through (4 - 1) inclusive and add 1, so that the %[rand(4),add(1)] expression evaluates to a number between 1 and 4 inclusive, which is implicitly cast to a string.  We concatentate http://external- with this integer, a dot, the incoming host header %[req.hdr(host)] and the url %[url], which includes the path and query string.
The rand() fetch is not a random number generator of cryptographic quality, but certainly seems sufficient for this use case.
Let's say I want example.com to redirect to one of four servers, external-1.example.com through external-4.example.com.
I've created a hosts file entry on my test proxy so that example.com actually points to 127.0.0.1 so the tests, below, are actual responses from the proxy.