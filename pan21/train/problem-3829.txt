An option that would allow you use the existing ports is to add an additional IP address.  This only works if you can specify the IP address the application will bind to.  If you need a DNS entry for one or both applications, consider using a service name for one or both applications.
You are generally free to use any port for any purpose.  Using standard ports makes it much easier to find the ports for an application or to guess what protocol would be appropriate to use to communicate on the port.  This is generally the best option, but in cases like yours at least one application needs to move.
We have a Spring Boot application, which we control, running on given development and production machines. We use "standard" port numbers such as 8080 (Tomcat), 8686 (JMX) and the like. We don't really have a full-blown application server like Wildfly or Glassfish.
My idea is to increase every used port number by 10000, leaving us with 18080 (Tomcat), 18686 (JMX), 15601 (Hazelcast) and so on. If I do this, will I be taking the right approach? Can I face any "problems" for increasing these port numbers (some other clashes with OS random ports, etc)?
Using a simple transformation such as you are suggesting works well. Other simple transformations when you have a variety of ports like this is to add a number such as 1, 10, 100, or 1000 to the port number.  Smaller numbers tend to risk hitting nearby ports.  1 doesn't work with applications that use consecutive ports.  
Now the time has come for us to integrate some "legacy" code into our app, and it needs to run inside an application server (Glassfish). Of course, now we've got port clashes on 8080 and 8686 (at least). We can't really change these port numbers on Glassfish (don't ask, don't tell).
On most systems you will be well under the ephemeral port range.  These are used for outbound connections, so they shouldn't cause an issue.  