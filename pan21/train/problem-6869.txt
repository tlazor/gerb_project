Now the order of Integer_Ids will match the order of Guids. You can drop the Guid column and add a clustered index on the new Integer column and the physical order of records was preserved.
A clustered index, by definition, determines the physical order of the data, so when you create the new clustered index, the data will be re-ordered; if it's a large table, plan for that to take a while.
I'd like to drop that primary key and add a new unique integer primary key to the table.  My question is this: when I drop the index, modify the column from uniqueidentifier to int, and add the new clustered unique primary key to the modified column, will the new PK values be in the order of insertion into the table, or will they be in some other order?  Is this the right way to go here?  Will this work?  (I'm kind of a noobkin with regard to table creation/modification.)
If you want to preserve the existing order then all you have to do is assign the new integer ids properly:
When you drop a clustered index the table becomes a heap. Since heaps have a very different physical structure from indexes, the data will have to be copied into the new structure. Heaps have no order whatsoever. When you add back a new clustered index, the data will be copied from the heap into the new index, and the order will be defined by the new clustered key.
In SQL Server, I'm looking at TableA, which currently has a uniqueidentifier clustered primary key.  The GUID has no meaning in any context.