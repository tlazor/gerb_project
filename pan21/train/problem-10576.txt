The next part is the functions that I use to generate primes (trial division), and check if two primes form a pair. I test primality of concatenated strings with a Miller-Rabin test that I won't show.
Let's start with my Node implementation. I restrict myself to using the stl and not boost for Project Euler because I think I learn more that way. It's probably necessary to include this for you to understand the rest of the program. I would like some advice on how to improve it in case I use it again.
The basic idea of my solution is that the set of primes with this relation can be represented as an undirected graph. A "prime pair set" is a clique within this graph (A clique is a fully connected subgraph). I determine if a node is part of a clique recursively each time I add one to the graph.
where primes is the (infinite) list of primes and adjacent p returns all of primes less than p which can be combined with p.
I have implemented a solution to Project Euler problem #60. In summary, the problem asks to find the smallest sum of a set of five prime numbers such that the decimal strings of any two numbers in the set concatenated together form the decimal string of a prime.
I'd like some comments on the structure and style of my program and advice on improving its performance. I'm pretty new to OOP style, so advice on how I can use OO patterns to make the code better is desired too.