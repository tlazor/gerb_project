I don't know about your game specifically, but for an example, create an abstract class interface with a methods such as
Users are generally surprisingly forgiving about bad input controls in niche games (e.g. JRPGs by independent developers), but better input control is still a plus if you want to sell more.
*When thinking of how to make your game touch, gamepad and mouse friendly, you may find that there doesn't actually exist a good solution. Such cases are quite common (real time strategy games are rarely cross platform). In those cases the usual solution is to only release on devices that support the form of input your game requires.
PC users expect that they'll have a mouse to play your game. If you don't use it, your game risks to be labeled as a "poor mobile port", specially if some actions in the game should be more naturally accomplished with a mouse.
I suggest you exploit as much as possible the target device's input features as possible to please both mobile and PC users. 
Also, keep in mind that some PC users will also expect that there will be more that the basic gameplay done with the keyboard. 
If you look at most first person games, the mouse is used only for looking around. When ported to console, analogue sticks and buttons are used and on mobile, swiping is used to look with as few as possible other controls are buttons on screen. For a good comparison, look at videos of the different releases of Minecraft.   
Yes you should.  However, I would develop against an abstract input class or interface, and then implement the various ways the user can interact with it against this, depending on the hardware type.
To your question though, the most important thing to consider when developing on PC for multi-platform is that you have a much larger wealth of buttons at your disposal than on other platforms. So provided you l your number of buttons needed minimal and (for the benefit PC) ensure that one hand Chan be kept on the mouse and one the keyboard, then t a be no problem print a games controls to other platforms.
If you are on a very tight budget and do not directly profit from sales (e.g. a charity fund paying you a fixed amount of hours to develop education software), it's sensible to stick to one single input method done well - doing multiple input methods well takes considerable amounts of time.
If you want to sell your game at a reasonable price ($20+) and aim to reach a reasonably large number of buyers (50'000+), you absolutely should keep in mind* the different requirements of mouse, keyboard, touchscreen, and gamepad devices from the beginning. There's no way to simply "retrofit" gamepad input on a mouse/keyboard game or vice versa.
For games where the interactions are in 2d space. Then using mouse interactions as you described can be possible; but the most important thing to consider is how often you have to move your hands from the keyboard to the mouse and back. On mobile you have no choice because all the buttons you may want to use have to be on screen. Though you can consider having buttons which only show up when needed on mobile, for example: when you approach an item a button can show up on screen only while the possibility to pick it up remains. In 2D games, point a x works well on PC and on mobile but can be a bit clunky on console due to the fact that analogue sticks may be used.
Then in your game, create the concrete class based on the hardware type.  This will make your code cleaner, and you can easily cater for different platforms.