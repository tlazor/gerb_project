Notice that if you're on a VM, you cannot know anything about the actual hardware (CPU, etc), all you know is what the VM tells you. So, for example, if your physical machine has 1 Quad core CPU, and your VM is configured to report 2 single core CPUs, you'll see 2 single core CPUs in cpuinfo (i.e.  2 processors with different physical id).
in cpuinfo, there is a field "physical id", it's unique per physical CPU. Cores of the same CPU are reported as different processors with the same physical id, while physically separate processors will have different physical ids.
In your case it's reporting that your VM is configured to show itself to the OS as a two-physical-core VM. The bare metal under the VM might be 1 core or 100 cores but as far as the OS in the VM is concerned you've got a machine with two physical processors that it can play with. It knows nothing of how threads that it assigns to those processors are actually being run on the physical hardware underneath the VM.
Third, is there a way using either platform to determine the number of physical CPUs versus total CPU cores?
First, what does all of that actually mean? I see I have a processor 0 and processor 1. Does that mean Linux is reporting both cores of the CPU, or, since it is a VM, the two that I happen to have right now (even if they're on physically different CPUs)?
To answer your first question: http://www.richweb.com/cpu_info describes all the cpuinfo output in good detail with some interesting discussion following the article.
To get somewhat similar information from a Windows CMD shell you can try the systeminfo command from a CMD shell. It displays a whole lot more than the /proc/cpuinfo stuff in Linux, but also not quite as much detail about the actual processors themselves.