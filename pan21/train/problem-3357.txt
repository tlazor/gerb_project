This would work best if player control entities moved move than one unit each turn. For example three movement points might be used as three horzontal moves, or two diagonal ones with 0.16 left in the pool for later. Once that hits 1.00 the player gets a "free" hor/very move and at 1.41 a free diagonal one. You could cap the extra at 1.5 for force it to be used or lost at that point to stop the player keeping this stored energy for ages or letting it build up.
Because D&D 3.5 only supports integer movement, the way this is actually calculated is that orthogonal movement costs "one square." Your first diagonal movement also only costs "one square," but the second diagonal costs "two squares." You alternate one and two squares for each diagonal move. Implementing this movement rule within your game will handle several problems with diagonal movement.
Obviously this is a complication to your game rules that may be completely undesirable, and it would be impractical for a non-computerised game, but if you could make it work within your game's existing rules it would limit the exploration difference between movement directions without needing to abandon the grid format.
You would need to be careful how you present this to your players in a way that makes it look both smooth and fair. In a multi-human-player scenario such changes could become something the players take advantage of strategically - this may be a problem, or there may be a natural way to mix this in with the game mechanic (perhaps allow the players to store a small amount of "unused move credit" that they can use to react quickly at a later time and have the extra 0.41s of move feed into (or take out from) that pool.
As this diagram shows, this movement rule creates a reasonable approximation of circles and also is not off by more than 1 when compared to the true distance (when within 15 units of the start).
If your vision/exploration radius is also calculated in this way, diagonal movement and diagonal discoveries will be about as close or far as orthogonal ones.
You could make the player move two spaces if they move up, down, left or right, and only one diagonally. It wouldn't completely even it out, but it would be much closer.
How about, rather than having a fixed viewing range, have the player's visibility area depend upon what direction the player was facing, as well as perhaps the direction the player faced in the last few turns (a player who was moving north might be able to immediately take a step south, but might take a few turns to get maximum viewing distance in that direction).  A player who heads north out of a narrow corridor into a large room and continues traveling north would have limited visibility east and west, and probably should.  When the player stops moving, one could have the system automatically "explore" unseen areas that are within the player's present sight radius, but while the player is actively moving the field-of-view should be more confined.
While you can't force single unit movement without losing your descreet grid (which would change your game design pretty significantly) perhaps you could keep track of the extra movement taken and drop moves later: track the extra 0.41s and once they total more then 1.00 have that unit skip a move. Or the other way around: consider diagonal to be normal, add up the 0.41s for each horizontal or vertical move, and give extra move credit once that is greater than 1 (or 1.41 for a diagonal move).
Dungeons and Dragons 3.5 (pen-and-paper RPG) has a solution used for both movement and grid-based radius calculations: diagonal movement costs 1.5 what orthogonal costs. Since the diagonal of a unit square is approximately 1.414, 1.5 is pretty close.
As an alternative to a more complex field of view (which as discussed above adds its own problems because of the constraints of a grid-based layout) you could try to emulate the effect of movement in a game that isn't based on a discreet grid. Where free movement is possible a diagonal move of one unit would be exactly that, not the ~1.41 units of movement seen with a square grid.