You have a few options to consider for improving your database performance not just including scaling out.
The bottom line will probably look better if you just upgrade the server.  Running two live databases adds a lot of complexity and isn't worth the relatively small cost of the hardware.  Really large systems use things like Oracle RAC to run the same database across multiple machines but it doesn't sound like your in the million dollar server cluster zone yet.  Having a warm standby is always a good idea and you can use replication to keep it ready to go. 
My suggestion is to start optimize your queries and you indexes. This reduced my load from average 4 to 0.5. Amazing, huh? By only adding extra indexes.
The above items are in the order I would investigate them in although it depends on the application and your requirements. For example, if you were also looking to add redundancy for a high availability setup then replication would likely be the obvious choice.
Someone posted a link to a livejournal mysql setup. They said that is better to stick to one big server rather than having  it clustered.
What you normally want to happen here is that all your write operations always go to the same (master), and you use some form of replication to sync the new data from the master to the slaves.  You can then use a load balancer to apportion read queries among the various physical servers available, with the understanding that for certain things these servers might be slightly out of date.  The load balancer needs to also be smart enough to know that certain kinds of queries need to fulfilled from the master server, so that for example when I add this post to Stack Overflow I don't have to wait for replication to catch up to see my new post if I end up load balanced to a secondary server.  In short, the application needs to be written to be aware of this as well.  You can't just turn an option on in the database and have it all just work.