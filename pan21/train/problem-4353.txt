Ability to integrate chef or puppet in with VM provisioning is key.  Most Vagrant users will tell you they run 'vagrant provision' and occassionally 'vagrant reload' much more often than 'vagrant up' or 'vagrant destroy'. These tasks indicate the real work is not in spinning up/down VMs but 'managing' them after the fact.
Yes, "plain" VirtualBox can be used here too - but the conventions used by vagrant make it more simple to set these scenarios up.
So, I'll go out on a limb and say Vagrant is definitely NOT 'better' than Chef with knife; but necesary (for now) if you insist on virtualbox and perhaps 'easier' than managing chef with data bags, provided you have a fairly simple environment to manage.
Aside from the fact knife does not yet have a plugin for virtualbox (though I envision one in the not too distant future), there are already plugins for most 'enterprise' virtualization products, including vmware, xenserver and just about every major 'cloud' provider, as well.  This means knife is far superior to what Vagrant offers if/when you are ready to move beyond virtualbox.  For now, Chef community seems happy to let virtualbox users limp along with Vagrant by not integrating virtualbox apis for a knife plugin.  There is a knife-vagrant plugin that does allow for use of data bags to pass arguments.  But, it still requires vagrant software and it's monolithic Vagrantfile to function.
Vagrant allows developers to set up their environment quickly with only one command and it is exactly the same as everyone else's. This is important in large companies where developers come & go often. It can reduce time to setup from 3 days to 1 hour.
Vagrant abstracts virtual machines so it allows you to easily switch virtual machine implementations. You can switch from Virtual Box to AWS or Digital Ocean. It's like using SQL instead of a database-specific query language.
To pose a better question (posed by proficient Chef users, anyway) might be why use Vagrant and not knife with the appropriate plugin (will get to virtualbox plugin, in a moment)?  For instance, passing argument values stored in a data bag to a knife plugin is (way) more intelligent, flexible and manageable than juggling one giant Vagrantfile.  I typically define my 'dynamic' resources like # of CPUs, amount of memory, which OS to deploy, hostname, IP, routes, etc, in chef databag(s) such that I don't need to keep changing my recipe ;-).   Editing a databag through Chef web interface is a really easy data entry task I can give to the most junior operators.  With Vagrantfile, your forever modiyfing code and believe it or not - code breaks -  which pretty much guarantees you'll NOT be handing off simple changes to Operations staff, ever.
Here are two more developer use-cases that vagrant simplifies (over "plain" VirtualBox). I didn't see these use-cases called out specifically in the previous answers.