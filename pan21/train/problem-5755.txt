This version of course eliminates the static_casts which you were doing to suppress warnings (or errors) resulting from narrowing conversions in the braced initializer-list. If you really really need those narrowing conversions to happen, then you should make up a convenient way to spell static_cast<typename P::T> â€” which you would already have, except that you have made the supremely confusing decision that pixel<P>::T should be a different type from P::T.
I don't understand why this struct containing only uint8_t fields needs to be [[gnu::packed]] at all.
Here, I suggest that one_over_ax would be a much more appropriate name than ax. (Or, you could use a more verbose name such as P::max_alpha in the first place. Either way, try to eliminate the misleading parallelism between P::ax and ax.)
This use of auto is not valid C++17 (nor is it currently expected to be valid C++20). Shouldn't GCC have given you a warning about this? Compile with at least -std=c++17 -W -Wall, to which some add (but others do not) -Wextra -pedantic.
IIUC, _mm_empty() is the way to signal to the processor that you're done doing MMX things for a little while. I don't really understand why or when you'd need to write it explicitly in C++ code, but let's assume that you're right that it needs doing here.
Would it make more sense to express it as an RAII object that is created before you start doing MMX things, perhaps passed to each MMX operation as a parameter, and then destroyed automatically at the end of the MMX computation? So in practice your code above might look something like this after RAIIfication: