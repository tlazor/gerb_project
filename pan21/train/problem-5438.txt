The code seems to implicitly assume a hand of size 5. This should really be explicit given that the logic would not hold given hands of different sizes. This would be especially important given certain styles of Poker where you might construct the best 5 card hand from 7 cards.
hasTotalPairsEqualToN(...) could use the ranksMap construct instead, similar to hasNumberOfCardsEqualToN(...). It'd also be a more flexible function to just return the total number of pairs rather than building in the comparison:
cardsInSequence() would be clearer with an explicitly indexed for loop, although this presumes hand have a minimum of two cards:
The Hand class is mutable. A general rule of thumb is to make classes immutable for the sake of ease of use. This can be especially apparent when using such objects in Collections as keys. Shifting the assignment of the Card[] cards; field to a constructor gets you half of the way there. The other problem is that you're passing in a reference to the array, so there's no guarantee that it may not be modified after the fact. The best practice in such cases is to make a defensive copy.
The private methods could be better named. isARoyalFlush() doesn't actually check for a royal flush, just that all the cards are rank 10 or above, or 1 (e.g one of 10 J Q K A). It's only in combination with isAllFromSameSuite() that this check is valid. isAllFromSameSuite() could be more succinctly named isFlush() (plus I suspect 'suite' is a typo and you mean suit) while I'd rename isARoyalFlush() to isAllRoyal(), hasNumberOfCardsEqualToN() would read more fluently as just hasNumberOfCardsEqualTo().
isAllFromSameSuite() also doesn't need a tmpCard. As with the above method, you can just compare all the other cards to the first:
ranksMap is actually a rather useful construct and doesn't need to be generated each and every time it is used. You might consider either doing so when cards is assigned (in the constructor if you've made the object immutable). Alternately, you might want to lazy-load it, ensuring we only do that work when we need to: