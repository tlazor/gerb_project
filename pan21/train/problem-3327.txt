Side note: part of the reason that Windows passwords are vulnerable to Rainbow Tables in a way that other password systems aren't is that Windows doesn't salt the hash.
I dont see how a "forklift" from AD to something else would be possible (well, easy) - you'd need to have another system running simultaneously to be populated with auth data as users authenticated against AD, at the very least. 
I guess the other question I would ask is - what would cause you to move away from AD?  If it's licensing costs or a general disdain for Microsoft products, build out the application differently to begin with.  I would suggest that you should build it as you intend to proceed.  Rearchitecting after the product has gone live will cause you nothing but heartache, regardless of how easy the migration plan appears to be.
You might have a look at sha1hexfltr  This is used to copy AD passwords as SHA1 hashes into an attribute on the AD user (unsalted in a publicly readable AD attribute, which is a problem IMHO, angrytechnician has some ideas on that.
If you can completely replicate the hashing process of Windows, you should be able to re-use the dumped hashes as the basis of an authentication system; all without actually decrypting the passwords. I just don't know of a product that does so.
It sounds like you'd want to install something to intercept user password changes in AD and store them elsewhere.  Something like passwdhk can grab the pw and do whatever you want with it (storing it unencrypted or in anything reversible is a bad idea, obviously).
This is quite doable, though somewhat... shady in the tools. Extracting password hashes is fairly simple, there are a variety of gray-market tools that'll do just that. Once you have those hashes, the existence of things like L0phtcrack and John the Ripper are strong evidence that the Windows password-hashing mechanism has been fully documented and is fully predictable. 
The hashing algorithm for AD may well be predictable and repeatable, but it is not well documented.  So I don't know that there is any way you're going to be able to do it that way.  What I would suggest is looking into Active Directory to OpenLDAP migrations.  The back end for OpenLDAP is much better documented.  You could then use that as an intermediate step to implementing whatever it is you want to do.