The issue was that iptables was running on instance B and not allowing any traffic.  I learned that there are two levels of firewall for EC2 instances: security groups (managed at the AWS console) and iptables (managed on the host).  There are reasons to use iptables, for example
If you still cannot connect, verify that mysql is listening on eth0 and not just on the loopback interface.
We had a similar problem, but our existing instances were rebooted and suddenly couldn't communicate.  Turns out there were too many rules in the security group - just removing some allowed communication to resume.  It was still working before the reboot because the rules get added over time by automated calls to the api.
(1) you can check to see if your instance is in a VPC via the AWS console.  In the EC2 dashboard, you can select your instance, then in the Description tab, on the left hand column, there is a VPC ID field.  If this is blank, you are in EC2-classic.
(2) You cannot access the public IP of an instance from within another instance in EC2 unless that port is open to the world.  Your error above using IP 54.X.X.X tells me you are using the public IP.  Change your connection string to use the public DNS instead.  This will be the hostname that starts with ec2-.  When you do a DNS lookup on that public dns name, it will resolve to the PRIVATE IP instead of the public IP, which should be reachable if your security groups are set up correctly.
The reason this worked for me on a different instance is that the image I used in that instance didn't run iptables -- every image is different.  The image I used in this case used iptables to disallow all connections except SSH.
AWS has separate security groups for VPC and non-VPC instances, so you need to somehow find out if you are on VPC or not (just go to VPC console and check if you see your instances there) and then make sure security groups you have created are in the same context. Then you can just add security Group A to Security group B as trusted and do the opposite too. This way you just allow all traffic between two hosts on an individual ports (I assume that this was your intention).