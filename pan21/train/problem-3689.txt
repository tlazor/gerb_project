If at least one client is honest and the random number generator is good, it will be possible to arrive at a fair roll. If everyone is cheating however, it will not be. But in that case nobody wants to play a fair game anyway.
All players now verify the signatures, concatenate these strings, and create a hash of it using a cryptographically secure hash function.
maybe let 2 clients have his own random seed the other clients don't know, when you need a new random number all the clients generate a number then you add all those for a shared seed make a the final random number.
That way no client knows the result of a roll before sending their numbers, cannot predict what numbers would change the outcome. They can invalidate their own numbers but it won't do them any good.
What this cannot avoid, though, is a client pretending the outcome of a roll is a different one than it really is. If they are refusing reality there isn't really much you can do.
Each player creates a cryptographic signature of their strings, and sends it to all other players. After all players acknowledged that they received the signatures, the strings themself are sent to all players.
As long as at least one player contributes an unpredictable string to the total hash, the result is unpredictable. The only possible attack scenario would be when one of the players can predict what random string the others will produce. That's the reason for exchanging the signatures first: When the signatures are exchanged beforehand, a player can't wait for the others to send their strings and then generate a string which would result in a favorable result.