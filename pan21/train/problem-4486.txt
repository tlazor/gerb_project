This is one of the reasons I love Processing, or if you're tied to Python, then Processing.py. You get a simplified, easy-to-launch editor that includes everything you need to write and run code, and it comes with a bunch of examples that you can get to by just clicking one button.
Why do they need to follow these lengthy instructions? Why haven't you chosen tools that have a simplified setup process? Why isn't that setup step already done?
In the first place, your instructions may be clear to you, but until you vet them with others they won't be clear to most other people. This is why textbooks have editors and why authors re-write continuously. 
This question seems like a minefield. The obvious answer is "Don't Do That." No group of people, students or professionals, is going to interpret two pages of instructions in exactly the way the writer intends. It isn't going to happen. They will misinterpret individual steps, skip steps trying to optimize, crash the machine when they don't have a conceptual idea of the goal, etc. 
But even then, you will fail. Different students will interpret your writing differently. That is pretty much guaranteed. Your writing won't be perfect. Neither will their reading (and understanding) be perfect. If you need different instructions each day and they can't be vetted, I wish you the luck you aren't likely to have. 
But even if you don't want to switch to Processing or Processing.py, my suggestion is the same: your goal should be to get students writing (fun and engaging) code as soon as possible, which means you should be eliminating as much of the boring setup as possible. The less setup you have, the simpler your instructions can be.
There is one special difficulty that you need to address. Minutely detailed and extremely precise descriptions are often especially hard to follow if the person trying to carry them out has no overall context or goal that they understand. The reader likely has no way to check that each step was faithfully executed in the correct order. Any glitch will cause a serious problem for that person. With a group of individuals, there will be many independent problems simultaneously. Whack A Mole. 
If these are school computers, why isn't Python already set up? Why isn't there just a shortcut on the desktop to the editor? Why isn't the starter code organized in an easy-to-find location? (As in, so easy that it doesn't require an explanation. Like a folder called Examples on the desktop.)
Hopefully these rhetorical questions demonstrate my point: if I were you, I would purposely choose tools that make it easy to get started, and I would try to eliminate as many setup steps as possible.