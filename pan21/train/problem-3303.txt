It's not really that simple to do a DNS Failover for a database. There are many reasons, but here are a few that might cause problems. 
Even with a 0s TTL you can reasonably expect propagation to take around 2 hours. You've given much detail about your software stack nor where it is located. With PHP/non-persistent running inside AWS then you'll get a faster recovery, but with persistent connections (e.g. Java) then you could have a very long outage.
If your "business folks" want auto generated IDs to be consecutive then ask them how to implement a secure high availability system system without this. It is quite possible but it's very, VERY slow and fails to deal with all the other bad things which master-master replication fixes.
Take a look at a solution like ScaleArc. It's state aware and understands stuff like replication lag, and offers some neat HA options, along with many other features like caching, analytics etc.
You'll note that the Amazon documentation only talks about using their failover services for handling webservers - there's a reason for that (and arguably its not even a good strategy for webservers). There are contexts where implementing high availability at the client is a good idea (and these rely on round-robin addressing - not failover). 