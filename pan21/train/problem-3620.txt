The "reversion to idle animation" is a rather challenging task: if I have just the single walking animation, I can stop it and then play the idle animation (or rather, the "idle frame"), but when the sword swinging is added, it becomes more difficult to know when to swap to the idle animation.
I'm trying to implement my own sprite animation system, and so far I've got it working quite nicely. I store each animation as a "take" which basically denotes the row of the animation in the sprite sheet, the starting frame and the number of frame. These takes are created during start-up and played by calling play(takeID) on the animation. The player is split into four sprites: head, torso, arms and legs, and different animations can be played on each of these separately from the other parts.
Now, this works fine for situations where I only need a single animation (walking, idling, running, swinging a sword etc.), but I need a more complex animation system for situations where the player performs multiple things at the same time, for example walking while swinging a sword.
Sounds like you have one-half of this problem licked: your player is split into independent sprites with their own animations. That seems totally reasonable for what you want to achieve.
So, to conclude with my question: has anyone faced a similar problem? How should I tackle this issue?
I've tried to break down the requirements of the animation system by using the example above, and I've found these cases:
It sounds like your particular state machine would be hierarchical in that walking is a "super state" and attacking, at least for the player's hands, is a "sub state".
I think the next step is to investigate state machines. With state machines you could define your various states (idle, walking, attacking, falling, and so on) and then define transitions between them.
I've tried fiddling around with "overriding" animations where the animation with the higher priority (in this case, the "swinging" animation) would be shown instead of the lower priority animation (the walking animation) while updating still both simultaneously to maintain the correct rhythm of the original animation. However, I have trouble getting it to work properly.