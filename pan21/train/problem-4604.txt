This uses the package's start time as a reference point for determining year, month and date. You could use GETDATE but if your package starts at 11:59 PM and takes a minute to run, knowing that every time you use GetDate() it's re-evaulated... I'd rather not find out what happens. This expression generates a text string representing a date in the format of YYYY-MM-DD
If I put message box calls in before and after the assignment of sFlatFileConnection, with a starting value of "C:\ssisdata\so\input\log.txt", your code will assign a value of "C:\ssisdata\so\log.txt2014_10_28  My assumption is you want that date string between the log and the .txt. 
Biml, is the business intelligence markup language, which allows me to describe any business intelligence object in terms of some XML. Yes, I'm using XML to define more XML. 
I present it with the line breaks in the expression so you can easily see it and future readers, you can modify it.
The lazy trick I use for finding the last X in a string is to reverse it. It's then the first element in the string and I can pass 1 as the final parameter to FindString.
This could be overkill but I see this question as helpful to anyone trying to insert a value before the file extension and I further assume, it may not be a 3 character extension. 
By virtue of grabbing the free BIDS Helper you can play along. Install it for your visual studio instance, right click on your solution to add a new biml file, paste the following, right click on the saved biml file and voila, you have a working sample.
The more SSISic way of doing this would be through Expressions. Despite seeing multiple variables here, don't worry about them. I have found that when people try to do too much with an Expression, diagnosing and debugging bad logic will leave you reaching for the nearest blunt object.
If I'm using .NET, I'm not going to do the junior league string work I do above with Expressions. Instead, I'm going to make use of the .NET libraries as they've done all the heavy lifting for me. Specifically, I'm going to leverage System.IO.Path.