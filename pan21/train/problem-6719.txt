Even minimally logged, those are big transactions, and you could be spend a lot of time dealing with the ramifications of abnormal log growth (VLFs, truncating, right-sizing, etc.).
When can you restore back to?  Last hourly t-log backup that does not contain bulk-logged operations, potentially losing n minutes of transactions.  A full backup or t-log backup before changing the recovery model will create a fallback point. Which one you choose depends on your RTO.
Dropping partitions out of a table is a really fast and resource-efficient way of removing large chunks of data from a table.  Were this table partitioned in a manner that supports your source / destination split the answer would be to restore a copy, drop the redundant tables and redundant partition(s) from destination and drop the complementary partitions from source.
I would add that, however you decide to approach this, you'll need to batch these transactions. I've had very good luck with the linked article lately, and I appreciate the way it takes advantage of indexes as opposed to most batched solutions I see. 
I have about 84 millions rows.  Of those all of them needs to be transferred to a separate database on the same server, then I delete to delete about 60 millions rows from the source database.
Don't think you should be recommending changing the recovery model without either a full database backup or t-log backup before and after.  One of the features of BULK_LOGGED recovery model is that you will lose the ability to do point-in-time recovery for t-logs containing bulk-logged operations.  Classic scenario:  nightly full backup, hourly t-log backups.  You change the recovery model to bulk-logged and start your operation.  Something goes wrong and the transaction rolls back (or you haven't used one).  However you're not sure what else was going on in the database so you want to restore to a known good point.
The 84 million rows are all in the same table.  That table alone accounts for 90% of the whole database.