First point: You can use iptables CONNMARK and MARK targets for marking everything from a certain client. This can be used for firewalling and routing. I doubt that you need several DHCP servers as you can set each clients configuration based on its L2 address.
It's hard to believe that anyone could seriously consider writing a VPN software because he wants to use only one UDP port (why?). Even this could easily be realized by NAT. You just have to be able to associate client configurations to source addresses. And even with completely dynamic client IP addresses this could be enforced by creating a non-encrypted IP tunnel first.
I need 1 shared UDP port (VPN service port) to which clients are connecting with VPN protocol and and I need that every authenticated client ends up in its own tap interface.. this allows me to set up firewall, routing, different dhcp server, ... for every client connected to VPN concentrator separately.
OpenVPN is not an option because I don't know to setup 1 external port -> separate tap interfaces. I don't want to do routing or whatever filtering in the VPN daemon, this is kernel's job.
is there any VPN program that handles client authentication, data encryption and ends in a tap interface for every authenticated client? 
If you really need one interface per DHCP instance this should be possible with virtual interfaces: Enslave veth0 to the VPN-tap bridge and bind the DHCP server to veth1 or similar. The separation of the bridged VPN clients can be done by ebtables.
OpenVPN is not an option because you don't know how to use it? You have told us what your requirements are. Leave it up to the answers what turns out to be an option or not.