I'm sorry to say that I haven't used doctrine my self, so you need to translate some of my response to make it really useful, but there might be some changes which would effect efficiency and speed. Mostly related to accessing the database behind your code.
You are linking category and product which could possibly affect your performance, as each you want either one, the other is joined in. Don't know your requirements, but in some cases it is better to postpone that join until it is actually needed. Some ORM's does handle this gracefully, don't know if yours does.
In other words, instead of looping through millions of products deselecting those matching a given tag from a few hundred tags, then loop through tags and find matching product. Way faster.
In general when reading from a database, it is better to read from the smallest table first. I'm not sure if this applies to your case, but if having a product database of several million, and a tag database of a few hundred, you should read first from the tag database and then include the product when you have limited based on the tags.
When building your query you might end up with multiple orWhere's, and that could sever the execution speed of your query. If possible you should try to group these so that you'll end up with a query more similar to: or (tag1, tag2, tag3) member of p.product and p != :post (or reversed?) instead of or (tag1 member of p.product and p!= :post) or (tag2 member of p.product and p!= :post) or (tag3 member of p.product and p!= :post). 
This would also allow for lesser checks against the p != :post. This check (or a variation thereof) could also possibly be added before the tags and product subqueries if any of those are present, since p == :post would falsify all subqueries.