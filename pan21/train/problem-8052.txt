and so on. Note that the messages alternate nicely one by one in this case, but that may not always be true. You probably want to enable line buffering (as I did in the sample program) unless you don't mind the output arriving in 'chunks'.
At the moment I'm using nohup to start the process in the background, log stdout and stderr to a file and return the pid of the started process. What is missing is the part where I can still get the stdOut/stdErr from the console, till I decide that I want to disconnect the SSH session, while letting the process run in the background.
I want to SSH into a machine, start a process, write the stdErr and stdOut of the process into two seperate files while reading the stdOut/stdErr in the console. As soon as some specific lines were written in the stdOut/stdErr (of the console), I want to disconnect the SSH session, while keeping the process running in the background.
tail does what you want. You need two features of tail in order to make it work for your case. The first one is that tail allows you to 'follow' (keep on watching) file contents as the files grow: (from the manpage)