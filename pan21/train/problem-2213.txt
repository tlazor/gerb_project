For me, one of the biggest eye openers was how arrays are implemented in Javascript. Did you know, that all the Array methods need to do their work, is a length property? In fact, you can turn any object into an array-like object and have all array methods work, just by adding a length. Let me prove it to you:
If you just need to store your users in a list, an array is just fine. But if you want more functionality you could make a UserList class.
Javascript already had some great functional features, but since we got arrow functions it's just become a dream. Just look how much boilerplate we can get rid of once we accept that we don't need user objects to be an instance of some class. In fact, them being just plain objects is a big plus. It makes them easily serializable, To JSON for example.
If you really want object oriented code, the language has enough to make you happy. Study how to do prototypal inheritance and information hiding / private members by learning from one of the masters: Douglas Crockford.
Your User class should only be dealing with things about that user, not about how you store it in a list. You are also referring to a variable outside your class, so you are locked to this, which makes it less reusable, which is one of points of classes in the first place. So get rid of addUser and getUserListAboveTwenty from your class.
I've added an additional function to return a user from an id. I also made getUsersAboveTwenty return a new UserList. You can add more if you need it (A way to add more users at the same time would be useful). Full code:
Note about the above code that there is less of it, it's using almost only standard constructs (we are not introducing custom list classes etc) and it is in fact more readable. Also, you'll find it is much more reusable because we create small, separate functions that work on any object instead of big classes with many members.
This for me is what is so incredibly cool (and powerful) about Javascript. Consider trying to figure out why and how this works. And maybe see if you can put it into practice.
I have been coding Java for a long time before I started with Javascript so I understand the urge to write Object Oriented code, create classes etc. However, why don't you try a functional approach for a change. I bet that once you get the hang of it, you will not want to go back. I know I don't.
You don't need to pass the user to your functions, you can access it with this, like you've done in the constructor. You can also make your addAge function more general by adding age based on a parameter.