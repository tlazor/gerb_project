In this case, products are de-duplicated before they reach this table, so I can use IDENTITY to allocate synthetic keys, but you may prefer to set up a SEQUENCE object and get IDs from it when a record is identified as being a genuinely new product.
Then the transactional system can manage transactions. The MDM manages the product master data (and maybe customer data too!). Your ETL jobs use both of these an input to the warehouse. And the warehouse manages the task of making the data available for reporting and analysis.
Yes: the pattern you need is "synthetic keys."  For each incoming logical product, you'll assign a key, to be used only within the data warehouse.  If two source systems reference the same product, you can give them the same synthetic key (SK).  If you source systems use the same ID for two different products, you can give them each a different key.  Thus, in your warehouse you have a clean list of products.
The people building the warehouse (you!) don't know all of the mappings between products. Rather, it's the job of a data steward with knowledge of the products to define those mappings. Then it's your job to load the transactions from the ERP and the product code mappings from the MDM into the warehouse.
The previous answer includes this line: "If two source systems reference the same product, you can give them the same synthetic key (SK)." I certainly agree with this idea. But in my mind that ignores an important part of the complexity.