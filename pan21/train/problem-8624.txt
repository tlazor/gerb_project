That brings me to my next point: getLine shouldn't exist. It's just a (very) thin wrapper around fgets. Just use fgets inline. It's basically a lazy way to avoid typing MAX_FILE_LENGTH again, but as I said, you should avoid hard coding things when (reasonably) possible. (And yes, using a #defined constant is in a lot of ways essentially hard coding -- centralized hard coding yes, but hard coding nonetheless.)
This is 100% opinion, but #include<stdio.h> has always looked odd to me. #include <stdio.h> looks cleaner. Once again though, 100% opinion. To each his own.
Rather than printing straight to stderr in processfile in the case of an error, you could return an error flag. That would allow you to be more flexible with your error handling.
When you're setting up automatic duration buffers, sure, use MAX_FILE_LENGTH. You're making your functions significantly less flexible though when you assume that things are MAX_FILE_LENGTH.
I'm not a fan of the global option variables. In this situation you could easily make the case that they don't matter, but on a site that specializes in pedantic code criticisms, I'm obligated to point out that they're unnecessary and couple the functionality of some of some of your functions to magical hidden state. If you passed the options around, you could would be more flexible (it would also be marginally more cumbersome to write, but such is the woe of high quality code :)).
MAX_FILE_LENGTH seems to be a misnomer. Should not it be MAX_LINE_LENGTH (or maybe MAX_FILE_LINE_LENGTH)?
Note that getline can now be used in situations where you have differing buffer sizes. There's no need to constrain your function to one very specific use.
(Note: if you plan on extending checkStringMatch to do more than check substring existence, ignore this comment.)
Speaking of misnomers, checkStringMatch fits that too. checkStringContains would be better. Or perhaps stringContains. Not a fan of the check prefix. It sounds like the function is responsible for ensuring that the string matches, not that it simply checks (and yes, that sounds like crazy talk since I just said "not that it simply checks -- maybe I just have weird naming habits).
It's a lot clearer (and better guaranteed) that int checkStringMatch(const char* toSearch, const char* pattern) doesn't change toSearch or pattern than int checkStringMatch(char* toSearch, char* pattern).
For example, if you wanted to add a -q flag later to suppress "couldn't open file" error messages, you could do something like:
If you're going to comment your functions, you might as well use doc comments. They can be parsed by a lot of existing programs to make prettified documentation (well, API documentation, not true documentation). They also tend to be a bit easier to visually scan:
When reading through your code, I had to look to see what checkStringMatch is, but I know what strstr is. The level of indirection can cause a bit of confusion (though checkStringContains would not).
If you plan to extend or change the functionality of checkStringMatch though, then this should obviously be ignored.
You could, however, extend the use of strstr to support situations like fakegrep -ni pattern file. Basically you'd just need to check if the first char is a - (so you know it's not a pattern [though excluding - from allowed patterns seems odd]) and then check for the existence of n and i.