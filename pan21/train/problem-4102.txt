When trying to test something like this, the quickest way to figure problems out is usually to break it down so you're getting back just one table's data; look at that and understand what you're getting there; and then add in other tables one at a time. If the results don't make sense at first, bring back all data for the latest table, and start applying the join conditions manually. If your results don't match what the computer is giving you, then you've misunderstood something about how it's tying things together.
This is, naturally, far more than you meant to bring back. However, then we wind up going the other direction. The join with the department table matches when department._id != deptcat.dept_id. Howeer, since all the deptcat records are for department 1, and youonly want data for department._id = 1, there are no records that match, and you wouldn't get anything back.
You can use the exists condition to check for the existence of a record through a subquery. This is often preferable to an anti join (a left join where we make sure the right table is null) as the engine stops as soon as it finds a record.
So, look at your join. It is an inner join (usually easier to work through than an outer join). The join condition is category._id != deptcat.cat_id
Joins compare all valid rows in one table to all valid rows in the other. What they do next depends on the join type: