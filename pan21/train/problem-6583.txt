Of course this would mean you would need to stop creating empty files instead of just deleting the expired files. 
A possible workaround if the actual file data doesn't matter is to make sparse destination files with the same size as the source files. Example:
I've been through the man pages and have searched, and it doesn't look like this is possible. Is this correct? Any workaround ideas?
I'm trying to implement a two-stage backup using rsync. The first stage is onsite, and I have a bash rsync script to copy files from the source path to on-site storage, and this runs hourly. The second stage runs at night and uses rsync to transfer everything new/modified to an off-site data center from the on-site storage. Problem is, the on-site storage boxes are filling up. Neither reducing the data backed up, nor increasing the storage capacity, is an option. 
I've written a purge script to remove files a year old or greater every night on the on-site storage boxes, and replace them with empty touch files, preserving the timestamp of the original files-- this is to prevent rsync from copying the same file back from the source after the destination file is removed. But I can't figure out how to tell rsync to ignore file sizes; I need it to ignore compare/copy based on mod date and file name alone. 
You can use the --update switch to "skip files that are newer on the receiver", but you can't preserve the timestamp when you touch the placeholder files (if the man page is accurate when saying "newer" and not "equal date or newer"). 
b is now empty and uses no space (if the file system supports sparse files), but still has the same size as a.