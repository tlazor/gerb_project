I guess this is expected behavior; I assume that the culprit is noise when the button is pushed so that a spurious logic change triggers the rising edge detection. I've tried to resolve this by adding logic to the callback to explicitly check the pin value...
While trying to come up with a more robust solution, I also realized that RPi.GPIO calls interrupt handlers synchronously.  That is, if your code receives, for example, three interrupts in 1 second, and your interrupt handler takes 3 seconds to execute...it will still get called three times.
...but even with this logic in place I am still, albeit less frequently, triggering on button push instead of button release.
I can avoid getting multiple events by cranking up the value of bouncetime, but I'm still getting them when the button is pressed rather than when the button is released.
That means that to properly debounce a switch, your interrupt handler needs to return quickly if you don't want to artificially extend the time between events received by your handler.
I'm using RPi.GPIO to handle events from a simple pushbutton.  Pushing the button connects the associated GPIO pin (4) to ground. I would like to trigger an event when the button is released (e.g., when the value read from the GPIO pin goes from 0 to 1).
you can debounce buttons in software as described above.  If you have an oscilloscope you can find the settling time and wait to take your measurement of button state.  However, this can seriously limit your ability to respond quickly in interrupt driven implementations.  If you need a faster response it is possible to debounce in hardware using a simple RC circuit.  There are many tutorials online about how to do this.  
This link will explain both approaches to debouncing with oscilloscope traces to help illustrate the behavior.
As @joan points out, the bouncetime parameter in RPi.GPIO does almost exactly the wrong thing: it means when your switch bounces, you'll get the very first event, but that may not actually be representative of the correct state of the switch.