However, many companies have a fair number of developers that are responsible for the application code running on the systems. Many of them may even have experience doing operations.
No, they shouldn't be responsible for the mail system, unless it ties directly in with the application they work on. But there should be a clear run-book of things to quickly reason about so they can either gather information for the sysadmin, or even solve themselves if simple enough.
Apply the Principle of Least Privilege. If they need access to do the job, you give them the access. But you only give the access they need. If they don't need access to do the job, you don't give it to them.
Developers, likewise, should be able to see the data in production, but not alter any tables.  Any changes should be done in test (or dev) first, then scripted and ran on production by the DBA.
And yes there are cases where log (view only) access should be allowed. Obviously when that person needs to see the output to do his/her job better, you want to lean towards giving the access. Re-think this if the log contains really sensitive information such as customer personal or financial data.
From a DBA standpoint, access to production systems for users should be strictly limited, and this includes developers.  Users should only be able to see the data they need and this would ideally be provided via views, not direct access to tables.
This doesn't just protect the person (can't be accused of overstepping his/her bounds), but also protects the organization, should the user's account be compromised.
Many companies have one sysadmin who is on call 24/7, even for application issues. Some companies are fortunate and have two. It is completely unreasonable to expect that one person do all the day-to-day operations work and respond to system alerts at all hours of the night.
Depending on the criticality of the production server, yes I think the non-sysadmin should have to use a second, privileged account for his/her access to the system - just like I do (eg, I use one account for my daily email and normal-user activities; another for my sysadmin activities). The user now must explicitly change to the higher priv level, and that will help prevent slipups.
You might consider some level of formal/informal training on the security aspects of privileged access whenever you're granting it.
But I'd like to mention that it goes hand in hand with my own home-baked Principle of Shared Responsibility for Screw-Ups. That is, anyone with the ability to admin the server should also have their phone number added to the server's on-call list. So now this non-sysadmin can also know the joy of the 2AM "something's broken" phone call.