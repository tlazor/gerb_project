There isn't enough information in the question to make an informed decision, but here are some basic points. If you want more detail, please explain more about how the data is going to be queried and how large is it expected to grow, and how large are encrypted segments supposed to be and so on.    
So, in general - regardless of what else is decided, I would put the "control data" (users login, some dates, etc.) into an RDBMS of your choice. As far as the rest of the data is concerned, there are some considerations:  
It is not advisable to use a DBMS that is pointing to a file (like Mongo does) for storing text, at least not for text of your length. Each time you would want to access a single string, means I/O, and we all know what that does to performance. So indeed, you should stick to MySQL or even SQL Server (if able to pay for it).
Mainly because each of them have a datatype specialized for this kind of data: TEXT. I heard many times that TEXT is suitable for storing just text, as an alternative to VARCHAR or even VARCHAR(MAX). This is WRONG. TEXT datatype is handled differently by the database engine, and of course optimised for situations like yours.
If access is by key look-up, a Berkley DB or Mongo with some sort of a local cache (like memcache) would be more than adequate.
Further, if the rows in your table are not accessed entirely ie. the other columns are queried frequently BUT your TEXT one (not "SELECT *" kind of queries), you should consider converting the table in 1NF, and reference the huge TEXT columns only when needed.
BUT, if you decide to keep all the data in a single table, an index is mandatory. The last thing you want is a full-scan, that will fill your buffer-cache in no time.
If a successful look-up is going to require more "thinking" a relational store may be needed to support the look-up logic.  
how is the encrypted info going to be retrieved? Are you going to search for binary strings? have some metadata that will help locate the right value? key value pairs?   