Server-side web languages such as Ruby on Rails are used to generate/serve HTML, JavaScript and CSS. They receive a request from the browser, act on it to make the HTML response, and then send it to the browser and the transaction is done. With the exception of tricks like long polling, they don't do anything dynamic in the browser; that responsibility is left to JavaScript (or plugins).
It doesn't really make sense to port a 3D engine to Rails. When the browser requests a page, it could certainly fire up the 3D engine and render something... But then two things could happen:
So yes, it does seem like a ridiculous question, but the answer is yes, you can "port/rewrite/whatever" a graphics engine to run in any language. 3D graphics is just math, it's matrices and vectors and... well, at its essence, that's about it. But realtime 3D graphics will not be possible in pure Ruby in Rails without the assistance of something client-side like WebGL. And you would certainly want realtime 3D graphics for a first-person shooter.
Essentially it would be an exercise in futility, or purely academic, or useful for a dynamically-rendered web adventure game.
You could issue multiple requests, but you certainly can't keep up 30 HTTP requests per second (unless you were operating in a LAN environment), nor should you, because the overhead would be ridiculous. So then you could look into something like WebSockets or Flash sockets or long polling to stream those frames. But then that begs the question, why are you doing the 3D rendering on the server?