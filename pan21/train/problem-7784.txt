Welcome to CodeReview. I'll point out that posting code and asking questions about a bug you have makes your post Off Topic, since this site is for reviews of working code.
Add or subtract a letter to avoid using dir as a parameter name. You could use direction or dirn or updown. 
The keyboard functions take a parameter called suppress. I believe that if you set suppress=True on your various hotkey definitions, it will cause the keyboard module to eliminate the key events entirely after calling your callback function. However, I was unable to get this working on my machine, so I don't know what's going on. 
PEP-8 is the Python style guide. It tells you how to organize import statements and name variables and functions. It gives useful examples of code and coding style. Reformatting and changing some names in this manner will improve your code's readability by 10-20%.
This code interrupts whatever you were doing to loop around chasing after a valid answer from the user. Then, it forces you to do one last string-case-conversion to decode what was supplied and branch on it.
I'm using console and a version of bash.exe for Windows. And it naturally provides the environment variables that indicate screen size. If you're using curses, it figures things out somehow. If you use the python Windows bindings, I think you can determine the size of a cmd window.
This just isn't very good code. First, you're checking if dir != 'n' but inside the block, every conditions checks the value of dir again! So that outer check isn't needed. Second, you have two different cases for handling the L and R directions, and the two cases are separate. Finally, you have just enough complexity that it deserves some functions:
What are cs, vs, and ch? For that matter, what is cursor_pos since I notice that its value ranges from 0 to 9. Clearly, it's not actually a cursor position...
So, do that. Instead of hard-coding your app to support 90 columns, or whatever setting you have (it isn't 80 columns, since the $100 column wraps on my console), make yourself an array of column headers, and column positions. Compute the positions when you start up, based on the available screen real estate. 
You can define slice objects like this, which doesn't actually work because the columns are varying width.
is a great opportunity to write a function. But it's also using variables when you could be using a list. You already have lists called vs and cs (which I assume stand for values and counts. So why not use them?
I found your code quite dense and not well organized. However, it was fairly straightforward, with the exception of the hotkey mechanism supplied by the keyboard module, and comprehensible.
How about just writing a function, get_yn(prompt, default=None) that does that looping and case-insensitive comparison for you, and returns a boolean value? And you can even make it accept a default if you want:
Instead of manually managing file paths, and printing "{}\\{}".format(cwd, inp), use the standard library module pathlib to do it. It supports Windows and *nix slashes, knows about absolute vs. relative paths, and can be stringified in a nice way.
So, perhaps you would consider abandoning the use of the keyboard module for this purpose. There is another option for doing responsive keyboard-driven terminal work: curses. Or you might consider pygame if you just want to catch the keyboard events and use stdout for your output.
Your code is split into functions. But it's not split into enough functions. So, write some more! For example: