I don't think you really need to get to the same SSH session. screen (or tmux) is the right tool to get to the same shell session (if used on the remote side, don't repeat this mistake); it's usually enough.
Normally when you gracefully disconnect SSH, the server gets notified. If you disappeared without notifying the server, technically you could get back to the same SSH session, if only you used the same one-time secrets and it's not too late. E.g. this may happen when your network connection temporarily drops and no data is being transmitted at the moment. After the network connection is re-established, SSH may works as if nothing happened. But if any end attempted to send a packet and failed, the SSH software (on this end) understands there is a "broken pipe" and formally closes the connection.
Many websites referred to screen, but it seems to me that screen supports users to return a SSH screen after disconnect.
Say, I am connecting to a server via SSH from my laptop. Now I restart the laptop. Can I resume to the previous SSH session?
If you think screen is not the solution in your case but resuming SSH would be, then maybe it's the XY problem. If so, then please ask another question and tell us what you're really trying to do. Maybe we could find a solution but resuming the same SSH session will not be it.
Usually we want to detect stalled connections and not to keep them indefinitely. There are few options (for servers and for clients) that help (see this another answer of mine). 
Let's suppose you want to (mis-)use this phenomenon after rebooting the client. There are (rather non-elegant) ways to make your SSH client disappear without notifying the server, but no regular SSH client stores one-time secrets between its sessions and attempts to use them without handshaking the next time you connect to the same server. They are one-time by design. Additionally the TCP layer is quite complicated and stateful, so there's even more you would need to store and restore in order to fool the server. These are not standard ways; the protocols are not designed for such tricks.