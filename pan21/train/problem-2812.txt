I'm working on a project with procedural geometry, and will potentially have lots of opaque faces overlapping within the same model. Imagine an onion's layers. My understanding is it is better to draw the outermost layers first so inner layers' pixels can be discarded quickly by z-buffer test. If so, does that mean I should put the outermost triangles first in the index buffer for the best performance?
You can also try only rendering part of the mesh via occlusion culling or some other method, while having Unity's static batching enabled. But usually heavy premature optimization is a bad idea.
However you may not have to worry about it - even mobile graphics cards can render way more than you would expect nowadays. Some mobile architectures like PowerVR even have special handling for this exact case to reduce the overhead.
In theory draw order only matters when using multiple draw calls. Since video cards have a parallel architecture for vertex and fragment processing, the rendering order inside of a given mesh is non-deterministic. Of course this means that your method may work on some or even all of your target devices, but trusting undocumented and somewhat random features is usually a bad idea.