One thing that stands out immediately is that the structure of the program could be improved. This type of problem is highly amenable to a class that has various members to keep track of the state and methods to manipulate that state. You have done something a bit like that with your code by adding attributes to the create_hangman function but it's not as clear as just using a class. Generally speaking keeping track of state by using global variables make it much harder to reason about the flow of the program as functions execution now depends on these global variables. You could call the same function twice with the same parameters but get different results, then to track down why you'd have to examine all the code and not just the code in the relevant function. When you do:
Interestingly enough you should note that until you execute the function those attributes don't exist. This isn't going to be a problem in the program in the question but it is good to be aware of this.
There's a couple of other changes too. Generally speaking with strings you don't need to do range(len(my_string)) you can just iterate of the string directly. I've also changed the already_guessed data type to be a set because really that's what you want here.
One other thing I notice is that there is no documentation in the code here, adding in some docstrings can be very beneficial.
Now that we call the function we see that the attributes we defined are now in there. These are what are saving the state. We can be a lot more explicit about this though if we just use a class, the first part of the class will look like this:
I recommend adding a line space after the congratulations and one before Pick a letter... To do this just type \n within the print statement. Also, like 200_success mentioned, adding more words... It would help you alot to use lists to make the game longer, or actually have replayability. Use random.choice("The lists name here") to select a random element from a list of words. Use len("Variables name) to get the number of _ you need. I do not know exactly how you would make the input work, but I am guessing using lists and variables and a few loops. And I just noticed you do use \n in your code, i just recommend using it more. You also need to add Guessed letters, whisch would be easy. Just use this:
Note that I've added a parameter here with the words so we can then instantiate the program with various different word lists fairly easily. We can then use the random.choice to pick out our random word from the list. All the state we need to run our program is now here so we can remove the global variables, for example secret is now now longer needed.