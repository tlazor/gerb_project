I once had a large texture atlas (2048x2048) with a bunch of sprites on it.  And in one small area of the texture I had a look up table.  So in that case the lookup S started at 1024/2048 and ended at 1536/2048.  So I passed to the shader uniforms for SStart and SWidth. And TStart and TWidth.  SStart was 0.5 and SWidth was 0.25.   In my S direction I had 512 steps on the lookup, or 0.25 of 2048.  In the T direction it was also a small segment, but there I also needed to make sure it didn't bleed over in to the one next to it. So I made each lookup in the texture about 8 pixels wide, and in code I aimed to hit the middle.
I want to look up a texel from my GLES2 GLSL fragment shader using un-normalized texture coordinates (0-w, 0-h instead of 0-1, 0-1). The reason is that this texture is used as a look up table and I get precision problems with normalized coordinates.
There is plenty of precision in a lowp variable to handle a lookup in the range of 0-1 for any texture size that your hardware supports. Even 1/4096.  This is what the gxf card is designed to do.
Usually you can get around this by converting to normalized values so that they map to the pixel coordinates centers of the stored image which is specified in the OpenGL standard as:
I see that GL_TEXTURE_RECTANGLE is not supported wihtout extensions and neither is texelFetch(), so I have ruled out those options.
I'm not sure what you mean by un-normalized texture coordinates.  All texture lookups are going to be in the range of 0-1.  You can have them be anywhere in that range however.  If you're having precision problems in the range of 0-1 I suspect something else going on.
For example, make sure you don't have GL_LINEAR set for your texture. For a lookup to be accurate you're probably going to want GL_NEAREST.  Otherwise it could average the data around the textel and give you a interpolated result.  Same goes for the GL_WRAP settings.  You probably want something like this: