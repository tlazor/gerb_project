It's within J2EE applicaiton. I use CDI so I have a button on JSF page that will call method "proceed" on @RequestScoped component PerformanceTest. I deploy this as separate war file and even if I undeploy other applications, it doesn't change the performance.
For the server after fresh start, even though If I simulate a load, it never switches the task to another core.
We experienced a similar "slowdown" issue with JBoss 7.1.1 and Java 7 after a number of days of running. Increasing ReservedCodeCacheSize to 256m and setting UseCodeCacheFlushing to true resolved the issue.
You should use java.util.Random to create a new pseudo-random generator at the beginning of each test (which will start with the same seed), and use nextDouble() to get a new number ; you may try different tests with different seeds (setSeed(...)). 
I believe the method you use 100000 times for one test (Math.random()) does not produce the same set of numbers on different tests, so the reorderings take different times.
I'm experiencing performance slow down on JBoss 7.1.1 Final. I wrote simple program that demostrates this behavior. I generate an array of 100,000 of random integers and run bubble sort on it. 
It may be related to the following Java 7 CodeCache bug: http://bugs.java.com/view_bug.do?bug_id=8023191.
Just after I start the server, it takes approximately 22 seconds to run this code. After few days of JBoss 7.1.1. running, it takes 330 sec to run this code. In both cases, I launch the code when the CPU utilization is very low (say, 1%). Any ideas why? I run the server with following arguments:
Here's yet another observation: when the server is after fresh start and I run the bubble sort, It utilizes 100% of one processor core. It never switches to another core or drops utilization below 95%. However after some time the server is running and I'm experiencing the performance problems, the method above is utilizing CPU core usually 100%, however I just found out from htop that this task is being switched very often to other cores. That is, at the beginning it's running on core #1, after say 2 seconds it's running on #5 then after say 2 seconds #8 etc. Furthermore, the utilization is not kept at 100% at the core but sometimes drops to 80% or even lower.
This problem was resolved by upgrading to JBoss 7.1.4-SNAPSHOT. Look at this thread: https://community.jboss.org/thread/213546?start=0&tstart=0
It's a virtual machine that is sharing CPUs with another machine but that one doesn't consume anything. 