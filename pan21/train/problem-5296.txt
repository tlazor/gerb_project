I think the monster class should handle selecting what action to make, the battle object asks the monster for an action and the monster makes a choice and then proceeds to apply it. One idea is to have a strategy object that you plug into monsters and which selects from the list of possible monster actions based on priorities, categories, and conditions assigned to each battle action. Then you can have a OffensiveStrategy class for example which prioritizes attacks over defensive skills, and another CautiousStrategy which is more likely to heal. A boss might be able to dynamically change strategy based on its current condition.
I would have a dedicated Combat object that manages combat. It'd encapsulate the full combat state including things such as the list of player characters, list of enemies, current turn, battle terrain, and so on. Combat can then have an update method which manages the battle logic. It's not a good idea to just put the combat code in a simple loop, because it'd end really fast. Normally you'd have some timing and different battle stages.
For the actions taken, you can certainly just make it random, but it'd make little sense for a monster with full HP to cast a healing spell. It pays to have some basic logic for determining which action to take. For example, some actions could have more priority than others (e.g. troll kicks 30% of the time), as well as other conditions to make battles more interesting (e.g. when troll HP is less than 10% of full HP, there's a 20% chance of casting healing spell, otherwise the chance is 1%). This could be as complex as you like.
One last thing. You might want to either have both player characters and monsters inherit from the same class, be instances of the same class (actor or combatant for example), or share a common object that encapsulates the common functionality. This reduces code duplication and it'd also allow you to have AI-controlled NPCs on your side which can implement the same strategies you already coded for monsters.