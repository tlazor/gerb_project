I would advise you use the native backup compression feature in SQL Server to compress the database and log backups (and perhaps subsequently compress them with 7-Zip); then ship the files using the fastest overnight shipping method you can find.  Have someone at the secondary location put those files onto the secondary server in a mutually agreeable location where you can subsequently restore them using WITH NORECOVERY.
I would strip the full backup of the database into multiple files and then transport over the network. If you are using 2008 and upwards, use compression to get the backup files as small as possible. If you are using 2005, there are plenty of third party tools that will stripe and compress a backup. Have a look online.
Probably the most important piece of advice is to understand there is no need to validate the data at the secondary side since SQL Server commits the data at the secondary the same way it commits data at the primary; that is it uses ACID-compliant methodologies.  As such you can be assured the data at the secondary is an exact copy of the data at the primary.  The best way to confirm the secondary is a functional copy is to fail-over the mirroring session so the secondary becomes the primary.  You can do this during a maintenance window, with testers on-hand ready to validate the system works as expected.  Clearly, you'd take a complete set of backups prior to the first failover, just in case things don't work as expected.
As far as I'm aware, a mirrored database needs to have a full backup and then a transaction log backup restored (with norecovery) in order for mirroring to initialise.
Once you have broken the database mirror, you have no other option than to re-initialize it using a full backup and transaction log backup of the principal.
A final resort would be to backup to an external drive and then physically take that drive to the other data centre and plug into the secondary server (but this may not be possible for you).