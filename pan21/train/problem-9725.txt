The only technical approach that you can take is to trust the identity of the ssh connection. You could then enforce that each user only pushes commits that he made by validating the committer of each new pushed commit.
Actually enforcing the correct ssh-user to appropriate git-user is for one of the other answers here.
If all users have shell accounts with write access to the repository, you won't be able to set up a trustworthy audit log: they could still modify the repository without writing to the log, and they could write whatever they want to the log.
Many ssh daemons make an entry in /var/log/audit.log or something similar when an ssh connection is received. Cross-referencing this log with the commit-log should give you an idea as to which ssh-user was used to issue a commit. This is an auditing step, to be used after the fact for verification. 
Users would still be able to impersonate each other as authors, though. You could restrict this as well but this would lose of common workflows such as cherry-picking and rebasing and perhaps even branching (depending on your hook implementation) so you may not want to do this.
To be able to trust the audit log, you would need to prevent direct file-level write access to the repository, instead using something like gitolite (which runs in its own account) to mediate access to the repository.
For this to be reliable you almost certainly don't want to give your users unrestricted shell access to the box where the repository resides; you would want to ensure the use of something like git-shell only otherwise the restrictions are easily worked around.