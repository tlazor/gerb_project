Wikipedia description (although it has alot more complexity because it's used with other applications in mind):
Another (non-GPU) solution you can use is path-finding. Before drawing the map, path-find from each potential spawn-point at each edge of the map and see if there's a path to the center. A* path-finding is pretty OK on cost/performance, but you can do this before the game starts if that's an issue.
Any spawn point that doesn't have a path can be put on an exclusion list; or vice-versa (any point with a path can be put on an inclusion list).
There's a pretty useful algorithm for this job, much more efficient than the flood algorithm in this situation (its complexity is runtime is proportional to the boundary size rather than the flooded area): it's the marching squares algorithm. The concept is simple: start off the players location (screen midpoint), choose a direction and walk until you find a wall. When you collide with the wall, you start the algorithm: you choose an orientation (up or down) and start marching over the boundary of this area, highlighting the pixels. This give you the inner boundary for the allowed area. Afterwards, you simply check whether the candidate points for spawning units lie on this boundary. 
Here is something that I actually used in my own game (2d simplex noise generated world, almost exactly like yours)- Rays. Start at the player, determine a orientation (random if you want), and go along that line until you hit something (edge of screen OR asteroid). If you hit the edge of the screen (and not a asteroid/white blob), then you know there is a straight, open line from the edge of the screen to the player. Then spawn a monster at the point you hit. If you hit an asteroid, re-do the test.
if it's important for you to only mark points with a valid straight line to the player you can use an algorithm like the following (it's a c++ code), it consumes more than than normal floodfill. there may be some minor bugs (I'll be glad if anyone corrects them) since i didn't test the code myself but you'll get the idea.