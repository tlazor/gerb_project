Yes, of course, it is possible for a rootkit to modify your baseline database, which is why you need to take a copy of that database and store it separately of the server before you put the server online. Then, if you suspect you are "rooted" (and you suspect your baseline database was also tampered with), you can boot your system from the install media, restore the known-good database from your backup, and then run a scan against the known-good. It is much more likely, however, that a rootkit will not anticipate having to defeat your particular HIDS, and so you will receive a notification from the HIDS that system files have changed, indicating a probable system intrusion.
Other things to look for:  ports shown open from an external nmap which do not look open via netstat on the machine, and pids in /proc which don't show up in ps. And if you happen to have remote syslog enabled, look for ssh logins which don't have records in the lastlog.
The best way to know whether your server has been "rooted" is to be running a host-based intrusion detection system (HIDS). Unfortunately, if you're not running a HIDS now, then it's too late to install one. The proper time to install a HIDS is when the server is first installed, and before it is put onto a network.
To find the root kit on a running system, one way to do it is to compile a kernel module designed to detect rootkits. Compile it on a different machine that is running the same OS version. Then copy it over and insmod it.
Since you were not running a HIDS, you have no quick way to determine for certain whether you have been rooted, or what system files have been modified. You could spend a whole lot of time comparing your system files to known-good files pulled from known-good installation media, but that time is most likely better spent reinstalling your system from that media. If you want to investigate how you were rooted after the fact, the best course is to take an image of your system before you wipe it and reinstall.
The reason we suspect this is that we have noticed a higher than normal network utilization on the machine from high (what appear to be random) ports.  
It is very common for rootkits to replace system binaries such as ps, top, netstat. And it's also common to trojan ssh. So, looking for checksum oddities in those files is a prime approach. If you're on an rpm-based system, rpm -V is usually a good tool, or dpkg-verify on Debian/Ubuntu. Or you can check the checksums directly (but watch out of prelink, which changes binaries on the fly for speed reasons). This isn't reliable, but many script-kiddie attacks don't cover these traces. (In other words, if you find something, good. If you don't find something, it doesn't prove you're clean.)
We have a box we suspect has been rooted at work.  The question is how do we find it?  I am no system administrator, but I was brought onto the team to resolve the situation and I am curious where good places to look for such as problem might be? 
This is like mice: if you see one, there's a hundred living in there. If you see signs of a compromise, you've got to assume the whole system is compromised. That's why everyone is suggesting that you reinstall the system rather than spending a lot of time looking. I've encountered several situations where a machine was compromised and sysadmins thought they'd cleaned up the mess, only to regret it later.
The real fix for a system that may be rooted is to reinstall it from secure sources. Like the installation CDs. Then restore your data only from backup. Any binaries or scripts in your backup may have been compromised and saved into your backup.
A rootkit detector will have tools built into the kernel module to dump the running process table, verify the syscall table (to look for syscall intercepts) and other features. It may have scripts that will take the output from the module and compare that to the output from ps, netstat, ls, etc. Or it may be able to scan the memory in kernel space for known rootkit signatures and report.
What can do we to locate the problem child?  What can we do to protect from this in the future?  Is there monitoring we can run to make us aware of this in the future? (Aside from network monitoring which we are already working on keeping a closer eye on.)
Briefly, most HIDS work by computing cryptographic hashes of all system binaries, and storing those hashes (along with numerous other file statistics) into a database, called the baseline database. Then, periodically, the HIDS rescans your system, comparing all files in its baseline database to the actual system files.