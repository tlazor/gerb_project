UDP works on fast update games because all the game has to do is to send its current state to everyone else, and everyone else just read whatever it receives and render them into the game. 
TCP/IP is a good choice if your game do not require realtime updates, like turn based games (tic-tac-toe, chess and the like).
TCP/IP on the other hand works the other way around. It sends and receives, and during the receive period, the application/game has to wait for the response, otherwise a time out exception may occur which you might manually handle in code.
I'm not really sure it can be done. Sooner or later, whether UDP or TCP/IP is used, there always has to be a managing entity of all the packets running around the game (the computing unit that handles the current state of all users). I'm pretty sure that is the server, and that server requires some code.
I am not really familiar with cloud based frameworks nor using them for network related game development. However, I am familiar with ways on multiplayer game development, where you get to code the part of the game that will handle network packets.
However, when we talk about speed and close to real time updates, UDP a lot more favorable. UDP is stateless, meaning that when you send something, you don't care whether if the user received the data or not, nor are you expecting a reply which reduces the overall size of the packet (no more additional headers) and it does not require a thread to wait for a response.