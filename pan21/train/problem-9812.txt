This system did have some bugs (very rarely cut-scenes that never ended because of border cases like where the AI didn't choose a predictable route) - but resulted in very 'natural' looking sequences because people were not following straight paths etc.
Operation Flashpoint (original release) has a command and control system for entities. This is essentially a list of commands that entities had to perform - the AI system would be responsible for carrying out the commands. Entities could be anything: an enemy, the camera, the player, etc. All the entities had to exist 'before the fact' (but there is nothing stopping you from making a 'create entity' command). Let's take the example of two people meeting, having a conversation, getting into a car and driving off.
After you have chosen a way to describe cut-scenes you will likely have an some form a file from your editor (possibly an XML file). You would then create a content processor and add your cut-scene to your content project. At runtime you would then call something along the lines of CutSceneComponent.Execute(Content.Load<CutScene>("CutScenes\\Level3")).
XAML uses a story-board system. This is basically a list of animations that need to play - it is essentially the same as the Operation Flashpoint example except the timings are used instead of 'waiting on things' and entities move along predetermined paths. Again, using the above example:
I'm going to look at how some pre-existing implementations work (that I have actually used) - and hopefully that will give you some ideas on how to integrate it with your game engine.