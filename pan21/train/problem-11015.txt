Restricting your authentication method to publickey is a great start. Using a log scanner Denyhosts or Blockhosts (as Graeme said) will help protect against repeated attempts from the same address. Denyhosts has an optional shared database which lets you block addresses other people have seen.
A nice alternative to moving your SSH port is to use something like Blockhosts. It's a python script that scans your log files (usually /var/log/auth.log) for these kinds of things, and puts dynamic entries into /etc/hosts.allow to block people doing brute force scanning. I use it to good effect on my SSH and vsftpd installs to blacklist people after 5 incorrect passwords in a row.
Along with restricting the authentication method, the best solution I've found is to move SSH to a different port. Scans seem to be focused on port 22. After moving away from that port the attempts on each of my servers has dropped to nil.
You have port 22 exposed to the world.  You can either use the OSX firewall features built in to narrow the IPs which can access your machine, or you can place some sort of firewall device/server in front of your network and require people to connect to that(typically via VPN) before connecting to your server(s).
I personally would not bother changing the port of SSH.  Security by obscurity is a myth.  Port scanners can easily find out what type of service is running on a non-standard port and making environments non-standard can cause issues with vendors or more annoyingly add even more  things to make sure all newly hired people know to do.  It just adds more things to document and ensure are standardized.