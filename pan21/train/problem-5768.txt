In GenerateObjects() I don't see the need for map object. 2D array isn't the easiest thing to read (especially when initialized in this way, at least don't make it single-line). A single for (with integer division and modulus to calculate row/column where required) is much easier to read (IMO). The problem (I think) is that here you're receiving a bunch of objects but that logic is somewhere else.
If you don't have to, you shouldn't use multidimensional arrays. Linq cannot work with them. It's better to use jagged arrays GameObject[][]
With static int mapWidth = 33; you declare a read/write public fields. Few things here. You should not have public writeable fields. Public fields should be PascalCase. You do not need static but const. This is true for all of them.
When you want to expose object outside your class you should use read-only properties: public GameObject Tile { get; private set; }. I strongly doubt you need all those public objects (aren't they just implementation details? Is this a mere factory class?) but I don't see all surrounding code then I'm just guessing. What I think is worse is that you're holding a lot of objects and this class just handles some initialization code. Not enough to do for a class and too much for a single method. I think if you merge it into calling code you will have easier to read code...
GenerateTileMap() has some magic numbers. Make constants from them and reader won't need to understand (guess) what they are.
Consistency. Sometimes you use private to denote private methods and sometimes you don't (because it's default). One way or the other but do not mix otherwise reader will have to understand if he is missing something...
It's not a mandatory rule but camelCase for classes is little bit weird in C#. gridInit should be GridInit. Also you may want to pick a better name for that. Init is clear but it doesn't help to understand what will be initialized (and then responsibilities of this class). Class isn't inherited then it should be sealed too.