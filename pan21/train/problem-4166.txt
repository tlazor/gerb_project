Try to avoid generic names like askInput and showResult.  They don't read as well as more specific names, and they can clash with future times when you need to ask for input or show results.  
Or you could generate the initials in the constructor if you use them frequently.  That doesn't seem necessary in this case though.  
Also, getInitials requires seperateFullName (sic) which requires askInput, but if you switch them, the compiler won't notice.  You'll eventually get runtime errors.  
This is a very step-based, procedural approach.  It doesn't take advantage of Java's object-orientated nature.  
Sneaky.  You start all over again.  However, you'll still have the rest of the previous run to finish.  So you will call showResult twice.  
This isn't how static variables are usually used.  You're essentially limiting yourself to do this only once in the entire program.  More common would would be to make these instance fields in a Name object.  Then adding more names is as simple as adding more object instances.  
This way, greet and showInitials know how to display; askName knows how to get input; and the Name object knows how to store and process data.  And if you change the order, you'll get a compile time error.  
Note that my revised version doesn't require this.  You'd instead mark an error in that case, which will be handled in the caller.  That way Name doesn't need to know how it was called.  As it is, this is a separation of concerns violation.  You could only call this code from start.  
You pass class fields into each method, but you don't need to do so.  They're already there.  You already use the fields rather than returning the values.  It would be better to separate on some other basis.  