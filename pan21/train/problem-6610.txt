The stack.c file has #include <stdio.h> but it appears to me that no functions from it are needed.  On the other hand, it uses the bool from stdbool.h but doesn't include it directly.  One might argue (correctly!) that because it include stack.h that it's included indirectly, but I'd advocate that it's also in the implementation file so that it's obvious that the bool used there is the stdbool.h version.
Few problems here. First, a variable of type pstack is just a pointer to Stack structure, not pointer to pointer to as the comment claims. Second, you do not use incomplete type as intended: the client still sees the implementation of struct Stack, and any change in implementation would result in client code being recompiled for no reason. A standard way to deal with it is to leave
The is_empty function does not alter the stack, so that argument should express that notion by using the const keyword:
The stack only stores pointers, but does not "own" the objects to which those pointers point.  This means that if you push pointers to stack objects with auto scope, the stack will contain invalid pointers if the underlying items go out of scope.  An alternative would be to create a copy of the object and allow the stack to own them.
The pstack relies on the value being 0, (in is_empty and make_empty) but does not explicity set it to that (r any) value.  If your code checks for a specific value, it should also set it.
However, code to return EXIT_SUCCESS is automatically generated if the code reaches the end of main so this is not needed.  Also, it may be more appropriate to return NULL instead of aborting the program with exit if too many pop operations are requested.