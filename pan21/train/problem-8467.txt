Legitimate exceptions include instead of triggers, integrating with third party code, and setting complex default values.  The latter may be the biggest argument for using triggers, but if the business logic is in the database then it shouldn't be necessary.
If you must write a trigger at least have it call a procedure in your business logic package so the code is more discoverable and easier to debug/test.
I have seen environments where cascading errors were caused by updating other tables from within a trigger and the updated tables had triggers.
My policy is not to use triggers that modify data. Triggers that don't modify data but enforce integrity rules that can't otherwise be done with constraints are ok. Triggers are just procedures and can always be replaced by other procedures that aren't triggered.
Often times it seems that these situations are caused by older, existing systems; third parties; and architecture already in place.  While better solutions may be clear and obvious, the time it takes to implement these solutions is far beyond the time you have available to make them happen (or beyond the resources or authority in some cases).
In Oracle triggers should be avoided in most situations because they divide a portion of the logic into a separate code area that is harder to debug and only runs as side effect, not directly.  
As far as auditting is concerned, a trigger may be used, but if you have the Enterprise edition of SQL Server 2008, or later, you are also able to use Change Data Capture (CDC) functionality.  Using CDC functionality eliminates the need to add a trigger to the auditted table and removes the potential for a hidden performance impact.
Everything I've ever learned says "never say never". There will always be cases where you have to go against any established convention and there's just no way around it.  
Business logic should be in packages and all table access should be done through the packages.  The package can then implement any logic that would have been done in the trigger including complex default values.