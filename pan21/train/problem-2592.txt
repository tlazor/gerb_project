Wallah, you now have DNS effectively pointing to the piece of software, and accomplished that goal without needing to try to rely on making DNS point to a port number, which doesn't work well simply because that functionality just so happens to not be commonly supported.
Then, you can use the AAAA resource record type to assign a name to that IPv6 address, which your network design can treat as being effectively dedicated to the specific service on the specific computer you want.
IP addresses and ports do different things.  The purpose of the IP address is to fulfill the goals of Layers 2 and 3 of the OSI Model of network communications.  The purpose of the IP address is to identify which computer the traffic is supposed to go to.  The fact that we might use a port number for that purpose, by having firewalls/routers investigate port numbers in order to perform NAPT (Network Address Port-based Translation, also sometimes called PNAT or just NAT), is a newer technique which utilizes a resource (information), but was not part of the original design.  If we step away from this "abuse" of the port numbers for a minute, and consider the original design, we may be able to find an easier solution.  By the design of the Internet, machines were meant to be found using IP addresses.
I mean, technically this could be done.  DNS is famous for being able to submit a domain name and getting an IP address.  However, I've studied the DNS protocol a bit, and really DNS is technically capable of acting as a query/response mechanism for far more than just domain names and IP addresses.  One possible approach would be to use a DNS resource record that isn't the typical A or AAAA type, such as a TXT record (which is technically just text, and could be used for anything) or perhaps an SRV record, or any other newer resource record type you choose.
And if you feel stuck with IPv4 and think that IPv6 is somehow not supported, I would encourage you to try to tackle that problem.  That problem will probably be easier to fix (perhaps using some sort of tunneling), and will probably end up being a more rewarding fix once you have it implemented.
Now, my guess is that you have access to a DNS server, and it seems to you like you think that DNS administration would be convenient to be able to handle some of the traffic routing a bit more.  But DNS doesn't seem to be able to help you get a port number.  What can you do?
If you're making up your own software (both client and server), there may be no technical reason to not do such a thing, except do know that some people use DNS hosting companies and limit them to using only certain record types.  That's unfortunate, as people who run their own DNS servers certainly have enough flexibility for such things.
However, if you aren't making up your own networking protocol (for example, if you want to use HTTP), you are likely to encounter a major problem, which is that existing software won't use your custom solution, unless you use solutions that are already established.  That's going to be the barrier.  Not a technical impossibility.  A social barrier: Can you convince everybody to do things your way?
The point of a "port number", used by TCP and UDP and some alternatives, is to be able to keep track of individual conversations.  This helps to line up communication with running programs.  So, if a machine receives traffic on TCP port 80, the machine will know that network traffic is meant to be used by the program that is the web server.  If a web browser downloads multiple graphics simultaneously, combinations of "source port" numbers and "destination port" numbers can keep track of which data is meant for which graphic, so those simultaneous conversations can occur without mixing up the data.
Consider IPv6.  IPv6 enables you to have way more IP addresses.  Furthermore, unlike some implementations of IPv4, devices that use IPv6 can typically easily support multiple active IPv6 addresses at the same time.  So, if you want to have three different network protocols on one computer, you could assign at least three different IPv6 addresses to the same computer.  And then you can do whatever routing shenanigans you like with those IPv6 addresses.
Now that I've explained why you can't do that, though, I may have a solution for what you're after.  First, let's take a look at why we even have IP addresses and ports.