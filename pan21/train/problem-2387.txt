For this type of granularity you'll want to use ACLs.  With ALCs you can assign different permissions to multiple users or groups.  To accomplish what you're asking you would run the following commands (assuming your directory is called dir):
The + means it has one or more ACLs associated with it.  You can see the ACLs with the getfacl command:
Permissions to use devices are handled in the same way, that's why you have groups like input, disk etc. in many distributions.
This will give full access to user1 and 2, no access to user3 and 4, and read/execute permissions to user5 and 6.  If you do a ls -ld on the directory you will notice it now has a + appended to the permission bits.
So in that sense, you could think of a group as a particular "rule" of your "permission ruleset". The restriction is that each file only can have a single rule with a single rwx combination of permissions, beyond the "user" and "other" permissions.
So your scenario where one group of users needs to have one set of permissions and another group needs to have a different set of permissions for the same file or directory can't be implemented with standard unix permissions.
The usual way to deal with permissions is to create a new group that abstracts over all files that should behave similarly, give those files the corresponding group id, and make all users that should get those permissions part of the group. That's why users can be members of many groups.
However, there's an extension to the standard unix permissions called access control lists (ACL). See man acl for details. For many file systems, you must specify an option to activate acl's when mounting them.
Also worth noticing is that the ls command seems to show that the directory is group writable, but the getfacl command shows that it's not.  The ACL is correct here, meaning if a user in the users group, but not otherwise named in the ACL or the file ownership tries to create a file in the directory, it will fail.