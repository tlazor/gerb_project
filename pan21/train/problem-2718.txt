I have used the first two of these technologies, the advantage of database mirroring is that it is easy to manage and you have all the licensing you need. SnapMirror operates at a lower level and will require additional licensing for your Filers. I vaguely prefer database mirroring because I am a DBA. GoldenGate is a newer product, that involves a third vendor, more licensing, etc but it is certainly quite capable - but I have not used it "in anger" yet so I'll not recommend it except as a possible option.
We have looked at and tested Peer-to-Peer replication but have encountered issues with conflicts during our testing. I imagine there are other global data centers that have encountered and solved this issue.
My questions is what SQL replication technology (SQL Replication or 3rd party) can support this scenario? We are using SQL 2008 R2 Enterprise at each site, each site runs on top of VMWare with a Netapp filer. Would something like distributed caching help in this scenario as well?
What you are describing would be either peer to peer replication, or merge replication.  Peer to peer is masterless, while merge replication has a master, however you can use mirroring on the publisher and mirror the publisher to another data center so that if the publisher goes offline the workload can fail over to another site.
We are looking at hosting 3 globally distributed SQL Server installations at different data centers. The intent is that Site A will serve web traffic and data for a specific region, same with Site B and C. In the case that Site A data center goes down, looses connectivity, etc. the users of Site A users will fail over to Site B or C (depending which is up). Also, if a user from Site A travels to Site C they should be able to access their data as it was on Site A.
Is it the case that site A is always the "master" so long as it is available? Is that case that B or C will be the standby, or do you require two standbys? How are you managing the failover (not just for the DBs, for the entire application)?