I would advice you reviewing totally the format of your map and the way you handle layers. A good example is the Tile Map Format .TMX(Tmx Map Format documentation here) which can be used with the free and open-sourced Tiled editor(Tiled website).
I find it to be really flexible and convenient. Most of the platformers and RPG games I developp use this file format. Moreover, several code examples exist on the internet for almost every language. I even use it on a professionnal JavaScript project.
A solution to your problem would be that within your map class you create 3 std::vector> each the same size representing each a layer of the map. Then within your loadmap function every time yiu encounter the appropriate layer you push back the integers that represent tiles. Esentially, you have the basis for the system you want, you just need a cotainer for each layer. Then when it comes to rendering, within the nested for loop render the appropriate image for the layers in order from bottom to top. Or you can use a priority map and render in order of priority. If you need it i can always post a simplified snippet of code later.
How do I load Levels in my game, as in Layer 1 would be Objects, Layer 2 would be Characters and so on. I only need 3 layers, and they will all be put on top of each other. i.e having a flower with a transparent background to be put on grass or dirt on the layer below.I would like to Read From the same file too. How would i go about doing this? Any help would be appreciated. 
After dealing with similar project over the last 2 years (as an amateur game developper) I had to face the fact that this method was totally outdated, and somehow more complicated in time than others.
and this is how it draws the map. Also the tile sheet is 1280 by 1280 and the tilesizeX and tilesizeY is 64
In that case, I'd suggest you to make an array for every layer and make some cross-effect between them. Here's an example (just parts):
I didn't watch the code, but if I understood it well, you'd like to use layers on a similar way as they are used in platformers, isn't it?