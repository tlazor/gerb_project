Information for rotations of objects are commonly kept in an object known as a transform.  The transform generally defines the position, scaling and rotation of an object in the world space.
I am not familiar with the book itself, so I cannot say with impunity that this is what he is doing as in computin there is always several ways of doing things.  But if I had to hazard a guess this would be what he is doing.  And the vector u is simply the general rotation matrix GenRotMatrix from above which represents the objects rotation in world space.
The statement Vector u[3] is a matrix.  A common method in computing and programming for performing rotations is to use an array of vectors to represent a matrix that defines the rotation of the object.  In order to create a rotation matrix for an object you simply take a matrix of the same dimensions (in this case 3x3) and use the rotations in all three coordinate directions to construct a general matrix form.
Once you get into 3 dimensional space rotation matrices tend to look a lot more complicated than they really are.  In three dimensional space you can form a single rotation matrix simply by multiplying the rotation matrix for each coordinate directions like such: