Given their names, I would have computed only the score for a name in calculate_name_score and compute it's product with its position in calculate_total_score.
The code below does produce the correct result but takes no measures to catch exceptions if something breaks, e.g. when the download is not successful.
I see you like static typing, instead of writing it in the docstring you should take advantage of the new typing module and function annotation.
Even better, you can use the second (optional) argument of enumerate to avoid computing pos + 1 each time. You also don't really need the parenthesis around pos, name to define the tuple:
I managed to split a string, in which names in double quotes are separated by a comma and turn it to a list, but I'm wondering if there isn't any better or more pythonic way.
As far as the summation of int in a list is concerned, I'm aware that reduce from functools might be an alternative, but for my first contribution here, I decided to keep it (more) simple.
The docstring for calculate_name_score contains a typo ("sore") and should start on the same line than the '''.
You tend to build lists out of list-comprehensions as an intermediate step of an other computation (sorted, sum, ...). Since you do not re-use this list, it is more memory-friendly to use a generator expression directly in the last step. For instance:
I'm grateful for any improvement, regardless whether it concerns the structuring of code, naming, documentation, or anything you can think of.
Code looks pretty good. Nicely commented, well-structured, seems to do what it’s supposed to do. Just a few small suggestions from me:
When the control flow reaches the end of the file, the program exits with a status of 0. The same occurs when calling sys.exit(0) or sys.exit(None). Since main does not have a return statement, it returns None. Thus the call to exit is not needed and you can remove it.
Your program is neat: concise, readable, following conventions and well documented. Good job. Everything I’ll say, except for sys.exit is more or less nitpicking or subject to personal taste.