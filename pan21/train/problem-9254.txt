If you have MaxClients set too high, your webserver will start thrashing and swapping. When this happens, each request will take longer to process and you'll end up compounding the problem.
If your site gets slammed with more than MaxClients worth of requests, you shouldn't end up swapping. Additional clients will sit in the socket queue until a worker becomes available. If it takes too long, the server will time out. If the queue is too long, they'll get a connection refused.
If you're not expecting a lot of traffic, make sure you monitoring system is checking the number of running apaches. If it goes high, try and work out why.
I try and figure out roughly how big each apache process is, then figure out how many I can fit into memory reasonably -- that's my MaxClients setting.
All in all I'd probably leave MaxClients alone and make sure StartServers was 25 (or whatever would support your normal load) rather than 5 so that your server is ready to handle production traffic as soon as it comes up. Then I'd alert on threads over 50 or whatever seems "too high" for your usual load as that might indicate a poorly performing backend or attack on your site.
Unless you're suffering any problems, I see very little reason to lower MaxClients. If anything, you'd usually raise it from the default if you were getting a lot of traffic. 
In your setup nginx is handling all the end user connections and Apache is basically an application server. As long as you have enough threads to handle requests you should be fine. Threads should only grow to 150 if you need that many else it'll start at StartServer 5 with MinSpareServers 5 if you've kept the default. Since it's a quad core machine 32 or so threads is probably the most you'd need though that depends on how much latency or blocking happens while Apache is waiting on your backend.
Set MaxClients to a value just below the level at which your machine will run out of RAM (assuming it's a dedicated web server)