My recommendation to you would be to set up a testing CA, and install the testing CA certificate only on the computers involved in the various test stages you have.  Then, issue the application certificates from that CA instead of making self-signed ones.  You will save all kinds of time.
Has anybody else experienced this?  Are there any workarounds (other than using proper certificates, using a different browser, or not using HTTPS)?
As for why Chrome is doing this, there could be a number of reasons.  For example, if the host in the URL changes during some request, that would cause it.  There might be a bug (or misfeature) causing it to require the certificate exception be separately asserted in each context it is required in.  It could be something else too.   But, you will find that with security considerations being more and more the focus of browser development, and the common understanding that unauthenticated encryption is insecure, using certificates that don't correctly validate will cause all kinds of subtle little problems.  Make a CA.  Your test will be more realistic and you will have less pain.
Recently, we've been experiencing an issue with Chrome where Chrome appears to "forget" that we've accepted the exception, and we have to accept the exception again.  And this happens often enough that it'll occur in the middle of clicking a "submit" button, which breaks other things in our product.
We have a set of internal (dev/test/QA/ORT/preprod LAMP servers that we use self signed certificates for.  Normally this isn't a problem - we just click the exception ("Proceed to w.x.y.z.(unsafe)") and continue on with our day.