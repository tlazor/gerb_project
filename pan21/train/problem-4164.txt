So you can indeed have an AUTO_INCREMENT column in a table that is not the primary key. If that makes sense, is a different topic though.
Having multiple auto_increment columns in the same table seems even odder.  The two columns would have the same data-- they're being generated by the same algorithm and being populated at the same time after all.  I suppose you could come up with an implementation where it is possible for them to be slightly out of sync if there were enough concurrent sessions.  But I can't imagine how that would ever be useful in an application.
As XL says, it isn't limited to just primary keys. It's a potential limitation that you can only have one such column per table but the best workaround is to generate as many numbers you need in another table and then insert them where you need to.
In fact the AUTO_INCREMENT attribute is not limited to the PRIMARY KEY (any more). It used to be so in old versions - definitely 3.23 and probably 4.0. Still the MySQL manual for all versions since 4.1 reads like this
I should also mention that an AUTO_INCREMENT column should always be an integer type (technically a floating point type is also allowed) and that it should be UNSIGNED. A SIGNED type not only wastes half the key space, it can also lead to huge problems if a negative value is inserted by accident.
If you want a column to be an auto_increment, by definition, you are not storing meaningful data in that column.  The only case where storing non-meaningful information makes sense is the special case that you want to have a synthetic primary key.  In that case, the lack of information is a benefit because there is no risk that someone will ever come along in the future and want to change the data because some attribute of some entity changed.  
Finally MySQL 4.1 and later defines a type alias SERIAL for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.