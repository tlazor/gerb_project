However, even if blurring the cubemap is the right thing to do (which it may well be—I just don't understand why), it sounds expensive, especially considering the blur ought to be done in angular space, across the cube edges and corners, and is non-separable.  But on a small enough cubemap it could be OK.  The open-source CubeMapGen tool can do this sort of thing—it doesn't have a Hanning window setting, but it has various other blurs you can apply.  It's not fast, though.
Hmmm.  With regular Fourier transforms, window functions like the Hanning window are used to isolate a snippet of a signal (such as a 128-sample snippet out of a continuous audio signal for instance).  Multiplying the snippet by a window function before taking the Fourier transform can improve the ability to distinguish different frequencies in the resulting spectrum.
However, I can't make sense of how this would apply to spherical harmonics.  While they're a spherical analog of Fourier transforms, it doesn't make sense to me to apply a window function, because you're not snipping out a portion of a larger signal; your input is a cubemap that covers the whole sphere of directions.
Also, the article seems to suggest blurring the cubemap using a Hanning window function as the blur kernel, before projecting to the SH basis.  In the usual use of window functions, you multiply the signal by them, rather than blurring (convolving) with them.