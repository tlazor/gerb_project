To generate the main path, and algorithm similar to Spelunky's makes a lot of sense.  Limit the options of which paths you are allowed to generate to ensure a legal path.
The basic approach is to ensure connectivity between rooms in a path until a suitable distance is hit.  Every other room can be totally random, or an algorithm can be applied to ensure there's a path from every room to the "main path" from start to end.
Once you have a full main path, you can then fill in the side rooms and ensure connectivity.  If you assign the main path rooms a unique "group" ID of 1, you can then assign each new room you create its own group ID (+1 to last group ID) if it has no hallways to existing rooms.  If the new room does have a hallway to an existing room, use the ID of that existing room.  If at the end of the process you have any rooms with IDs other than 1, they form a cluster of inaccessible rooms.  You can then randomly pick any room in that cluster that borders another cluster and connect them, then assign all the rooms of one group with the other's (always picking the lower/older ID of the two).  Repeat until every room has an ID of 1.  This ensures that all rooms are connected while keeping the assurance that the main path is still connected, creating dead-ends.  If you want to allow loops or such then you can increase the number of hallways you create when isolated groups are detected.
In particular, you could find a spanning tree (using any of these algorithms, for example), and then add a few extra connections if you want loops as in your example above.
This problem reduces to finding a spanning subgraph of your room grid, so any spanning subgraph algorithm will work. This is a well-solved problem, and there are many super-fast algorithms to choose from.
It's kinda boring the way it is with all the rooms connected. I want it to be more of a randomly generated labyrinth, where every room is accessible like so:
How should I go about doing this? I'm not too worried about the speed, as long as it's not ridiculously slow (Some levels will have 100+ rooms).
And often some rooms have no hallways at all. I tried saying each room must have a minimum of 2 hallways, but it still doesn't fix the problem that sometimes there an inaccessible areas.
One option you could try is using a maze generation algorithm: http://en.wikipedia.org/wiki/Maze_generation_algorithm