All-capital identifiers are normally used for macros. It's always best to follow conventions. When defining a new struct, I recommend this pattern:
Now review this.  Is the right size allocated?  Yes, other code does not need to be consulted.  This style of coding is easier right, review and maintain.
Review the following code.  Is the right size allocated?   Maybe. To be sure, one needs to review other code for the declaration of temp.
With functions that do not alter the value of objects pointed to, consider using const.  It allows for some optimizations and conveys code's intent.
Your function display() cleverly uses recursion to display all the elements in the stack. However, without any optimizations enabled, if your stack is very large, this will actually cause a lot of real stack space to be used! With optimization enabled, the compiler will most likely perform a tail call optimization, but in this case you can easily rewrite the function as a loop:
You can also go for a hybrid approach: have struct NODE contain a fixed number of ints, say 8 or 16, and only allocate another struct NODE when the previous one is full.
Your functions pop() and Top() blindly dereference the pointer top. If you would call these functions when the stack is empty, your program will crash.
You are wondering whether this is the most efficient way to implement a stack. If you store ints, then the overhead of maintaining a linked list is quite large. Another option would be to keep the integer values in a dynamically allocated array. That way, the only other piece of information you need to store is the size of your stack. The drawback of an array is that if you grow the stack, you have to grow the memory for it, which can be expensive, but if you do this in a smart way the overhead will probably still be less than with linked lists.
This variable is effectively a private variable that you shouldn't access directly, only via the stack manipulation functions that you created (push(), pop() and Top()). Already there is the issue that it has the same name as the function Top(), and while C is case-sensitive, this solution is not pretty. Rename the function Top() to top(), so it matches the other functions, and rename the pointer top to something like stack_top or top_.