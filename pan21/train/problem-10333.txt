The Linux kernel is much more of an issue, since that's where your drivers go - the act of linking closed drivers to it theoretically either makes those drivers covered by GPL (if you own the copyright), or makes you completely in violation of GPL and unable to distribute your work legally if you don't. That means that you are probably going to have to give up key hardware details with any embedded linux implementation.
Are there more liberally licensed (BSD, MIT or at least LGPL) analogue of Busybox for developers of closed systems?
The rest of your "secret sauce" should be safe - the standard userspace programs are a non-issue, they end up being basically the same everywhere. Your custom applications to make your product work end up being entirely your creation, linked against libraries that permit linking closed source code.
Busybox seems to be sort stumbling block for vendors that want little embedded linux. There are even lawsuits regarding Busybox.
Disclaimer: I am not a lawyer. This answer really needs legal expertise, I've given my best effort to present the information, but it's not legal advice. Get a lawyer who understands software licensing and IP issues.
They have the same stumbling blocks with the kernel itself, so it shouldn't be an issue. GPL isn't hard to comply with - if you distribute binaries, you have to distribute corresponding source, or offer to do the same, and make good on that offer. You don't however have to distribute all your work - typically, you won't make changes to busybox itself, so it's as simple as putting up a copy of the tarball you built busybox from on your site.
TL;DR version. The risk to closed systems is in the kernel, not busybox, because the kernel reveals hardware interfaces. Busybox reveals almost nothing because it tends to be used in a stock, or almost stock form.