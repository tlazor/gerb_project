You need to profile your application. IIS can serve lots of requests a second without any serious optimization, and it's unlikely you'd have changed any default settings (right?) already, so... that leaves the app. Or the App framework (.Net, right? got compilation debug=false set already?)
Look at the web logs - are you seeing more requests than you think you should? (It's surprising how often the answer is "yes" when looking at performance optimization). To the time-taken results indicate that yes, the server thinks performance is slow?
Yes, all the things you describe should lead to a faster experience. That they didn't suggests... (jarring chord) that it's not the platform that has the scalability issue.
If your pages were only taking milliseconds to load before then they are probably taking 1 or 2 milliseconds less now. Just because it isn't noticeable to the human eye doesn't mean it's not happening.
Of course there's also the difference in performance between how fast the pages load and how many concurrent requests the server can handle. You may find that even if the server seems to be responding the same it can take more simultaneous users.
As you're on IIS 7 now, my suggestion is that the first place you look is Failed Request Tracing (install the Tracing component), and then hook up a rule that targets any response code (100-599), get the FREB log and look at where the time is being spent (the Compact view is good for this). If you see a module taking a disproportionate amount of time, investigate it.
If your application is a basic CRUD app then adding more processor and memory probably wouldn't make a difference because that's not where your bottleneck is. I'd have expected moving the DB to the same machine to give you a bit of an increase but again this is down to how you measure it.
The thing is, if updating hardware has no effect - and it looks like a serious upgrade - you're not hardware bound. You probably never were. Asking for "general speedup tweaks" is not what you need - you need to measure, change, test, iterate. Once you identify the cause, the solution is simple. But you're not there yet.
First of all we need to clarify what you mean by no improvement. The key thing to remember with performance optimisations is to measure.
If that doesn't provide enough depth, look at either instrumenting the app, or hooking up a profiler to it, to determine where the time is being spent.
My advice would be to use performance counters to measure server load, analyse the IIS logs to check page response times and find where the problem is. 