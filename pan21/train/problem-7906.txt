Second, just downcast. "A lot of people" can dislike it all they want, but they're wrong. It's perfectly valid when used in the appropriate circumstances. Just about every engine with a component model similar to yours end up with functions like these on their core game object type:
and then an entity class that holds the components and is able to return a specific component for manipulation
The problem that I'm having with this approach lies withing the act of getting a specific component. Let's say I want to get a pointer to the velocity component. I can't just have whateverEntity.getComponent(Types::Velocity); because the method returns a Component and not a VelocityCom. I thought about casting the Component pointer to a VelocityCom pointer but it seems that a lot of people don't like the idea of downcasting. So my question is what is a good way to get a specific component in an entity component system? Is downcasting okay in this situation or should I change my implementation to where I don't have to?
First, returning a unique_ptr makes no sense. In your design (which is not an ECS, btw) a unique_ptr expresses ownership. The entity owns the component. If you return a unique_ptr then the entity must necessarily give up its ownership of the component. You don't want that.