Don't compare booleans. 11 times I see where you use == true, or == false. With proper names and some forethought you should be able to make the if statement read a bit more in English. for instance by just renaming parabola to isParabola your mind automatically thinks in terms of booleans. 
each object should do only 1 thing. It should do it well, and should be tested to show that it can do it well. A byproduct of a object that does one thing well is that it is easy to test. a very simple example would be taking the method getSqrt and making a class that does just that!
A quick note about your JButton array button, and your string array buttonString. I would probably restructure the majority of the code, but a quick and easy way to fix what you have it read a bit better would be to possibly to make a hashmap of  so you could say if ae.getSource() == button.get("=")  that still isn't super nice, but atleast I don't have to count the index of buttonString over and over again.
There are some other nitpicking things I could do that the IDE picked up on, and some are legitimate. but more to your question at hand. How do you make things more OO. Kinda of a loaded question, but in general having a single class for an entire program screams non-oo principles. There are TONS of books, and papers, and blogs about the subject. Reading up on some of them would help tons so I'll only touch on a few things and bother me the most.
writing unit tests is getting to be very important. Employeers are looking for people who can write tests and use them. The above can be run in about 400ms. (and even if I add more tests it will still take about that long because the majority of that time was getting the JRE up and running) You may think that writing tests will slow you down, and at first you will be right. However once you get the hang of it and start doing it well you'll ask your self, how can i test this class BEFORE you even started writing it. The whole topic of tests is large, and there are some very vocal proponents of it offering the world. I believe it to be very worth while.
Unused methods/variables. Some IDE's can tell you if you are no using a method or a variable. Listen to it. This is especially important for fields. 6 fields are unused: x, parabComplete, frame, x1, x2, and countEquals_quadratic. 2 methods are unused: quadraticFormula, and var. You have 2 unused variables 'spaceFix' on line 312, and c on line 483. (I used the IDE to give me those, so the line numbers might be slightly different on your machine)
but even more important I can create a test for SquareRootOperation to make sure that it works as desired.
I'll start with the basics and work my way up. first... If you are using an editor or IDE(IntelliJ, Netbeans, Eclipse) that has the ability to re-format your code, use the format code feature. This keeps things consistent, and a little bit easier to read. Your code wasn't too bad in this regard, but IntelliJ complained about a few things.