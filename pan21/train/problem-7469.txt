You can still use constructs like for(String value : csvRow) to access your data, and if you need the finesse of the Collections API, you can always use Arrays.asList(csvRow).
If you're looking for NullPointerException protection, you can run Arrays.fill(csvRow, "") first to ensure that all indexes return an empty string unless otherwise populated.
Have you considered that ArrayList could be a little overkill?  If your list will always be a defined length, you could use a String[] to hold your data.  That way, the default value is always null and you don't have to worry about IndexOutOfBoundsExceptions.
You don't need to work around the specifics of which columns will always be there and which won't. The database row you get back has some values and some nulls. For a value, you insert that value into your CSV row. For a null, you insert "". I haven't touched Java in a while, but what you want will look roughly like:
Your createList method looks fine to me. There's only one thing to improve: the list returned by Collectors.toList does not guarantee anything. It might not be modifiable. Therefore you should use another collector, the one to which you can pass ArrayList::new as argument. (I forgot the exact method name.)