The principle issue with the BEAST attack stems from initialization vectors being easily predictable with TLS 1.0 and below.  To effectively mitigate this, the client and server must agree to use TLS 1.1 or 1.2.  Google's architecture has supported TLS 1.2 for some time.  The remaining issue was for clients to update their systems to support 1.2 as well.  As stated by @Michael Hampton, the most effective way in this scenario to mitigate BEAST is to update clients as Google already offers TLS 1.2.
The other option is for servers to limit accepted TLS connections to >1.0.  This may work but has the downside of potentially excluding a significant portion of the client-side population.  With the current App Engine architecture, there is no way to limit TLS support to >1.0 for a specific application.  If you would like to see this feature implemented for App Engine in situations where security is critical, please file a feature request on the Google App Engine public issue tracker and post a link to it here so that others may support it as well.
In the meantime, if security is absolutely critical, you can create your own application front-end with Compute Engine instances (with public IPs) and have them forcefully negotiate TLS >1.0.  This is possible though it would involve re-implementing a significant portion of App Engine's existing architecture, namely the TLS endpoint and load balancer.  This also risks some performance bottlenecking depending on traffic to your application and your implementation.
If top tier security is not an absolute, your best bet would be to advise users of security vulnerabilities if you detect they are using systems known for not supporting TLS >1.0.  Application aside, security over the wire as a whole is better improved with global movements towards safer protocols than with exclusivity.