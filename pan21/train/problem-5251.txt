I see from the man page that /sbin/nologin prints a message to the user saying the account is disabled, and then exits. Presumably /bin/false would not print anything.
I have often heard it recommended that a user account should be disabled by setting its shell to /bin/false. But, on my existing Linux systems, I see that a great number of existing accounts (all of them service accounts) have a shell of /sbin/nologin instead.
Regarding your FTP question: Yes, you are correct in that having the shell set to /sbin/nologin will allow users to login to FTP while /bin/false or /bin/true will completely prevent the user from logging into any service. 
As you know /bin/false is not a shell. They way it works is that it returns false which logs out immediately after the binary exits. Note that /bin/true would achieve the same effect.
What is the difference here? Which one of these should I use to disable a user account, and in what circumstances? What other effects does a listing in /etc/shells have?
Therefore, /bin/false or /bin/true is best to prevent a user from logging into any service, while /sbin/nologin will still allow users to log into services other than SSH or local console while providing feedback to the user that the account is inactive and is best used when only SSH/local console need to be locked out.
After doing some research on this, the method you use depends on what you have to lock out . If a user logs in with this set to the shell then they will get a message displayed to the effect of This account is currently unavailable. Note that you can change this by creating the file /etc/nologin.txt at least on RHEL derivatives.  
The man page says that FTP will disable access for users with a shell not listed in /etc/shells and implies that other programs may do the same. Does that mean that somebody could FTP in with an account that has /sbin/nologin as its shell?