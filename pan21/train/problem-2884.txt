None of these worked for me.  I found that the only way I could get my UDF to calculate was to add the code below to the worksheet.activate event and point the focus to another sheet on open.  Then when I clicked on the tab to the main sheet it worked. 
An User Defined Function can be marked as volatile by itself, forcing the recalculation every time something changes in the workbook.
If you call it like =test(INDIRECT(ADDRESS(ROW(B1),COLUMN(B1))) it is functionally equivalent, and will update whenever A2 changes.
=test(INDIRECT("B1")) will also work and may be cleaner to understand for this example, but because "B1" is a string you won't be able to copy the formula across new values. 
I hit this while hoping to update all user defined functions whenever an ActiveX textbox was changed even if they didn't affect linked cells which were used as inputs to the UDF. By accident I discovered that including any indirect cell reference in the function call appears to make it run whenever (seemingly) any other cell is edited. Presumably this is because excel has fewer guarantees about what it can trust to be unmodified when an indirect modifier is used. This is similar to Twisty Impersonator's second answer but adds less cruft to your vba code and formulas (so long as as least one range is used in the function).
Format changes (which includes Color Changes) are not considered events worthwhile a recalculation in Excel. That is not related to user defined functions. Therefore, any format change will not result in a recalculation.
That is not arbitrary, but makes some sense, as normally format changes do not influence anything else, so a recalculation - which is expensive - would be wasted. Since Excel now allows VB to use format information and react to it, this can become an issue, as it is for you.
You might be able to set OnChange functions for all cells, and trigger a recalculation there, but a format change might just not fire this function either (I never tried).