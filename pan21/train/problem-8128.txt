One other thing I noticed, is the logic for the turns isn't accurate.  The columns and rows seem to get swapped.
The code doesn't recognize when the game ends in a draw.  An easy way to do so is to simply count how many free spaces are left.  Note that this is only legitimately a tie if the last move hasn't actually been a winning move, so as written, this should only be called after we check for a win.  This could be further improved by not relying on the calling function to perform this check.
When you have a loop such as while(true) it implies that the loop never ends, but in the case of your loop in main, the code actually ends when one player wins.  In the improved, code, it also ends if there is a tie.
Your Turn function does three things:  it gets input from the user, it validates the input and then it applies the turn to the grid.  It's generally better design to separate things so that each function does just one or maybe two closely related things.
One improvement you can make is to only use one set of routines for each player.  One simple way to do this is with a char array to represent each player:
When I changed your code, the Turn code is only responsible for getting the input, delegating the actual application of the move to a private member function named Apply:
User input is inherhently suspect.  Make sure that you always validate user input before using it.  In this case, consider that if the user enters a number instead of a letter, the code gets stuck in an infinite loop.  Worse, the input is not range-checked and could attempt to write to memory far outside the grid vector.  
C++ is an object-oriented language, and your code would benefit from being more object-oriented.  When you have multiple functions that all take a grid as an argument, this is a clear indication that the functions should probably be member functions and that grid should be an object.  Here's the class I came up with, based on your code.  Note that the constructor takes an argument which defaults to 3.  That's the size of one dimension of the square board, which can now be altered to be either the usual 3x3 grid (by default) or made any arbitrary size.  More on that later.
While your Win function is not incorrect as written, it is not flexible because all of the numbers are hard-coded. Consider that one might want a 4x4 or larger grid, in which it might be good to have a more general method for checking that doesn't have everything hard-coded.  