You'll also want hardware set up to talk to each other on a dedicated high speed connection between the servers and you have to maintain a shared storage share of some kind so you don't need to sync files.
The reason I said this isn't simple is because you may have a split brain situation come up. Make sure you google that and plan accordingly.
On Windows, the de facto answer is Microsoft Clustering Services (MSCS), which is included with Enterprise and Datacenter editions. On Linux/Unix, you probably want to be looking into Heartbeat (simple, but not super-configurable), Pacemaker (robust, but a bit more complex), or another similar system.
What you're looking at doing isn't necessarily simple to implement and takes some monitoring/maintenance.
That said, if you're using Linux, you'll probably want to google high availability Linux, which should point you to resources on configuring heartbeat software that monitors services on the servers and if one goes down it brings up the other server to take over. Once the other server comes back up, you can transition service requests back to the primary server.
If you don't want load balancing, all you need is a simple failover clustering solution which sends heartbeats between the cluster members and assigns ownership of the virtual IP that you'll be using to access the service. There's dozens of them out there.
Its benefits include truly tiny, concise configuration files and small code and system footprints.  You can have it up, running and verified in under 10 minutes.
I use pound (http://www.apsis.ch/pound) on Linux for this.  You can easily install it into a small appliance-style chassis.  From their website:
What you want is generally called a load balancer. Load balancers can either come in the form of an appliance, F5 Big-IP boxes for instance, or in the form of a load balancing application running on top of commodity hardware. One example of this is HAProxy, which coincidentally, is currently doing the load balancing for all of the StackExchange sites.
So if you don't want to take the balancer route, you'll have to dedicate some time and effort in running a cluster. I don't know much about Windows clustering, but if that's what you're running you'll have some options built into the higher-end versions of Windows for clustering services; I think it's in Enterprise and Data Center editions. You'll have to browse Microsoft's marketing drones site for more information on that.
I don't know of anything that's not a balancer as a hardware solution. You'll probably need to look at clustering, which means running a form of fencing and heartbeat so that the servers monitor each other.