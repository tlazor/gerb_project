When doing upgrades, take the outage.  Put a flag in your config file so that you can take the site offline quickly and easily while the database changes are being done.  Or write the app and the changes in such a way that the changes don't take the site down, allowing the site to keep working while the changes are made then put the new website on top of the changes.
However, sometimes we make releases that involve updating the DB. (We run scripts and stored procedures that add, remove or update data on the DB.) These operations sometimes require about an hour. Is there a way we can handle this in some way so that we don't have to take the application down during this period of updating the DB?  
We are thinking of shifting our Java application to a 2-3 node load-balancing cluster. We have frequent application feature additions/bug fixes (and hence new releases). Whenever any database change is not involved in a release, we could probably update the Java application by taking one node at a time from the cluster for maintenance and deploying the newer application on it.
In short, no you can't run the SQL Server database on two servers and split brain them when doing updates.  If you did, the SQL Server wouldn't have a way to get the two systems back in sync.  Once you split them you could have the same row changed on both sides, or schema changes, etc. which would make it impossible to get everything back together.
I think there is a fundamental problem here though with "clustering" because what you are talking about isn't really clustering, you are really talking about something that is more similar to transactional replication (to be able to get the "load balancing" you are talking about).  With clustering, you only have one active node, unless you have multiple SQL instances on a single cluster, but this would require reprogramming your application to handle the separate instances, and it wouldn't really accomplish what it sounds like you want.
I am new to clustering (and more so to SQL Clustering). So pardon me if the above paragraph amuses you or sounds awkward.
The real question is do you need to be able to write to the database from your application while the updates are being done?  If you can deal with read-only, you could take a snapshot of the database, run your application in read-only mode off the snapshot, apply your updates to the actual database, then switch the application to use the real db once everything is finished.
Can any type/configuration of clustering help in this situation? Is any kind of solution possible where in we have the DB on 2 servers (with mirroring or something) and we take one server offline for our update process and when update is over, we bring the server back online and it is updated with the changes that took place since it was taken down from the other server?
TomTom's mention of atomicity is the real problem though when dealing with the kind of change management you are talking about.  If you keep one of the instances in a writable mode while upgrading the others, you can have inconsistent data between instances when they are all upgraded since your scripts change code on the way to the new release.