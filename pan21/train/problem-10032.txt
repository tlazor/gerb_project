My wish is to monitor HTTP exchanges between my server and a browser. At present time, I use the localhost because I'm developping the app. I installed and used tcpflow and found it quite useful but the body of the response is encrypted (no https, I beleive it is gzipped if I refer to the header). Here is the exchange from tcpflow -i lo -c -e:
Gzip and probably deflate too should be transparently handled by wireshark, so that you can see the decoded headers there. An the httpflow tool coming with the Net::Inspect perl package can also decode the gzip and deflate payload for you and can also be used to extract HTTP requests/response pairs from a pcap file and save each of these pairs as single pcap file with payload already decoded.
I guess the header entries Vary: Accept-Encoding and Content-Encoding: gzip are the source of my problem. Is there any way to get rid of this scrambling and see the HTML code in clear? I mean a rather easy way? Actually, I will have no control over the browser that requests with Accept-Encoding: gzip,deflate,sdch. But for debug purposes, if the only way is the set the browser to request no Encoding/Compression, I can live with that.
Content encoded with Content-Encoding: gzip can be easily decompressed with piping the content through gzip -d. For deflate I don't know an utility but it can be done with some zlib programming. SDCH is no that easy because to decompress it you would need have access to the dictionary used for compression, which might be somewhere else in your packet capture or nowhere. 