I use this server from client machines (let's call one of them C1) to do an SSH reverse tunnel  by using remote port forwarding, eg :
Port forwarding can be globally enabled or disabled in sshd. This is done with the serverwide configuration keyword AllowTcpForwarding in /etc/sshd_config. The keyword may have the value yes (the default, enabling forwarding) or no (disabling forwarding):
if you do not trust the users to do something with your machine then you shouldnt allow them to login in the first place.
On S1, I use the default sshd_config file. From what I can see, anyone having the right credentials {login,pwd} on S1 can log into S1 and either do remote port forwarding and local port forwarding. Such credentials could be a certificate in the future, so in my understanding anyone grabbing the certificate can log into S1 from anywhere else (not necessarily C1) and hence create local port forwardings.
If I understand you correctly, your users have full shell access, but you don't want them to be able to open connections towards the rest of the net.
You can use it to deny outgoing packets generated by certain groups of users, thus disallowing any kind of port forwarding, not just the -L option of SSH.
It has a special module called owner (ipt_owner) which allows you to match various characteristics of the packet creator, for locally generated packets.  It is valid in the OUTPUT and POSTROUTING chains.
The "local port forwarding" allowed by SSH is just one of the possible ways to do that. Others include launching an instance of socat, netcat, or any other number of tools.
So I'm wondering if there is a way, so that I can forbid all local port forwards to write something like :
The best way to control outgoing as well as incoming connections in Linux is Netfilter, aka IPTables.
To me, allowing local port forwarding is too dangerous, since it allows to create some kind of public proxy. I'm looking for a way tto disable only -L forwardings.
anyone with login credentials can bring up their own instance of sshd, running on a random port and allow whatever they want, including -L local forwardings:
The syntax of these is the same as for the AllowUsers and AllowGroups options. [Section 5.5.2.1, "Account access control"] They specify a list of users or groups that are allowed to use port forwarding; the server refuses to honor port forwarding requests for anyone else. Note that these refer to the target account of the SSH session, not the client username (which is often not known).
It's important to realize that the directives in this section don't actually prevent port forwarding, unless you also disable interactive logins and restrict what programs may be run on the remote side. Otherwise, knowledgeable users can simply run their own port-forwarding application over the SSH session. These settings alone might be a sufficient deterrent in a nontechnical community, but they won't stop someone who knows what she's doing.
I also tried the following, this will only allow -L to SX:1. It's better than nothing, but still not what I need, which is a "none" option.