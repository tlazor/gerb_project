Create as many null sinks (virtual sound outputs) as you need, as described e.g. here. If you need to monitor the sound output of each, also use loopbacks to your physical sound output as described in the link.
Then use pavucontrol to move the output for all your program instances to a different null sink. Use any recording program you like, and record from the associated .monitor output if the null sink.
I have multiple instances of a Linux program running that outputs sound, (as part of a web app) and as such I need to record the sound output from each independent program process. (or PID) Obviously, simply recording my computer's sound output won't work since that would record all the overlap each process would create. This solution, while promising, relies on using a program's screen name to record the right program's sound output -- which won't work in my case since I'm running multiple instances of the same program. Any tips on going about resolving this problem?
Use Snapcast, 1 fifo per instance. Then you can connect a client for playing and a client for recording, to each server you want to play/record. 
When your Linux program (whatever it is) connects to Pulseaudio, you have also the option to set various bits of information identifying the program or the output stream. If you can do this (for example with command line options), moving the output to the null sinks will be easier. In the same way, if your program allows it, you can already instruct the program to connect to the right null sink when starting the program.