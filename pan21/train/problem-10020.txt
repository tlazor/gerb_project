You might also want to extract common set of tests that should be valid for both UndirectedGraph and DirectedGraph instead of having just separate test files.
I would throw illegal argument exception from addEdge() instead of returning false for self-loops. Same with getEdgeWeight() - if user forgets to check returned value that NaN might propagate through lots of code and it will be hard to track where did it come from.
I do a lot of graph-theoretic code, and, by now, I feel substantial need for data structures that can represent weighted graphs, both directed and undirected. Up till now, I was in a habit of writing a graph node type along with the weight function (in my prior posts, something like DirectedGraphNode and DirectedGraphWeightFunction). So, basically, my "graphs" were just silly Lists of DirectedGraphNode.
Now, I have this notion that each graph node is represented simply by an integer. For example, in DirectedGraph, a node with integer ID of, say, 123 is mapped into two integer lists: one for incoming nodes (parents) and one for outgoing nodes (children).