Anyway, once you find this/these file(s) delete them and update your system or uninstalled (as we did) if need to fill the security hole.
The php file (in our case) was uploaded to the images directory, especifically the folder that all articles has access to upload, in our case and this particular installation was domain.com/images/stories/.
If you have access to shell this is easier, otherwise check by the last modified folder, you will find a .htaccess file inside every subfolder. You basically will end up with some php file(s) with recent date and probably with executable permissions for public access (0606 or similar).
We start tracking down the files using its modification date and filtering by the most recently modified. We use the .htaccess files (recently modified) as breadcrumbs to find the source.
There was a security hole in one of our cms installations, in our case was an alpha version of joomla 1.6 used for testing that was left with out care... is irrelevant which alpha version was, there is a release and much secure version (1.7) now :P .
The hole was generated by the file/image uploading code. This part of the cms didn't validate anything so anybody can upload any kind of file (a php file in our case) and execute externally by calling the file.
If you try to download this code, your antivirus will pop up with a warning, in our case Avira display a warning for Trojan - Backdoor PHP/C99shell.B, so don't bother.
But if you are so curious then change the extension to something else and/or zip packed it to download it... or disable your antivirus for a second, but thats up to you.
This php code scanned for all apache configuration files (.htaccess) and add the rules you describe above. The code jump levels up one by one until it was unable to have read or write access, adding this code to any .htaccess file it found by level or creating it if didn't exist.
Event if you delete or replace the .htaccess files, these will be created or modified again (every hour in our case) by executing the php code.