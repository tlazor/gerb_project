I'm using a very simple model. To construct it correctly I need multiple calls to glDrawArrays using TRIANGLE_STRIP. If I switch to using just GL_TRIANGLES I could have just one call to glDrawArrays. Is this type of apporach useful, or is the overhead of an the call to glDrawArrays low enouhg that it won't make a difference.
A single call to glDrawElements with GL_TRIANGLES should be the most optimal in the general case - have a read of http://home.comcast.net/~tom_forsyth/blog.wiki.html#Strippers - strips are basically obsolete and have been for over a decade.
I will profile, but since I have only one card I don't know if my result will be indicative of the general case. (NOTE: I need to be ES2 compliant, so some of my options are limited).
B) If the vertices in your model isn't changing (for example: a lamp post, a landscape, a human character in its bind-pose that the vertex shader will animate), use a VBO
When we send data for drawing we can mark it as TRIANGLE_STRIP or TRIANGLE_FAN to reduce the number of vertices we have to specify. Now, does this actually improve the rendering speed on the graphics card, or does it merely reduce the amount of data that has to be sent to the card?
A) If your model is simple then you most probably won't need to optimize at all (what's your specs in polycount, target machine etc. ?)
In general, you should not be using glDrawArrays at all. If your model has repeated vertices, you'll get a lot more bang for your buck performance-wise from an index list. There, optimized strips or even triangles will be able to use the pre and post-T&L vertex caches. This means less memory fetching and less vertex shader execution.