Suppose I store my local machine's public key on a remote web server, and encrypted information (by my private key) I send to this server is intercepted by another party that also possesses my public key.  Does this not mean they can also decrypt my encrypted information?
The only use SSH makes of the public key is to determine the identity of the holder of the corresponding private key. About the only think you can do with an SSH public key is determine whether or not a cooperating authentication agent holds the corresponding private key.
If yes, does this mean I should only share the public key with the one party - in this case the server - which goes against my understanding of what a public key is for?  Can I have different key pairs on my local machine for different applications?  
You don't send information to the server that's encrypted with your private key. When you open a secure connection with the server, the software on the server generates a new symmetric encryption key, encrypts it with your public key, and sends it to you. You then decrypt it with your private key and use that symmetric encryption key for the data you send to the server. Quite apart from the security aspects, public/private key encryption is too CPU intensive to use it on all data transfers -- it's only normally used for encrypting other encryption keys or for digital signatures. 
My understanding (albeit limited) of asymmetric public key cryptography is that the public key is designed to be shared with one and all, while the private key is kept private.  