The second approach you should take is to limit the number of incoming SSH connections. Add an iptables rule along the lines of
You might also want to add two-factor authentication. This link https://www.digitalocean.com/community/articles/how-to-protect-ssh-with-two-factor-authentication describes the process rather well; basically you install the libpam-google-authenticator package, add auth required pam_google_authenticator.so to /etc/pam.d/sshd, install the Google Authenticator or androidtoken app on your phone, run google-authenticator on your server to set it all up, and restart the ssh service.  (This is actually generic TOTP (RFC 6238) and not associated with Google, nor does it talk to them AFAIK.)
As in @Jonathan Ben-Avraham's answer, the first thing to do is to disable password access and switch to public key only. Of course, that requires you to not lose the private key: save a backup copy someplace safe.
The idea is that you can (try to) log in five times, but then you're frozen out for a minute. This will not inconvenience an authorized user, but the cracker script which tries every password (or private key) that's floating around on the 'net, attempting to find a match, will be blocked quite effectively.