It sounds right in my head, but my execution went terribly wrong, and I don't like code dumping but this is a last resort: the important code is near the bottom in UpdateNetwork(), but I added some other parts that you can reference to if you need to
Packet delivery times won't be consistent, you can't count on them.  Thus any approach that uses them in the calculation is going to produce bad answers.
I'm working in an app with XNA 4 too. I'm just thinking: Can we use a database to control things like that? Some flags to verify which turn is? I don't know if XNA work with databases..
Each server tick, the server goes through it's list of updates and sends each player the most relevant input. Then when the client receives the update, it uses the information of how long it took for the player to send it to the server, plus how long it takes to get from the server. It uses this Tick amount to run the information through the player's update, and get a position.
The idea behind my method is that the client knows what tick the server is at, and knows how long it takes to get to the server and back. It sends it's input and position to the server with how long ago the input was put in, and then the server adds it to the list.
It's hard to tell from looking at this code but I had a similar problem in my networked game, where the player was jumping back and forth very quickly between two points. In my case this was caused by differences in the actual transfer time of packets from the server to the client. Even if you know the average server-client latency, you don't necessarily know the actual latency of an individual packet. So I wonder if something is getting out of sync here. You might want to create a class on the client that receives and stores the update packets, and then hands them out to your game loop on a smoothed-out basis.