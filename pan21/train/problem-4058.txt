The reason why this works in PostgreSQL is that the system catalogs are regular tables.  So creating a new function, for example, just requires inserting a row into the pg_proc table, changing the default value of a column just requires making an update to some row in pg_attrdef, and so on.  Since tables are transactional anyway, you'd almost have to go out of your way not to have it work that way.  (Lots of painful implementation details omitted here. ;-) )
The flip side of this is that this is the reason why major version upgrades of PostgreSQL are so painful.  Other products can presumably design their internal metadata structures with changes and updates in mind, and so there are no issues with upgrading to a new major version.  In PostgreSQL, there is no way to change a system catalog table to suddenly look like a newer version of a system catalog table, at least not while keeping the system online, because that would require access to the system catalogs.  Urgh.
I suppose, not knowing the source code, that other database engines use some custom internal structures to represent their system catalog information.  And so they'd have to put in extra effort, a lot of extra effort likely, to make transactional DDL work, and it's apparently not a priority for them.