It's not Apache's fault if you think "things should be" that are simply not possible (at least not directly, within Apache). The user change is done by the syscall setuid(). After root has called this function there is no way back. Exactly this feature makes this syscall safe.
You can use /etc/init.d/apache2 restart or service apache2 restart. Both of these indeed do a stop and a start, with some handling of possible errors.
Of course, the kernel could decide to change the user of a process. I don't know if there is any official way to do that. But only a root process could make the kernel do that. Apache would (sudo-like) have to signal to a privileged process that it wants its user to be changed. But considering how seldom this is going to happen I doubt that the kernel people are interested in implementing such a security relevant feature.
Are you absolutely positive that there are no other User or Group directives hiding in any other Apache configuration files?  Remember that the last one that gets encountered "wins".
I edit this file and change the User and Group, then do "apachectl restart" and... nope, the old User and Group are still in use (as confirmed via phpinfo). But if I do "apachectl stop" followed by "apachectl start" THEN it works. However, this sucks because I'm trying to write a bootstrap.sh script for Vagrant, and neither of these methods work in that context (I guess stop/start happens too fast, so while "stop" works, "start" does not.
It is imperfect, because I'd rather have it based on whether the "stop" actually completed (instead of just pausing for 5 seconds), but since this is a bootstrap script to set up a new server environment, it should be pretty reliable. If someone has a better answer though, feel free to give it. (Be specific though.)
In a perfect world, "restart" would do its job and actually reload the new values from envvars. Any ideas??
If your Apache is running as e.g. user www and you want it to run as wwwrun then Apache cannot fulfill your wish because of missing technical privilege to do so. If you restart Apache instead this problem does not occur because the running process is killed and a new one is started: as root. Being root it can change its user.