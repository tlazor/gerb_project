You're right that overflow will occur for large enough values of n.  It is possible to avoid overflow by using System.Numerics.BigInteger.  However, that adds a lot of clutter to your program, and is more tedious than you would probably like for a simple educational project.
I think you've missed an important point about object-oriented programming, which is that objects should keep themselves in a self-consistent state.  You've exposed Calculate() as a public method, and you expect callers to call Calculate() before fetching .Value.  That's an unfair burden on callers, and they may neglect to do so.  Rather, a better design would have the .Value getter automatically recalculate if necessary.  (The Calculate() method should be private.)  An even smarter design would continue where the previous calculation left off (rather than starting from scratch) if n has not decreased since the previous call to .Value.
Microsoft's .NET style guide recommends against the use of underscores or any Hungarian notation in identifiers.