When I part the Voltage to ensure not to put more than 3,3V to the GPIO, the difference in Voltage is not big enough anymore to reliably detect the change as logical 0 / 1.
I'd go for sample comparator. You can use this calculator to get exact values of resistors you have to provide, so it would switch properly. 
If you want to have 0 in case of 12.5V and 1 in case of 15.5V, then you need another circuit called Subtractor (http://www.electronics-tutorials.ws/opamp/opamp_5.html). The difference is 3V and Raspberry can detect this voltage as 1. It should not be exactly 3.3V. Maybe you will need some zener diodes for overvoltage protection.
Additional explanation is available on many blogs on the internet, for example http://raspberrypihobbyist.blogspot.com/2012/09/gpio-input-circuit_19.html 
If ringing the bell puts ~3V over the speaker (and I assume there's ~0V when it's not ringing), that voltage could be detected by the GPIO directly. Assuming the RPi and your doorbell have separate GND, you can just connect the GND of your RPi to the negative terminal of the speaker and the the GPIO pin to the positive terminal. If the voltage is AC (or you're not sure which terminal is which), you can use a diode bridge to rectify. Adding a zener for overvoltage protection may also be a good idea. So:
I am working with the GPIO, successfully connected a couple things already. Now I have the following challenge when connecting a door bell to the GPIO: 
First of all, check if it's AC or DC in there. If it's AC, you should make it DC using sample diode bridge or you might have unexpected behaviours or even burn some components.