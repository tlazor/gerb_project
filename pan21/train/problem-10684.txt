I would be compelled to write a helper that accepts a variable number of address fields and and returns true if all of the address fields are not null and not empty.
I would move this method on to the AddressCriteria class, because it is a little better to ask an object about it's nature than to ask it a lot of details to decide it's nature with.
I think @tomdemuyt in on the right track, but unfortunately confused himself due to ambiguous method naming.  Reading the logic in his hasFields(...) method, you'll see that it would be clearer to name it hasAllOfFields(...).  That's not what was wanted in the original question.
Finally, you could make the AddressCriteria class immutable, so that those properties can't change.  Then they get set in the constructor, and you could make this check once and keep a boolean field for isShortFormAddress.  
An AddressCriteria should know when its address is short so move this behavior into AddressCriteria is a good idea. Using @tomdemuyt code:
The second version reads better as English, but incorporating a negative sense into the helper method hurts its reusability, in my opinion.
A reasonable alternative to @tomdemuyt's answer would be to also change the class so that those getters will never return null, but instead return empty string.  I personally hate using null when a NullObject will suffice (like empty string).