It seems like the first question has a $O(n^3)$ algorithm (though this is also likely not optimal).  Assuming that there is a crossing, the key to finding it seems to be that the edges that must be found are those immediately on either side of the common subpath.  Therefore, we look at all pairs of consecutive pairs of edges.  There are a quadratic number of these.  If we find a pair of pairs of edges with vertices $abc$ and $def$ such that edges $bc$ and $ef$ are the same, then we follow the common subpath to the end and inspect the edges that leave it.  If they form a crossing along with $ab$ and $de$, then we are done, otherwise we go on to the next pair.  Following the common subpath is at most a linear-time operation, so the whole algorithm is $O(n^3)$.
This analysis probably isn't tight since the number of times a linear-length common subpath will be followed isn't linear in the number of pairs of pairs.  There should be only a constant number of those.  Similarly, if the length of the longest common subpath is constant, then we are okay in terms of the amount of time following common subpaths.  I would expect that the worst case arises when there is a single subpath of length $O(\sqrt{n})$ that is common to $O(\sqrt{n})$ subpaths.  Then there are $O(n)$ interactions and in each interaction $O(\sqrt{n})$ edges are being followed.  So even still, the number of edges that are followed is $o(n^2)$, and the bound is provided by the number of pairs.  Thus I would guess that the true bound for this algorithm is $O(n^2)$. 