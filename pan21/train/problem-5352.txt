They are far better equipped to find the problem than you are. A proper bug report can go a long way sometimes.
The dialog box is Windows notifying you that the program died in an uncontrolled way whilst it takes a crash-dump of the program to be sent to the Windows Error Reporting Service. These crash dumps can be viewed by the developers of the program to try and fix the bug.
But what if they tell me their software is perfect, I'm the only one with that issue and generally, it's my fault?
There really is no way to list out the many different possibilities of why the error will occur. Your best bet to 'fix' the problem is by checking with the software developer, and ensuring your system libraries/resources are fully up to date and compatible with the application vendors specified requirements. 
What did the application actually tell the operating system that made the operating system go "You need to shut yourself the f- down!"?
Of course, the problem doesn't have to be in the application itself (so the programmer is off the hook). It could be in Windows or it could be in the MSVC runtime, or the .Net runtime or your video card drivers or whatever (which is why you're always told to install all updates before contacting support).
Should the application in question write out any log files, those can be gold in search for the cause of your application issue. Read them and discuss possible error messages here.
If that makes you go "Well, that's pretty unlikely to help me solve my issue.", then you're probably right. While it can be fun to try and track down an issue like this for certain people, it's usually the job of the person who wrote the faulting software.  
If all else fails, turn to Process Monitor. Process Monitor is a tool that logs all communication between an application and the operating system (so to speak). So in the resulting, captured data, you could see exactly what function the application called that resulted in the unhandled error condition. This could be something trivial like trying to access a non-existent file or registry object. But finding that one call on the log can takes ages and if you have no experience with software development, you'll most likely not get very far with this approach.
The Windows event log will surely contain some information about the crashed application. If it is actually a .Net application, you might even get lucky and might be able to pull a call stack from the log (which would be very helpful for developers).
This isn't an indication that you've been attacked by a virus. It's an indication that the program is faulty. The only solution is to send the crash dump to the original developer of the program (via WER) and update to the fixed version once the bug has been fixed.
Alas, developers and software engineers cannot account for each and EVERY single thing that might cause a program to crash unexpectedly. Yes, there are some programs that have "great" error handling methods which throw out some random number that means 'something', but in order to even get that, that means the developer has accounted for THAT specific error.
Well, now the only thing left is that the application in question is faulty and the programmer is no off the hook for this one (A-HA!). So it's the problem of the author of the software. So contact them and ask them if they could help you out and fix this issue.
Try using a program like Soluto which detects crashes and offers up advice on how to fix the problem if it is available. Soluto uses crowd sourcing to detect crashes and offer up fixes.
This is always a response to the application doing something that mean that the program cannot safely continue.
First off, the error (Some program application) has encountered a problem and needs to close. We are sorry for the inconvenience. is a completely generic Windows error message. If it where easy enough to say '(Some program) stopped working because the developer didn't account for Error ID10-T on the memory stack', then the generic error really wouldn't be needed!