But I would worry about performance a bit. For each SELECT query you want to perform, you actually have to perform 4 queries now.
The verifyItemId looks to be the most expensive - it fetches all items in the table -, but is luckily also completely unnecessary. You use prepared statements for the id, which is enough. If you do want an additional layer of security, you could additionally filter your input (for example, you know that ids can only be integers). You could use an input class like this for example.
I would go with the first approach. It also gives you an additional level of security as you can filter more strictly. For example, you may not want a user to be able to read out the user table. Or if you do want to allow that, you definitely do not want them to be able to read out the password column (although this filtering likely has to take place at a higher level).
For the table and column check, this is a bit more difficult. Ideally, tables and columns should not be user supplied. But I have seen both in practice, so as defense in depth, it's not a bad idea to filter this at this level. I could think of two possible performance improvements:
Yes, it's safe (against SQL injection; if you give users complete control over table and column names, they may read data you do not want them to read).