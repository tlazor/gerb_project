The Race object stores all the characteristics of any particular race of aliens on the colonies, such as their mining aptitude and their reproduction rate.
I considered implementing Population as a struct stored inside the Planet class, but that seemed problematic if I needed to move the population to a transport ship and then to a different planet, or add new groups of population during runtime.
One of the most important elements of the game are the various planets and the population groups on them. I have looked at Unity and Amazon Lumberyard before settling on Unreal Engine 4 to build the prototype on, but I am not sure what the best way to store information about the populations and planets are.
For now, planets are a class of object and store their characteristics as variables (no issue there). The problem arises with the populations, as each distinct group of population will have unique characteristics (i.e. species traits, faction alignment, education level) and game objects that they have possession of (weapons, armor, industrial machinery, trade goods).
What I use is a Dictionary<Race, long> as a property of my colonies to store the population of those colonies. I don't know what you call a Dictionary in C++, but in Java it's called a Map, in Python it's called a dict, and in Perl it's called a hash.
I am in the process of building out the prototype for my space strategy game, which is focused on empire building type gameplay.
For Faction X, on Planet Y, what is the product of their population's (Education x Industrial Machinery x Planet Mineral Rating)?
What would be the most efficient way to tie the objects owned by the population to them, and to tie the population group to their planet of residence, such that I could compute things like:
If I want to put some population on a transport ship, then, I simply deduct it from the associated dictionary entry on the colony, and add it to the dictionary entry of the transport ship's population storage in its cargo (first checking that the dictionary entry exists and creating it if necessary).