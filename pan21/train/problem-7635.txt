Changing model attributes within an click handler is okay and very common, but I would suggest keeping your rendering code away from event handlers. Backbone supports event mechanism that can help implementing Observer pattern, so it's unnecessary to explicitly write renderOne() everywhere after you change the model.
I find that things work better when views only touch their own el and leave it up to someone else to put that el into the DOM. In your case, that would mean that you shouldn't do this:
Back to BookListView. A view's initialize will copy the collection property out of its options just like it will copy model:
Besides, View provides remove() function to reclaim itself (remove HTML snippet from its parent node, stop listening to the model, etc), but it is the developer's duty to decide when to reclaim. A common time to reclaim View is after the corresponding model removed from the container, or destroyed. You can refer to Backbone's documentation for these special events.
Furthermore, I notice that you're not using var to declare your variables. That means that you are creating accidental globals all over the place and that's never a good idea. Always use var to declare variables so that you can control the scope.
In your case, this.model.set({likes:++likes_count}) causes the model sending a "change" message to all views that concerned with it. You can register BookView's renderOne() function to this message. Then, if the model changes, re-rendering function will be automatically called.
Also note the second argument to this.collection.each to make this inside the iterator function the parent view.
Notice that I have removed collection: ... from the view declaration. The collection and model properties should be instances and they should be bound per-view-instance so you almost never want collection or model to appear when defining a view, you only want to see those in the view's argument list when you instantiate a view.
First of all, Backbone views already have a cached version of $(this.el) in this.$el so you should use this.$el instead of $(this.el).
Now we don't need renderOne in BookView at all, you can bind render to the appropriate event. You can also leave the re-rendering up to Backbone. When you say this: