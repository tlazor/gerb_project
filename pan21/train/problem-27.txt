For most common uses, setting up a secure link requires that the server have something to present to the client to identify itself.  This requires a key, used for doing crypto math, and a certificate, which is public.  The certificate contains information about the key, so that only a system with the key can prove to a client that it is authorised to use that cert, and it also contains information about the identity of the system, such as hostname.  This information is then signed by "another" certificate, which is the "Issuer" in the relationship, and that issuer is known as a "Certificate Authority" (CA).  Their cert should be (directly or indirectly) trusted by the clients.  There's then a bunch of widely accepted CAs, accepted by most browsers and mail clients.  You can bypass this step for testing with a self-signed certificate.
Various sites will tell you how to create keys and certs; several years back I wrote: http://lopsa.org/SSLIntro
(This ignores cert-less operation and a whole bunch of less common modes; the above, using something called the X.509 PKI (Public Key Infrastructure) is by far the most common.)
So, at a minimum you generate a (PEM format) key and certificate and configure them in --ssl-key and --ssl-cert.  You can also place the a whole bunch of CA certs together in a file, if you're going to require "client certificates", whereby both sides of the TLS session have to present certs.