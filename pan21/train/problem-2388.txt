This program produces invalid HTML.  This generally isn't a problem, as the browser will add the missing tags.  However, it is a bad practice to rely on this.  
If your code is doing something clever (or something that fixes a previous mistake), comment it.  That saves the next person to edit the code from having to be even more clever to figure out what is happening.  
In C style languages like PHP, it's easy to do an assignment (=) when you meant to do an equality check (==).  To guard against this, some people put the value side first ( 0 == $i ) rather than the variable side ( $i == 0 ).  This causes the compiler to throw an error rather than silently doing the assignment and then checking if the assigned value evaluates as false.  
Replacing $i with $index makes sense if the variable is used to index an array.  Here though, that's not what it's doing.  Either use the more standard $i or come up with a truly descriptive name.  In my opinion, $i is more than enough here.  
Define the start and end boundaries at the same point in the code.  I did so in the for statement here.  You could also have moved both out of the loop and had something like 
Some of my changes are purely stylistic.  Code that doesn't use them is perfectly valid.  I encourage you to think about how you want your code to look.  
Note that to modify the parameters of the question, you have to modify the code.  It's often better to allow the code to take input.  That allows people who are not programmers to use your code.  A program that handles user input would thus be better.  For PHP, you'd often do this with GET arguments and could offer an HTML form to enter them.  
The other answers have concentrated on an algorithmic alternative.  I'm going to just take the algorithm as given and concentrate on the code.  This is how I'd write it:  
In PHP, if you are dealing with a single value, []= is faster than array_push.  If adding a list of values, stick with array_push.  
CamelCase does not generalize well to other languages.  Consider using underscore_delimited variable names instead.  These are more easily recognized by non-native speakers.  This helps if you are working in a global context, like a multinational company or an open source project.  
If code immediately follows a comment, the presumption is that the comment explains that section of code.  If the comment is a more general headline (e.g. the description of what the entire code is supposed to accomplish), then it helps if you separate the comment from the code with whitespace.  
If you do something incorrectly at first and then fix it, consider adding a comment to highlight the fix (and possibly the mistake).  Thus you'd want to explain why you used < rather than <= here.
As others mentioned, an array is more general than $numberOne and $numberTwo.  $divisors is also a more descriptive name than $numbers.  