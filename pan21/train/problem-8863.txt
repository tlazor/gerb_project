Establish a real or virtual network segment, like 10.x.y.z/30 with only a single gateway and no default route offered by dhcp. /30 cidr block requires a good understanding of network subnetting. allow the hosts on the subnet you control to tunnel to your vpn gateway, authenticate, and only then obtain a default gateway. OpenVpn at least allows limiting host to host communication, as all traffic is of course routed through the vpn server. This is analogous to using wifi on a public hotspot, where they block traffic between wireless hosts.
There's a difference between forcing traffic through a gateway, and preventing devices from seeing each other on a subnet. I think what you're trying to do is the latter. Probably because you want to host servers for multiple external customers. You're looking in the wrong place if you're editing the routing table to achieve this goal.
Ultimately we did not find a way to do either of these things without a startup script.  Removing the On-Link route would not persist no matter what we did, and we couldn't use any of the other options (transperant proxy, VLAN, etc) for the reasons stated above.
The best solution is a managed switch, probably Layer 3. Like a Cisco 3550. The switch will behave like a router, routing traffic between all of its local subnets. As previously advised, use ACLs to prevent cross network communication. But, you mentioned vlans were not an option, so you probably dont control the switch.
Or, you may be able to use a transparent proxy, again with acl rules to prevent host to host communication. Not sure if this would meet your needs.
Well, your host is probably getting its default route from a DHCP server. If so, set a DHCP reservation. I suppose you could set the subnet mask for that hosts reservation to 255.255.255.255, which would technically prevent the host from delivering packets directly to other hosts in the subnet. All traffic would go through the default gateway. Hacks still have to follow the rules of networking, and this one will break a lot of rules unless your network is appropriately segmented. Its usually not enough to just pretend the subnet mask is /32 in a /24 segment and hope the user doesn't change it. Its not actually secure.
on startup.  The script was put in a directory restricted only to our user (not admin), and run on startup.  We also added a custom Nagios script which ran this command and checked that the routing table didn't change after that point.
My recommendation would be to handle this at the switch using ACLs. What specifically you can block/allow will depend on your switch's capabilities. Another alternative is to block ARP broadcasts, and then set static ARP entries for the default gateway (Technically someone could add more static entries to talk to other devices still).
Imagine a datacenter hosting thousands of servers. Admins do not simply trust that everybody has configured their ip addresses and subnet masks just right, not causing a conflict etc. Anytime hosts are on the same network segment, they can talk to each other. The challenge in this case seems to be forcing the host onto the correct network segment, a lone segment void of any other nodes but the port on your switch.
Summary, the real challenge is prevent host to host communication on the same subnet. Discrete subnets are simply a way to filter arp packets. Possible some arp hack could accomplish this.
Also, keep in mind that unless the gateway is set to block traffic from-to that segment it will happily route traffic right back into the same network.