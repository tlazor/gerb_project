It also looks like your collision logic depends on the ball being just at the edge (its center being within radius but outside the brick itself) to determine collision direction. This could miss collisions. It would be more robust to, once you've decided a collision has occurred (the two outermost ifs as they are), write logic which decides which direction the collision was and always gives one answer under all circumstances (never "both horizontal and vertical" and never "neither", which are both possible with your current logic).
Since you ask about bad practices: you have massively repetitive code and magic numbers. Take out that recurring 8 and use local variables to hold relevant values:
dirx = -dirx is a problematic way to implement bouncing, because if for whatever reason the ball is already inside an obstacle, or already moving the right direction, it will then be bounced the wrong direction and oscillate back and forth, and possibly zigzag its way into an even worse place. This could happen in your program if, for example, the ball hit two bricks simultaneously (the direction will be reversed twice).
I haven't debugged your code for you, so here are some bits of general advice on how to make things more robust: