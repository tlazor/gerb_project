You cannot render triangles that are behind the camera. Not with a perspective projection. Such triangles do not make sense under the math behind perspective projections. Furthermore, they are also outside of the frustum.
This is not a simple process. It will involve math that only makes sense if you have a full understanding of homogenous coordinate systems. Alternatively, you could just straight-up cull any triangle if any vertex of it is behind the camera.
You can attempt to ignore the near clip if you wish. Indeed OpenGL and D3D have ways of turning off near plane clipping altogether (though the depth buffer still has a minimum near value). The problem is not the near clip.
The purpose of the near clipping plane is that it is a clipping plane. Triangles that are outside of a clipping plane are clipped: cut into pieces so that each piece that is left is within the clipping region.
Turning off near clipping turns a frustum into a pyramid. The reason the pyramid stops at the point is because points above the pyramid are behind all four of the sides of the pyramid. So any point behind the camera (the tip of the pyramid) is above, below, to the left, and to the right of the visible region of the screen. All at the same time.
You must implement clipping. You must detect when any vertex of a triangle, in clip-space (before the perspective divide) is behind the camera. If it is, then you must clip that triangle, generating only triangles that are in front of the camera.