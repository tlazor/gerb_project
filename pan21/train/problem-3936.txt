As long as you do not require the vertices for animation and you don't want to have caves or other holes below sea level you should probably use your first approach:
I have a simple question really. I am creating water for a game and had two different design approaches:
Making a big square that covers the entire game world is a fine approach unless you run into some problem with it.  There are a couple of potential problems you should remain aware of that could make it better to tessellate the water a bit more:
When I first started programming in OpenGL (for Android, OpenGL 1.0) I made a Minecraft-like game, but instead of using VBOs or moving to OpenGL ES 2.0 I sent all vertex data, every frame to the GPU. You can imagine how slow it was. I was getting about 3-4 FPS on a 32x32x16 world. Then I implemented octree frustum culling which improved nothing. But I did learn a lot from that.
That's really not that important. Computers nowadays are fast, more important is not to use a "dumb" approach.
Logic of the program is much more important than some micro-optimisations in the code that only gets executed once.
So, if you don't have such a large game world that floating-point precision becomes problematic, and you make sure to draw the ground before you draw the water, then having one big square for the water should be fine.