ifdef is your best code portability tool. Write your high level API with multiple mice in mind. Write your low level API in such a way so it uses RawInput on Windows and whatever you like in Linux and Mac. By the way, the fun part, you cannot obtain HID devices on Windows without using RawInput, so you must use it anyway :)
The gist is that you must use the RawInput API to enumerate input devices such as all keyboard devices.  For each device you can then get a handle to the individual input device.  This handle is passed in to the RawInput message reading API and stored in RAWINPUTHEADER structure.  You can compare these to determine which keyboard the message came from.  You could then correlate this with enumerated mouse devices to make it so the "first mouse" matches the "first keyboard" (which might change every time the app is run or whenever the computer is rebooted or whenever devices are (a|de)ttached; I don't know).
JavaScript/DOM does not support it at all nor are there are workarounds currently; the DOM events API simply doesn't expose device information for keyboards/mice.  The only way to properly handle multiple players with separate input devices there is the new gamepad API.
OSX should in theory support it via the Quartz Event Services API but I am not familiar with coding low-level input for their platform.  You might have to delve into the "deprecated" Carbon API, which I've heard supports it but I can't find any examples online right now.
I'm unsure what the USB support on iOS is like, though I suppose you probably aren't looking to hook up multiple (or any) keyboards to an iPad or anything.  Android should have support, too, but again I have zero experience with its low-level input capabilities.
SDL does not appear to support multiple keyboards in its public API, which is disappointing.  I'm unsure what the story is on GFML, SFML, etc.
Note also that XInput supports up to four players on gamepads directly and does not use Win32 input events, raw or otherwise.
GTK seems to have a group field in GdkEventKey, which is maybe what you're looking for.  The documentation is not clear, so I don't know.  The low-level X11 API definitely supports it through the deviceid field of X11 input events.  IF you're using low-level input on Windows you should probably do the same on Linux (if you structure code sanely it's not hard to port), though using a high-level GUI library like GTK is preferable in general.
Note to be careful as many modern gaming mouse are also technically keyboards.  Pressing some extended buttons on such mice will generate a keyboard event.  Likewise, some keyboards also identify as mice for various reasons.  You'll want a way to detect/select which keyboards/mice to use for each player rather than just taking the first two enumerated devices, just to be sure.
I know you asked not to use RawInput, unfortunately on Windows, it will not be possible to use raw USB/HID for mice and keyboards.  Windows has an exclusive file lock on mice and keyboards and will not allow you to read from the device directly.  You will have to use RawInput or some other Windows specific API for mice and keyboards.  I recommend you use LibUSB like you wanted to and simply use #pragmas to separate out the Windows specific code. 