And then fine-tune it by setting a default value by setting max_execution_time in your php.ini.  Now, when you have script that you want to allow to run for a long time, use the set_time_limit() PHP command in those scripts.
I found that a better solution is to set it up so that the Nginx timeouts aren't really used, and let PHP handle the timeouts instead (as it does with other servers like mod-Apache and the command line).  
I ran into the same problem, and while I think you could use the Nginx configuration to set fastcgi_read_timeout per location as you're trying to do, it ends up being complicated to configure the locations properly that way.  And then it may still timeout if you don't also set PHP's max_execution_time.
So in your Nginx configuration's "location ~ .php$" section, set request_terminate_timeout to a very high value (or better yet, set it to 0 to disable the timeout).  And also set fastcgi_read_timeout to the highest number of seconds you could possibly want any script to run.