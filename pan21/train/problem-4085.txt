It might be a reasonable structure to have all thirteen classes defined for a case where you continue to train online, as data arrives - although the network might have unknown problems adjusting to new classes when they appear, you will have no measure of its ability to do this. Also, if your goal is to produce a model for someone else's use and then leave it with some simple notes on how to re-train it, then it could make sense to have known future requirements already coded.
However, if you intend to re-train from scratch with new data, or if you will be building any new model when there is new data, then it is not strictly necessary to add unseen classes in advance. Depending on training time for your network, you might view any hyper-parameter in the code as something you can adjust quickly. If you write the code with a constant defining the number of classes, and refer that in all code that needs to know this number, then it should only take seconds to adapt your model - that's no time at all compared to time spent on other parts of the problem.
In theory, this should not do any harm to the accuracy of the trained network on the data that you have. However, of course the network will have no ability to predict the three classes it has not been shown. If it is well trained, it should predict close to zero probability for all three unseen classes.