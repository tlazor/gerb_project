This has the added benefit of closing the file in the same context in which it is opened (it's a massive red-flag otherwise--though we should really only open just before we need to read/write and close immediately after we've finished).  Moreover, the flow of the program makes a lot more sense now.  And we've eliminated some duplicated code... and that nasty unseen RAM problem.
This is unintended recursion you've got going on here.  Each time we repeat(), our program consumes more and more RAM because we have to add another copy of all of these functions and all of their local variables to the stack.  Eventually, depending on how much RAM your machine has and how bored you are, you can get this program to run into a Stack Overflow exception.
This isn't a memory leak.  All of the memory will be appropriate released.  It's not trapped anywhere and forgotten about.  It's just that the application is designed in such a way that it consumes far more memory than it needs.
Open up any program that can report on the amount of memory your system's processes are consuming and start observing how much RAM is required by your application as you repeatedly answer y to the question your repeat() function asks.
Instead, perhaps we need a while or dowhile loop?  Let's change the repeat() function to return a bool and simply determine whether or not the user wants to continue without actually doing anything: