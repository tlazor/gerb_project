The above solution has 1 problem: The time it takes for a line in the log file to be generated to when it is processed by the centralized log process will increase. For example, if it takes 3 days for A.log to grow to 100 MB, then nothing from that file will enter the centralized log process for up to 3 days.  If the logs can't be delayed by more than 2 hours, then I would rotate the logs every 1 hour. That way you know you are within the 2 hour objective.
My recommendation is to NOT copy A.log, but only copy A.CURRENT_DATE_TIME.log.  This will simplify the project.
I don't recommend relying on the inode.  It will change any time the file moves from the source to the destination machine.  It will also change if the files are restored from backups.  If the log processing system depends on the inode, if you ever restore from backups the system will not work as you expected.
I suspect that the log processing system on the destination server is looking at the inode to determine if the file it had previously seen as A.log is now A.CURRENT_DATE_TIME.log.  That's not going to be reliable.