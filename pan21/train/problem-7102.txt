I don't believe there is the ability to do this.  Using a trusted NT connection to SQL Server implies that there is no password sent while authenticating to the server and that the existing NT token is used to authenticate.  In other words, SQL Server "trusts" the NT authentication.  It will use whatever user is logged in at the time of connection.
As Jimmy said, the DSN definition would not be tied to the admin account, but would use whatever Windows Authentication account you were logged in as when using the connection later.  (So you would need to use "runas" again to launch any programs that used the connection, unless you were logged in under your admin account.)
I have found that using the Windows Credential Manager works quite well. You can add the windows credential directly. The trick is you need to have the fully qualified domain name including the port, as well as your complete Active Directory username with domain qualifier, so something like mydb.myinternaldomain.com:1433 and the myinternaldomain\myusername with your password. Then you can add mydb.myinternaldomain.com as an ODBC source and windows will magically swap in the right credentials. This also works for Sql Server Management Studio. 
You can also use the "runas" command to launch the ODBC Data Source Administrator under your admin account while logged under your normal account.  That would enable you to configure and test the connection without receiving a "user is not associated with a trusted SQL Connection" error. 
Have you looked as DSN-less connections, by the way?  I believe that they would be much more appropriate for your requirement, and would also remove the need for client configuration before your app could be used.
A System DSN by definition applies to the entire computer irrespective of which logon account is used, so (if I'm reading your question right) that means that (1) the answer is "yes", and (2) you will need Admin rights to create the DSN.