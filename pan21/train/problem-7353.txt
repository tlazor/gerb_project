If you use a configuration management system (Desired State Configuration, Puppet, etc), you're still going to have to model the dependencies and the logic. With a configuration management system I daresay you're going to bump into the limits of the platform's ability to describe your dependencies, at which point you'll need to supplement with scripts anyway. 
I come from a background of using build scripts checked into a VCS, so my bias is probably going to show here.
Basically we put installation files in a network folder and provide powershell script that should be run on workstations customer wish to update. This script may be rather complex and may change dramatically from installation to installation. 
There isn't any "magic bullet" which can handle these kinds of things for you. I'd be skeptical of anybody who tells you that there is.
Our customer has solution that includes several products that cooperate with each other. When we update any part of the solution we have to provide administratorâ€™s guide for every operating system (XP, Windows 7, Windows Server 2008 e.t.c.). Guide tells:
I think you're started down the right path with your Powershell script. I'd comment the heck out of the script and I'd work very hard to build a single script (or, more likely, suite of smaller scripts that are called from a single central script) that can handle all your various installation scenarios. I'd use version control software to maintain these scripts. Inasmuch as is feasible for the products you're installing from opaque binary blobs, I'd build in test logic to validate that these installers are actually working.
You may want to look at Puppet. I've used it to manage configuration of Unix based computers, but it also works with Windows OS.
Windows Installer certainly sounds attractive at first blush, but it's not a "free lunch". If you opt to build Windows Installer packages you'll just have to encapsulate the dependencies and logic in your script into the installer package, possibly with a lot of ugliness like copious quantities of Custom Actions. In effect, you'd be using Windows Installer as a scripting environment with a bunch of built-in quirks and limitations.