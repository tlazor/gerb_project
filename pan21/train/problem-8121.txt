Color.Lerp(Color a, Color b, float t) is a function that gradually changes a color according to a step t, giving it the final value of the Color b.
I personally do not interpolate things on Update that I know I won't be constantly interpolating (Camera being an exception), so I use coroutines to handle that.
I feel like there may be a better solution. The only reason I would see to lerp from color to color is if you were wanting to continuously change the hue... 
So this is the code I ended up using to lerp between three colors of mine, I hope I will be of use to anyone who decides to look for this. 
With this you can use HSV colors, simply change the hue, then convert to RGB. Besides, with Color.Lerp, you have the problem of inconsistency. If you lerp from orange to yellow, then to green, you'll find that the color starts to go to yellow very quickly then starts to slow as it nears yellow, then speeds up again once it passes yellow and goes to green. So it will slow color changing at every point that you're lerping to. I think changing the hue would be much more effective - and in the long run, will give a better effect. :)
On this example I divide the duration given on inspector by the colors quantity, and then I Lerp the actual iterator color to the next iterator color, and the duration will be of the duration previously spliced. Here is the sample:
The point is to have a collection of the colors, and a duration in total (like on the example I'll provide) or a duration between each one (that's up to you).
A very simple version that takes 3 colors, and puts the second one right in the middle could look like this:
Since you didn't say what you wanted to change color to, I'll give a vague example with a color created on the method.