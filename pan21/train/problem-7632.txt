in order to get the file count of a particular directory. Remove the "/D" option if you don't want to count folders. The "/s" option processes files in all directories in the specified path. So remove it if you only want files in the specified path and don't want to include files in sub folders.
Note that if you do not include the . you will get a count of all files and all directories.  You will not include hidden and system files you need to add -force to count them all
So for example if you want to find out how many files are in your C:\ drive and not any subfolder you would use the command:
I've seen quite a few instances where people try nifty tricks with find /c. Be very careful with those, as various things can break this.
which does things a little nicer. You can drop the >nul in a batch, since set /a won't display the result if run from a batch fileâ€”it does directly from the command line. Furthermore the % sign in the for loop has to be doubled.
This will create a file called filecount.txt in the current directory with the number of files and folders in the current directory (including the newly created file). You can change the 
If I only needed this once I'd just use dir, otherwise I'd consider rolling my own, probably as a C# app because that's what I would be most familiar with (although VBScript or PowerShell would also be viable).
which will first output all file names, one line each. And then count all lines of that output which are not empty. Since the file name can't be empty (unless I'm missing something, but Unicode will not trip this up according to my tests).
Generally, you want to use find on dir /b which cuts away all the non-filename stuff and avoids fencepost errors that way.