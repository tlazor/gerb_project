Yes.  It is not enough to grant authority to use a view.  The user must also have authority to the underlying table as well.  
Note that user RESTRICTED has no rights to access the tables in DATA and you want to leave it that way.
If your programs are stored in the same library as your data you will need to give RESTRICTED *USE authority to the library and specifically restrict her (via *EXCLUDE) over all the tables in that library.  It may be easier to create a RESTRICTED library that only holds the stored procedures and authorise her to that library.  This makes ongoing maintenance easier because you won't have to try to remember to keep restricting her from newly created tables in DATA.
Grant user PERMITTED *USE authority to the RPG program object -or- GRANT  via SQL.  Also, grant user RESTRICTED *USE access to library PROGRAMS.  This will allow RESTRICTED to execute the stored procedure / program.  
One way to allow access to a restricted user is adopted authority.  For the sake of example, let's assume the following:
Have PERMITTED create an RPG stored procedure in library PROGRAMS.  Make sure the program has USRPRF(*OWNER) specified.  This means that when the program runs it will use the authority of the owner (PERMITTED) rather than the authority of the profile executing it (RESTRICTED).  
Now have user RESTRICTED use SQL to CALL the stored procedure.  She has authority to execute the program because she has *USE rights to library PROGRAMS as well as the compiled program object.  The stored procedure runs under the authority of the owner, PERMITTED and since PERMITTED has full access to library DATA and the tables therein, the stored procedure can access / update those tables.  Any raw SQL that RESTRICTED attempts to use will fail due to insufficient authority - the only thing that she can do is call the stored procedures created for her.