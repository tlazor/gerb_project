I've seen lots of articles/documentation about the benefit of compressing the data sent from the web server to the browser to save bandwidth, but I'm wondering if there are similar benefits to compressing the data between the web service and the web server?
XML is a very verbose (and more importantly, repetitive) language, so compression will probably make a decent difference in the amount of data transmitted.
Finally, it's not necessarily all-or-nothing if you're the one transmitting. Gzip compression (LZ77) is tunable to optimize for speed, size, or something in between. How that tuning is done depends on your implementation, but only the side SENDING the data gets to decide. Decompressing gzip'ed data that is highly compressed takes no more resources than decompressing data that was only lightly compressed, so the recipient shouldn't care anyway.
BTW, remember that gzipping binary data CAN result in MORE information not less.  So in any event, you'd have to be aware of the type of data being gzipped.
Compression is only useful if both sides support it, otherwise flipping the switch will do nothing. Advertising that you support compression makes very little difference if compression isn't ever actually used.
XML should compress very small, so of course we'd get the same benefits in terms of bandwidth, but I'm specifically wondering if that will be offset by the processing power needed on the web server, to decrypt the SOAP messages that it receives.
The encoding/decoding overhead for gzip is fairly nominal, however it is there. It's useful in browsers because the are not particularly timely - the user will just sit there getting irritated till the page has loaded. A web service is a bit different, they usually have to be pretty fast or else the whole application often appears to have hung.
The only time I would suggest gzip would be useful in a web service would be if it's a trivial service that is going to be hammered thousands of times a day, where the savings from 10kb to 2kb of XML would be worth the processing overheads. And that's assuming that the web service on the other end can accept gzip in the first place.
For that matter, will web service clients even understand gzip in the first place?  Or would enabling encryption be a waste of time, that would never never be taken advantage of by the web service client?
The question comes down to what does your server have to spare -- CPU or bandwidth? If you're constantly waiting for the network but your CPU is idle, then you probably should be looking into compression. If your CPU is busy but you're not sending much data, then compression probably isn't for you.
Seeing as how gZip is handled by the users browser, the web client on the other end will need to be able to understand how to decompress gzip. You will be able to tell this by looking in the headers. IIRC it's the "accept" header, and you're looking for "gzip" and "deflate".