That's not to say that you might not learn a lot by trying to make GPU-friendly code, but personally I wouldn't start with that unless you build a prototype with the numbers of enemies you think you would want and start running into performance issues.
Specifically answering your question: yes, the GPU can and has been used for AI processing.  Particularly for things like terrain analysis, occlusion queries and ray tests, and some navigation.  However, it's applicability is very dependent on the specific algorithm and data set used and the desired hardware requirements.
For games with less demanding graphics, it may be desirable to have less demanding hardware requirements.  If you don't need a powerful GPU for graphics, wouldn't it be nice of people with low end or integrated GPUs could run your game?  If you're selling your game as an indie dev, the segment of the market that has nothing but an Intel GPU (and not the very latest Ivy Bridge) can make up a sizable chunk of your sales.
If you can do more with your GPU than with the CPU, then it's a good idea.  If it isn't, then it isn't.  
You are best off writing your code CPU-side (the tools are more mature, debugging is far easier, and more people could run your game) and moving it to the GPU only if you truly can't get it to run with adequate performance on the CPU.
Lastly, keep in mind that the GPU has some latency to it.  It can take upwards of several frames to get the results of any computation back.  If you're not very careful, it's easy to stall both the CPU and the GPU during data transfer to and from the GPU.  Even if you are careful, this can be a problem.  For even many graphics related tasks, it's not at all uncommon to unload some processing to the CPU that the GPU might be better at.  E.g., occlusion queries can often be computed on the CPU faster than it would take to send and receive the request to the GPU, even though the GPU could do the actual computations much faster.  Modern CPUs are often under utilized by games, and there's a lot of spare processing power to play with if you're comfortable writing threaded code.
There are reasons to avoid using the GPU.  For many "AAA" games, even high end GPUs are already being completely utilized by actual rendering work that there isn't any GPU computing time or memory to spare on other tasks.