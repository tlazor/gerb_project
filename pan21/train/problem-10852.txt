Currently, I am trying this using a Virtual Windows XP running IE7. My own setup is a Windows 7 RC1 64bit. Most of our websites and applications are developed on locally using mappings in the Windows hosts file.
During our webdevelopment process, we often need to test the layout of our applications and websites in several browsers. Since running all of these browsers stand-alone is nearly imposible and applications such as IETester do not work flawlessly and cannot run on Windows 7, it would be nice to be able to run Virtual Machines for these browsers in order to have a "native" experience.
You should somehow arrange for your VMs to "see" each other via DNS or lmhosts feature. I would also avoid using pc names with localhost in it, you can use no suffix at all or smth like mypc.local
The above makes me think you may be hitting a conceptual speedbump.  Your VM will not (and should not) think of its host as localhost.  It's a different logical device on the network.
The primary LMHOSTS file  is always located in the %systemroot%\System32\Drivers\Etc directory. With Microsoft TCP/IP, you can include other LMHOSTS files from local and remote computers.
Localhost is a reserved term, of sorts, which will always point to 127.0.0.1.  Attempting to subvert it seems a lot like breaking the head off a sledgehammer to make it into a walking stick (instead of just using a stick).
Sort of sideways, but if you're going to use alot of VM's for your testing, setup a DNS server on the host with a test zone which forwards to your regular DNS servers.
When navigating to http://mywebsite.localhost from within a Virtual Machine, the Virtual Machine's host file is queried instead of the actual OS on top of the Virtual Machine. Also, when the exact same mapping is added, the browser (obviously) still navigates to the "virtual localhost".