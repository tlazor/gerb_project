I thought that perhaps it was some sort of issue with the casing of the filename, but specifying _VIMRC versus _vimrc to any of these commands, makes no difference.
The NTFS file system typically used by Windows does support multiple files with the same name that differ only in case, as part of Windows' efforts towards POSIX compliance.  Additional details are available at http://support.microsoft.com/kb/100625 .  However, all of Windows (and presumably most of its APIs) and Windows-provided applications prevent this.
What happens if you run C:\Windows\SysWOW64\cmd.exe's dir?  I bet you're being WOW64 File Redirected.
As Raymond Chen and @kreemoweet surmised in their comments, this was a file-system virtualization issue, and I found the file in:
Within "C:\Program Files (x86)\Vim", I see my changes if I inspect the file with any of the following:
Please also check out http://www.cygwin.com/cygwin-ug-net/using-specialnames.html#pathnames-casesensitive .  There's a registry setting here that you should check, which isn't even limited to Cygwin.
That's when I noticed the issue. The copy of the file did not contain my changes. Much investigation followed. I will summarize the findings.
I'm seeing a strange interaction between vim, the Cygwin tools, and Windows7. I don't think that it is a bug, but at the same time, I have no idea how to explain what I'm seeing.
As Raymond Chen and @kreemoweet pointed out above, this is caused by filesystem virtualization.  To turn this off, you can use the Local Group Policy editor, gpedit.msc.  Type start gpedit.msc into a command prompt and navigate to Computer Configuration > Windows Settings > Security Settings > Local Policies > Security Options.  Scroll to the bottom of the right-hand window and double-click on User Account Control: Virtualize file and registry write failures to per-user locations.  Change the setting from Enabled to Disabled.
So likely, you do have both _vimrc and _VIMRC existing at the same time - and the standard API is only showing you one of them (not sure what logic is used to choose which one).  I was going to say that vim must be using a non-standard API or calling it with a non-standard option in order to result in what you're observing, but I can't seem to reproduce this with vim alone.  I would consider this a bug in Cygwin, vim, copy, or whatever it was that actually resulted in this situation - which brings a good point - did you actually use copy (doesn't exist in Cygwin) or cp?
The Cygwin ls command shows a different file (different date and size) than the Windows dir command.