I have been doing projects from the book The Elements of Computing Systems. Under the scope of project 10 and project 11, I had to implement a compiler for a (toy) programming language called Jack (its grammar can be found here). The compiler translates Jack code into Virtual Machine instructions (all Virtual Machine commands can be found here).
It might be better to make use of common function such as fopen() and to write code to navigate the file system and directory.
This improves performance because there is overhead involved in using va_list argp, va_start(argp, nOfElements), va_arg(argp, int). It also simplifies the implementation in 2 ways, because varargs isn't necessary and the count of items doesn't need to be included in the function call. The count of arguments is error prone as it is implemented.
The extended switch/case statement in the function char *keyword_to_string(KeyWord keyWord) might be better implemented as indexing into an array. This would be just as easy to maintain and would improve performance of the program.
My code contains occasional free() statements, but my primary memory management strategy was not to release any memory, as the program works only for a couple of seconds.
There are 2 ways this could be implemented, the first and prefered one would be an array of strings where the integer value of the KeyWord enum is used as an index into the array.
There are a number of places where exit(EXIT_FAILURE) is called, this is not a good programming practice in C. It prevents the program from cleaning up after itself and can have side effects. If this was an operating system instead of a compiler it would bring the system down. A better way would be to call setjmp() in main.c and longjmp() where the error occurs.
You may want to look into compiler development tools such as lex, flex, yacc  and bison that can be used to generate the lexical analyzer and the parser.
First, you tackled a tough problem and you obviously put a lot of effort into it. The code is well structured. The organization of the code seems fine.
Another place where arrays might be beneficial would be to replace the varargs implementation of the function bool is_one_of(int actual, int nOfElements, ...).
Some users might be using C++ to compile C, the user of a variable name that is keyword in C++ such as class in main.c might therefore be a problem.
Not all C compilers provide the function xprintf(). To write to stdout by default it might be better to use printf(). To print error messages it might be better to use fprintf(stderr, FMT, Args); The header files libgen.h and dirent.h are not common header files and may not be available on all systems, for example windows.