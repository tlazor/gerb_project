I would not waste my time trying to optimize the database until I had updated to 5.7.13 and monitored the results, or switched to MariaDB or Percona. Optimizing/troubleshooting 5.7.12 is just a black hole sucking at your time and resources.
The safe and immediate solution (certainly smarter than prolonging your use of earlier versions with bugs and a major compatibility breakpoint in the release stream) is switching to MariaDB or Percona. Or, if you are using an app that can use PostgreSQL as well as MySQL, switch to Postgre--if it's something that's not impractical.
Since this is a development server, I can compare it to the production server, which still runs ubuntu 14.04 and where the same query takes only 0.38 seconds.
If you launch a new Ubuntu 16.04 server, I would change the repositories before connecting any remote administration user-agents or installing server management panels, so that you're on a MariaDB/Percona track. Or tracking the official MySQL repos rather than the Ubuntu repos, so you get fixes faster.
If you updated to a 16.04 Ubuntu server, and are using 5.7.12, you are encountering--at least in part--a bug eating up RAM, and some dynamic optimizations/default settings that are based off the server's available RAM and are set less than ideally. This has been problematic for lots of people, but especially for smaller server/vps with low RAM.
For example, a query that joins questions and answers by question id, used to take less than half second. After upgrade, it takes a MINUTE.
The database contents are more or less the same, the development database is a backup of the server from last night.
Sure, you want to probably optimize your queries and joins for the new updates. But, at the same time, you'll probably be wasting a great deal of effort and not accomplishing anything because of the underlying memory leaking like a sieve issue. If you're going to go through optimizations you might as well do it with a different MySQL server from the one causing problems for you.
There were also some different optimizations/changes made that will have an impact, depending on whether or not you use InnoDB or MyISAM. To give you an example, a recently installed VPS with 2 GB RAM that consumes around 320 MB RAM if you restart MySQL will slowly rise until consuming 1 GB on an idling app, in maintenance mode...with zero traffic or db queries (that was an OpenCart install which uses MyISAM...which I wouldn't want to wish on anyone trying to move forward...but that was a case of "hurry up and let's do this and use this and...."). And so that particular instance requires more $ and time to go back and deal with this same poor performance issue from MySQL because of a reliance on MyISAM in the app, memory leak, and some poor defaults the Oracle team threw out into the wild.