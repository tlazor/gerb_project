One important thing you should note is that you cannot do joins etc with nosql databases. So, plan for your usecase and decide. If joins and multi-record transactions are a necessity for you then nosql databases are not for you.
As the other answers suggest, its is not a good idea to split the users into multiple tables. Most of the databases with indexes on the userid, can handle million rows. However, the latency per query may increase depending on the total number of entries in the index. As long as the dataset is small, you can manage with single table in normal databases.
I will try to thrown in a different idea also for your future consideration if you grow much beyond a million records or so. With such large number of customers, you dont want any downtime etc. So, there are bunch of nosql databases that you may want to look at. They will do the sharding for you instead of you managing the sharding yourself from the application. They will also give data redundancy and hence more uptime. Facebook and all heavily use memcache etc for their cache. But I am not sure what they use for their permanent store. 