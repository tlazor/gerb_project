From what I understand you are about to write an SMTP listener which depending on the value of the RCPT TO: command is going to accept or reject the connection. Upon accepting a connection it is going to parse the data accompanying the DATA command and the parser's result is going to signal the relevant application that is going to use the data, right?
There is a sort-of-standard protocol called LMTP (see RFC 2033) which allows you to implement a mail processor that receives mail from an ordinary SMTP frontend. The frontend will provide hardening for you and will do the queue management. Your LMTP server will receive mails and do parsing and notification.
Another (probably better) option would be to have Postfix deliver to a local process that you write, which passes messages to your backend server using a simpler protocol than SMTP.
Would you be clearing out the mail once you'd parsed it?  If so, having multiple mailboxes on the same server probably wouldn't give you any performance benefit, as the mail files would probably end up being stored on the same volume anyway.
What sort of volume of incoming mail are you expecting this system to handle?  The bottleneck will almost certainly be your parsing code rather than the mailserver itself.  There's no reason why a single IMAP server shouldn't handle thousands of messages a minute.
NB: We handle support tickets using a single mailbox which is polled every minute using POP3.  Each message is parsed for account number / support token and dumped into a database, and it easily handles thousands every hour.
You may find helpful advice reading "Programmer's Guide to Internet Mail" even though its code samples are in Visual Basic.
Have you considered using two SMTP servers? First, expose a standard smtpd (like Postfix) to the internet. Have it configured to accept only mail to the correct addresses, etc. Then have it pass messages to a smtpd that you write, which isn't exposed externally. You can rely on the Postfix instance to do queue management, filtering, etc. Since your daemon would also only be talking to a trusted Postfix instance, you wouldn't have to worry as much about a bug in it being externally exploitable. (Of course, you should write paranoid code anyway.)
I do not write .NET but here is what I would do: I would have each application listen on a port (determined upon registration with the SMTP listener). Then when the parser has decided where data is to be forwarded, the handler-child should connect to the relevant port and forward the data to the application. In your case such a solution might be unacceptable, especially if a major rewrite is needed.
Either one should be pretty easily scalable. You can add extra proxy servers using multiple MX records, and extra backend servers with either (depending on how you configure Postfix to talk to them) another set of MX records, and DNS round robin, or maybe something else.
Why do you need any physical mailbox at all? Upon each connection your listener spawns a handler child which parses and notifies the registered application. Depending on your load you may or may not need to maintain a queue locally (or send a 4xx error to the sender so that they retry delivery) or you may need to maintain a queue for each registered application.  Assuming one mailbox per application, what you are thinking is like using each mailbox as a separate queue for each application. Using IMAP to determine mailbox change would simple mean that you have to write yet another listener (an IMAP one) that would check the mailboxes. IMHO, this is unnecessary overkill.
The advantage of this solution is that you can stick a load balancer in between and add as many boxen running your LMTP listener as you need.