Am I on the right track or completely off charts? Any views on improving my approach (or changing it altogether!) will be greatly appreciated. This is the complete code (validation and exception handling removed for clarity):
When a record is created, it is based on a record definition. For example two records are created below. Note that the interface is similar to the one implemented by JDBC to set and get values depending on the type and position:
To implement this, each Record class contains an array of each field type (i.e. an array of ints, and array of strings, etc). The arrays will contain the values (primitives are used when possible to avoid autoboxing). Also, arrays are used instead of ArrayList objects to improve performance. 
A bi-directional HashMap will store the relationships between the field position in the record and the field position in the array (and vice versa). I'm using the Google Guava bi-directional HashMap for this purpose.
The objective of the two classes below is to manage a collection of records where the record structure (i.e. the fields that comprise the record) is variable and defined at run-time. The record structure may contain integers, amounts, dates and strings. 
The RecordDefinition class is used to define the record structure. For example, the class below defines a record that consists of an integer in field 1, and a string in field 2.