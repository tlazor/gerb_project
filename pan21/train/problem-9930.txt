I'm especially interested in any techniques that can be used for web based games, but I imagine most can be applied generally.
The existing answers are already good, but I wanted to point out that if your checks are expensive (ex: running the entire game server-side to make sure the client isn't cheating), then you can choose to only do it some of the time.
Make sure the server doesn't give away when it's validating actions and when it's not. Always send your standard response until you're ready to take action (and don't give it away by taking longer to send a response when you're validating and when you're not).
The simplest way is to in essence make the client a dumb terminal. Everything is done on the server, and the client just sends commands to the server. This way the server is fully in control of everything.
Also, only send the client what it "should" know.  For example, if an enemy player is behind a wall, don't send that information to a client, or a hacked client will be able to discern this information (read: wallhack).
This is probably not the most suitable case for you however, because the server has to perform more computations, and the user experience will be lackluster. So the more logic you leave up to the client to perform, the better the user experience, but the less security there is. So you'll have to find a middle ground that is acceptable for you.
For example, you could only check actions in a particular region or by particular players (randomly changing after some time), or just have a queue of actions and randomly pick which ones to validate (and ignore the others). Maybe come up with a heuristic of who's likely to be cheating (basically look for people who are most successful) and validate their actions on the server.
In multi-player network games, what techniques exist to try to ensure that users are connecting with the official client application, and not some hacked client app?
This way you can get pretty good protection against cheating, using only the server power you can spare (although obviously the closer you are to validating every action, the better protection from cheating).
I realise there is probably no sure-fire way to do this, but rather I'm interested in techniques that can be employed to mitigate the problem.
and give the server that recieves the packages some rules. To example you could set that the biggest realistic/allowed move is +1 and not like a cheater/hacker that would set it to 5 or higher just to be faster. Just think about what could a hacker do to be better than other players and set rules for it.