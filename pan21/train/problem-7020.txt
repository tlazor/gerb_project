So: Option #1 if the child object is going to modify the parameter, Option #2 if the caller is going to modify the parameter. If neither is going to modify it, then don't make useless copies.
It also has costs: it takes up more memory, uses more CPU cache, and adds pressure to the garbage collector. Making copies that won't be modified is a waste - you're paying the cost with no benefit. So you should only make a copy if you know that you'll need it.
Basically I use option 1. The usage of constructor is initialize the properties and creating an object in memory.  Value types sets the default values ​​(int = 0 etc), reference types sets  null. If you want use own default values, you must use own constructor. This is option 1 in your post. In my opinion this is the safest and most logical option.
The only code that knows for sure that the parameter will be modified is the code that's going to modify it. So whoever is going to modify that parameter should make the copy. Otherwise you risk screwing up shared state, or making a bunch of unnecessary copies.
In Option #2 you cannot be sure that user of your class will pass new Object as a parameter. If you really want to create a clone of parameter you should create on yourself or implement some clone method on MyReferenceType