I'm not really keen on your Left + Right nodes being as exposed as they are, it's possible for clients of your class to build their own trees, which might be what you want, but it feels odd, what happens if they do myNode.LeftChild = myNode?  That said, your LeftNode property and AddLeft method do the same thing, they both overwrite the current LeftNode with a new one.  I assumed AddLeft was going to recursively call until it found an empty left node and then add it.  If they are intended to do the same thing, then I'd think about removing one of them.
I don't really have a strong preference, but if you're initialising to default(Node<T>) then you should probably test for it in your enumerator, or initialise to null.  Whichever one you choose, be consistent.
This is a simple implementation of a generic binary tree that holds elements of type T. I was wondering if there was something that could be done better (especially in the EnumerateNodes methods).
If you're not really doing anything in your properties, other than passing values back and forth to a backing field, you should consider using auto properties instead.