The behavior sounds like garbage collection which is odd. I assume you're not doing any background loading or other stuff like that, or you'd have mentioned it.
The fact that iphone4 fares better than 3gs may either be because iphone4 has a faster CPU or the fact that it has more RAM ( http://www.labnol.org/gadgets/compare-iphone-4-with-iphone-3g/13855/ ).
You could try using the memory allocations instrument and see if you have any spikes in memory when that hiccup occurs. That was a problem in my last game - it would run smoothly like you've described, but hiccup after a while because I had run out of cached enemies to display, and the game engine loaded a few more up.
Generally speaking, performing dynamic memory allocations in real-time applications is a no-no, so you should avoid it as much as possible. Keep buffers around, re-use them as much as possible. If you're using vectors, don't delete them, just empty (not resize) them.
Whether or not you need to fix that is up to you. On my projects, the definition of a show stopper has been whether or not it affects the gameplay or causes data loss. Is it something that would cause a player to crash their ship or end their game when it happens?, If this bug happens, does it nuke a player's game save?, etc.
You could also log your vector size, calculated frame rate, and a time stamp to a ring buffer in memory as your program runs.  The goal here is to see if there is something "magical" going on within your game loop when you detect the drop in frame rate.  
If the frame rate hiccup is related to a vector resize inside the game loop, this may help identify the issue.