Create a Company table. Create/Verify you have a Group table and a GroupCompany table. Those will need populated on addition of a company to the system. You may want to create a template of groups common for a new company. Users that are added to the system are added to a group. Each group is tied to a company by the forementioned GroupCompany table. You can add a GroupType field to categorize company groups across the whole system. 
Adding a company to your system helps you scale it across many organizations. It should be standard on most systems you architect. When the requirement comes in that we have a new client but they want all their data reported separately, you are covered. 
I would probably not model the users in PostgreSQL. If you do, you're limited to interfacing with apps you create. If you user another solution, like say LDAP, you'll be able to utilize those models on everything from phones to login systems to web apps.
This will return blowfish encrypted dn/pw table. From there, because we put jatwood under stackexchange he would log in by providing stackexchange.jatwood, (or you would create the login string).
That all said, there is a simpler way than doing what you ask. Because normally in these structures organizations can themselves have sub-organizations...
Ok... That takes you to permissions. This has been covered a lot. After you resolve to a rid of matching dn, you need to work out how the permissions to work: