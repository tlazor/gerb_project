As you can see above, TCP/IP layer implementation is not as clean as in ISO/OSI theory - applications do need to be aware of some of the data that in theory should be contained in the lower layers. This is why applications need to be rewritten to support IPv6 (even though this is supposed to be a transparent network layer transport change, that does not affect application layer).
How exactly the packet is built in regards to grabbing the IP that was received from the DNS query and putting that in to a packets destination IP field I'm not clear on. The operating systems network stack obviously handles this but I can't give more information than that because I'm not sure on the whole process. Maybe someone can comment with some extra information.
Link layer protocol (Ethernet) incapsulates network layer datagram in a frame. It than uses some of the data it gets from other protocols (ARP) to populate the link layer protocol header with correct destination address (MAC address).
Transport layer protocol (TCP) incapsulates application payload to a segment and uses some of the information received from application layer (destination port) to add transport layer header. It than passes the segment down to network layer, together with some additional information, such as destination address.
Network layer protocol (IP) incapsulates transport layer segment in an IP packet/datagram and uses some of the additional information it received from the transport layer (destination address) to add the IP header. It than pushes it down to link layer.
If you try to visit www.cool-site.com and you do not know its IP address then DNS happens first. The DNS process follows the whole encapsulation/decapsulation process like any other packet would. 
Because on the server end the above described procedure is reversed. Application does not only receive the application data from underlying layers, but also some of the additional information, such as source IP address and source port.
Please note that OS TCP/IP implementation and NIC drivers do not alter the application payload. Therefore they do not populate X-Forwarded-For HTTP header with any kind of data. IP address data is passed along the payload. In your case this was done by a Proxy between the client and the server. As the proxy is seen as a source IP address in network layer, proxy ensured the original source IP address is passed to the server in the application data payload.
I think you're not understanding that the DNS query and the HTTP request are different packets and thats whats confusing you.
The server knows where to respond because in the HTTP request packet there is a source and destination IP within the IP header (like all packets). The server will respond and put its own IP as the source and use the source IP in the previous packet as the destination. 
Your machine will realise it does not have an IP for www.cool-site.com. Your machine will build a DNS query and send it to the DNS servers you have specified (statically or ones it obtained via DHCP). Assuming the DNS server knows the address it will respond back to you with a DNS response containing the domain name and the IP address. Now the machine knows the IP address it can build a new packet for a HTTP request and put the IP address as the destination IP in the packet. 