But why separate the graphics hardware from the CPU in the first place? Wouldn't it be more simple and logical to just have one CPU which does everything instead of having a separate CPU and GPU with separate RAM and VRAM? Because it allows to specialize the graphics hardware. The CPU is supposed to execute many different programs, so it needs to be flexible. A GPU, on the other hand, does repeated instructions in bulk (in older hardware that was little more than "copy bitmap to screen location", modern GPUs are far more complex).
As a personal project / exercise, I had begun developing a simple game engine written in Java, but came across the issue of figuring a way to efficiently and quickly update the pixels within the game window.
How did the early programmers of the NES / 6502 chip accomplish this task of drawing the display, given the limited power of systems back then, or is this really the most efficient method of going about this problem?
Setting pixels is a task best left to specialized graphic hardware. This is how 8bit and 16bit generation hardware worked and this is still how modern PCs work. 2d graphic APIs usually reflect this separation.
Though already thinking that looping through the array and drawing the pixels within that loop was not the best way to handle this task, it performed worse that what I had thought.
The usual way to draw tiles and sprites with a 2d graphics API is to load a couple of bitmaps into dedicated video memory and then provide function calls which just tell the graphic hardware "draw the bitmap a at screen coordinates x:y". 
Since I had decided to model this engine after the NES' (which maintains a resolution of 256x240 at 60hz, if i recall correctly) 6502 chip, I had quickly created an array of pixels at that resolution.