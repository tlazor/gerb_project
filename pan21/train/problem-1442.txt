That said, that's just my personal experience; I know there are people running server farms on Ubuntu, so it's not out of the question.
If I understand correctly, you mainly use the computer through the graphical UI, and I can guess you might be a bit lost in front of a command line only computer. It is true that the UI changes, but keep in mind that both use GNOME and are not so different. But it is true that Debian is more rough.
There is no need to recompile your app for Debian if it was developed on Ubuntu.  You are compiling for the Linux Platform, not a specific distribution.  With that said, that is not a guarantee that you don't have dependencies in your app that you would have to ensure are installed on your production server.
My experience with Ubuntu and Debian would lead me to Debian on the server - they have far more of a focus on stable, solid releases and more of a history in the server space, and my experiences with Ubuntu have been pretty uneven.
My recommendation is to continue to develop in whatever way is comfortable for you, however you should have a test machine.  For this purpose Virtual Machines are a great solution.  For ease, I would recommend VirtualBox, but Xen, KVM, or VMware could all serve your purposes.
The important thing to note is that you should ensure that your test server (the VM) is as close in configuration to your production box as possible.  What I recommend is either automating your build process, scripting your installs and configs, or (the hard way) taking detailed notes of the changes that you make on one server and reproducing them on the other.
Finally, Florian is quite correct that you're best off having a local environment that mirrors your production environment; the best way to achieve that is probably a Xen/KVM/etc guest with whatever your server is built with.
If you do chose Ubuntu, be sure to pick an LTS (Long Term Release), so you get bugfix/security support for 3-5 years, instead of 18 months in the regular Ubuntu releases.
Regarding updates, Debian also has regular updates on its stable release, almost daily. As for binary compatibility, the best is to recompile your software for the target system you aim to deploy to, even if it should work as is, as long as the versions you use have about the same age.
Once you have them almost ready to start testing and deploying your app, take a snapshot of the VM.  This is a feature of most virtualization platforms that allows you to roll back to a certain state.  (In this case, your pre-app-deployed state.)  Then test your app.  If it works, deploy it.  If it continues to work in production, get rid of the snapshot and that is your new "live" image.  (You can keep your snapshots, but if you are going to be upgrading your app in production, you should be upgrading it in test...)  If it works in test but not in prod, you will have to find the specific fix for prod.  Once you do that, you will need to replicate your changes back to your test box and resume the testing cycle.  