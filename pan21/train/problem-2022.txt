Now create one object, with the type of the abstract class, and initialise it with one of the subclasses. That object is the current scene of your game. Each loop iteration, call its update and then its draw functions. Whenever the user does a specific action (for example select "start game" from the main menu), re-initialise this object with another subclass of the appropriate scene. Your loop doesn't need to change, and now the new scene is being updated/drawn.
Everything has to be in the loop, otherwise they can't be rendered. The question is, should they be there by themselves or hidden behind function/classes? This is an organisation question, as in, all results work, but what's "better" depends on you.
Note that this is not the only way to do this, but as far as I know its quite well-known. There might be better ways out there, but that's up to you to experiment and find the right one for you.
One way to solve this, is to have an abstract class that implements some functions like update and draw. This class represents a "Scene" inside your game. It can represent the main menu, or the character selection screen, etc. Now create subclasses for each of these scenes, that implement those functions and now how to draw themselves.