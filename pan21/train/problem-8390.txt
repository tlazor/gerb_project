I think you might be overengineering, or at least abstracting too much away.  While the GameEngine can certainly utilize composition in the form of services, I wouldn't treat the GameEngine as an Entity along with the rest of your game objects.  If you are planning to have a 1:1 mapping of component types and services, I would definitely let each service manage the lifetimes of their respective components, by letting your Entity constructors or factories request the creation of components.
Personally, I don't like to compartmentalize that much.  I use more of a property-centric approach to components, where components are little bits of data such as a position, a mesh, an AI script, etc.  The behaviour associated with this data (drawing, simulating, etc.) lives in systems that can operate on more than one component type.  For example, the rendering system might be interested in both the position and the sprite of an object.  I like to store all my components in contiguous arrays and have my systems be free functions.  I've already written a couple of articles about this so I'll link them for if you want to know more.