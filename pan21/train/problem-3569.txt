Contrary to what you wrote in the first sentence of the question, your problem is not an instance of integer linear programming (ILP) and cannot be formulated as an ILP problem.
where $(\cdots)_j$ denotes the $j$th coefficient of the vector, and then minimize the objective function $t_1+\dots+t_n$.
As another alternative, you could relax your MIQP instance to an instance of quadratic programming or semidefinitive programming, solve for a solution in the reals, and then round each real number to the nearest integer (or use randomized rounding), and hope that the resulting solution is "pretty good".  This might be more computationally feasible (as quadratic programming / semidefinitive programming over the reals is easier than MIQP) but there are no guarantees on the quality of the resulting solution; it might be arbitrarily bad.
Your problem seems related to the Closest Vector Problem (CVP) in lattices, which is believed to be hard. Here you have the additional constraint that the coefficients be 0 or 1 (instead of them being arbitrary integers). If $n$ is not too large, you might be able to use existing algorithms, like LLL basis reduction.  I don't know whether this will work or not.
With the $L_2$ norm, this is no longer an ILP problem.  It is an instance of integer quadratic programming.  You could try applying an off-the-shelf solver for mixed-integer quadratic programming (MIQP).  However, MIQP is pretty tough in general, so I don't know whether this will be effective.
If you used the $L_1$ norm (instead of the $L_2$ norm), it could be formulated as an ILP problem.  You'd introduce additional variables $t_1,\dots,t_n$, add the linear inequalities