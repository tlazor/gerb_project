In both cases, you need to invalidate the relevant parts when a vertex changes. Changing one vertex invalidates the lengths of both sides that depend on that vertex (but not the opposite side). Changing any vertex invalidates the triangle's area.
The triangle's area would be much the same way: compute on demand, save when computed, returned if and only if valid.
A circle (or possibly an ellipse, though opinions vary on that) has a circumference. Another closed polygon like a triangle has a perimeter, so that would probably be a better name to use.
If you're going to use a vector at all, I'd validate that it has a length of 3 when you create the triangle, then use operator[] to index into the vector from then on. Using at(n) every time you want to access a vertex adds quite a bit more overhead without gaining much (of anything).
In C++ there's a fairly long tradition that you shouldn't pay for what you don't use. In this case, you pay quite a bit for information you may never use, such as the lengths of the sides. I'd prefer to calculate side lengths on demand, so you only pay for that fairly expensive calculation when/if you actually use it. On the other hand, we also typically want to minimize the cost of those calculations, so we don't want to repeat them unnecessarily. 
In both cases, "invalidates" should really be read as "potentially invalidates", I suppose. At least in theory, it's possible to change a vertex to another that produces the same area, but since it might have changed, you just invalidate the area, and re-compute if needed.
A related (but arguably separate) point would be to use operator<< instead of Display. This lets a user specify the destination stream, and returns the stream to let the user chain, find status, etc.
To accommodate both of those, we'd typically make the lengths of the sides mutable, and either have an invalid value or else a separate bool to indicate whether a length is valid at any given time. In this case, we could (for example) use any negative number as an invalid length.
This way, when the user wants a length of a side, we can just return the length if it's valid, or compute/save/return the length if it's not currently valid.
You have a lot of repetition of the code to compute the hypotenuse of a right triangle. I'd prefer to move this into a single function named something like hypot, and just use it.