Alternatively, you can just point Exim to the ramdisk mountpoint. To do so, you'll need to set the following in the exim.conf file:
You will probably want to increase the default space allocation. Since ramdisk size is controlled by the kernel, you will need to set a kernel option to increase the allocated space. If your bootloader is GRUB, you can edit the grub.conf file and add the ramdisk_size kernel option. Your GRUB config file should then look something like this: (in this example we're setting the ramdisk size to 256MB)
there is this blog post that details creating the tmpfs and modifying the exim startup script to make it a little more robust.
Before you proceed please compose a message that you will be sending to users found by mail server log parsing informing them, that your server just lost their message due to power outage/reboot/crash/human tripping on a power cable.
You'd loose user's data through a plethora of scenarios here, including a clean reboot or shutdown of a machine. Please, search for some other idea on mail server performance tweaking.
You can do a bind mount so that Exim will continue to write to its standard spool directory. To do so, add the following line to your /etc/fstab file:
Mail servers are very serious about data persistence guarantees. They go to great pains to make sure that when they take responsibility for user's mail, that message is secure on disk and is going to survive crash/reboot or any other event that wipes contents of the system's RAM. You are going to make sure, that their efforts will be wasted. Are you sure you want to do that?
As has already been stated, placing the spool directory in RAM of tempfs is risky as you can lose all emails in the queue if the server crashes. I have gotten very nice performance by placing the /var/spool/exim/input and /var/spool/exim/msglog directories on an SSD drive (over 60000 sent emails per hour on cheap desktop hardware).
It is also a fact that exim will trash rather badly if you have a few thousand emails or more in the queue as the queue runner processes will spend proportionally more time stumbling over each other and examining locks than actually getting emails delivered. Fast disks (SSD or ram-based) surely helps, but keeping the queue short is always better!
Instead of using a ramdisk, rather use tmpfs, supported by Linux kernel 2.4 and up. The benefit of using tmpfs is that memory is dynamically assignable, making it a far more flexible solution than ramdisks. Additionally, if your tmpfs partition runs out of space, the kernel will automatically begin paging data to your hard disk, whereas the ramdisk solution would simply cause Exim to stop processing messages and crash.
Many linux distros already have some preconfigured but unused ramdisks. Run the following command to list your current ramdisks:
Additionally, make sure that you have the correct permissions set on the mountpoint (replace username and groupname with the correct group and user for your system):
After a reboot your new ramdisks should reflect the updated space allocation. Since there is no point in formatting a ramdisk with a journalled filesystem, we'll just use ext2:
You can now use this partition as though it were a standard hard disk partition. Note that if you unmount the partition, your data will not be lost, and the RAM will not be freed, since the kernel permanently allocates the required space until rebooted. 
Using tmpfs, you won't need to do any of the of the steps required for the above ramdisk solution. The following steps are required for a successful tmpfs configuration:
The -m 0 option keeps mke2fs from reserving any space on the file system for the root user. You can now create a mount point for the ramdisk, mount it, and begin using it.
The /var/spool/exim/db directory can preferably be placed on a ramdisk (symlink that directory to /dev/shm is the easiest way), as losing retry hints is not fatal. 
This will create a 1GB tmpfs partition with 10'000 inodes. The exim configuration is the same as when creating a ramdisk - either tell Exim that the location of the new spool directory is located at /mnt/tmpfs or bind the existing spool directory to the /mnt/tmpfs mountpoint. Alternatively, you could just mount the tmpfs partition onto Exim's existing spool directory right from the start - so instead of the above changes to the /etc/fstab file, use this line instead: