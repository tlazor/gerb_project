In C++, this does what you want (although modern idiom would have you write constexpr instead of const). In C, this defines a const-qualified global variable; the idiomatic way to define actual compile-time constants (capable of being constant-propagated and so on) is to use macros or unnamed enums.
You may also want to convert the characters to upper case just to be a bit more flexible towards the user (toupper())
This is not valid C, last time I checked. You'll have to make TOTAL_ROWS and SEATS_PER_ROW enums or macros, not variables, to get this to compile with a pedantic compiler. (Unless this is inside a function scope, in which case what you've got here is a C99 variable-length array.)
To answer the question you asked: You want to repeat asking the user for a seat number until he enters a valid seat number. In some languages (e.g. Pascal), there's actually a control-flow primitive called repeat ... until. In C, we spell it do ... while. Sample code follows, far below.
What other suggested and as you mentioned already decrementing i in the for loop may be a bit confusing for the reader (well it was for me at least), having a do..while loop feels more natural here where the while condition is false until user enters correct code (or changes his mind and gives up).
The use of ALL_CAPS is traditionally reserved for macros; for a plain old const variable I would use total_rows, and for an enum I might use any of total_rows, TotalRows, or TOTAL_ROWS depending on the rest of the codebase.
C has a strong bias in favor of half-open ranges ("at least A but strictly less than B"). Also, it's easier to read range comparisons if you organize them in the usual mathematical way, e.g. 1 <= x < 10. C doesn't support "chaining" comparison operators in that way, but we can still pretend like it does, for the sake of readability:
Another remark: since you are reading char's and not strings, I suggest using scanf("%c", codes[i]) (so replace %s with %c). Or you can also use getchar().
Either increase the buffer, change the format specifier or use an alternative method of reading from keyboard e.g. fgets() followed by sscanf() or simply read the characters one by one using fgetc(). The latter method has the advantage that you could prevent the user from entering invalid characters while he types.
You want to read 2 characters although you use scanf("%s", codes[i]) this can have the effect you are overwriting the end of the buffer when you read scanf("%s", codes[required_seats-1]); since there is always an \0 added to your two characters. 