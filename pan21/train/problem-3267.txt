This user will get the console session, so an administrator can log in via RDP using their own username/password and not disturb the automatically logged-in session.
Once SrvAny is installed, you'd use the command "InstSrv NameOfYourProgram c:\Path\To\YourProgram.exe". It will then be found on the Services screen. You can go into Services and set options for it, such as username and password.
Use Group Policy Editor to disable logout and shutdown. That should make it so that you can only disconnect from RDP, not terminate the session (I can't test it here to be sure, so ymmv here)
As Chris_K said, what you most likely actually want is to run the program as a service - that will allow it to run in the background with the assigned username/password without needing an active login, and without going away when people log on/off the server.
From http://www.addictivetips.com/windows-tips/prevent-log-off-and-shutdown-of-a-windows-xp-computer/
Windows server editions already have 3 sessions, two remote and one console (which can still be accessed using /admin in rdp).  The remote sessions won't log another user off but sometimes when someone disconnects rather than logging off it will block other users from connecting.  The /admin session always allows someone to connect but will logoff any existing user of that console session, so it is good to keep spare to let you go in and kick a dormant user off.
And if running the task at startup still does not work properly for your particular application, then you could try setting the task to occur "at log on", in which case you could combine that with the autologon setup suggested by BÃ¥rd (see MS KB article 315231 for more info... unfortunately I can only post a single hyperlink in my responses)
In addition to making it known to everyone not to log the app user off we have nagios monitoring setup to check that the app exe is a running process on that machine.  So if it does inadvertantly get shutdown we get a warning and can go start it again.
So if your application does not respond well when running in a service context, one way around this on more recent versions (Vista, Windows Server 2008, etc.) is to set the application to run as a scheduled task, where the task is set to occur "at startup".
I agree that running the process as a service would be ideal, since it would not require a full logged on session at all.  However, being a form-based application, this could give rise to interactivity issues (even when selecting the option to allow the service to interact with the desktop), especially in more recent versions of Windows where such forms insist on presenting themselves in an isolated desktop environment (for security reasons).
Look for the options "Remove Logoff on start menu" and "Remove and prevent access to Shut Down command". It will still be possible to do it from the command line, though - if you REALLY want to block it, you can also block the command line.
You'll need a program called SrvAny which is capable of running arbitrary programs as services. It's available directly from Microsoft as part of the Windows Server Resource Toolkit.