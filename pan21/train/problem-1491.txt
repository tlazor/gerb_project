In essence, whatever an IDE does to execute a process remotely, you can always find a case where it doesn't have the same environment as a local process. You have to find out how to set variables in a way that is compatible with an IDE of your choice, and stick to that approach.
Environment variables are set separately for each process (possibly with inheritance), so if you set MY_ENV_VAR in a shell and test for it from the same shell (with Python code or otherwise) it will be set. If you run Python from a different shell, it won't be. Even in the same shell, you may lose environment variables if you spawn a process in a way that won't inherit them. For instance, sudo -u pi python ./myscript.py will not inherit MY_ENV_VAR, yet it's a perfectly sane approach for a remote IDE to spawn a process with a specific user ID.
The above assumes that you have access to the shell that your IDE is using as a remote session, and set the variable there. This may not be the case. IDEs can start their own login shell, their own subshell, or start processes with no shell at all, and in case of login shells they may log in as a user you don't expect. If you set MY_ENV_VAR in your .bash_profile, it will be set if you login as pi but it will not be set if you start a non-interactive shell as in ssh pi@raspberry.local python ./myscript or a subshell as in sudo -u pi bash. Needless to say, MY_ENV_VAR will not be set if the IDE uses a different user for remote execution, which may not even use bash as a login shell.