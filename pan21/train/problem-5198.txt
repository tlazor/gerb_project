The information model I am modelling from includes an "any type". For example a customer can have zero or more 'entries' each of which can have a number of values. Each value could be a either date, numeric, string or spatial. Note query performance is more important than insert performance.
  (a) a single table encompassing all the types. Each record in entry_data would only use one column for the value. Also each valuetype column needs to be indexed. This seems a little wasteful (although I'm aware oracle won't index the null values )
However, if your domain model says: A customer can have many entries. An entry belongs to exactly one customer. and: An entry can be either a number, a date, a string xor a spatial, then you can model this, by way of Extended Entity Relationship-Modeling, in three different ways, of which you have already identified two.
Disclaimer: What you are trying to do is not a good fit for the relational model: You want to store data of any type (the BLOB datatype would theoretically do) and you want to be able to query those data with good performance (a specific datatype is required to allow indexing). These are contradicting requirements for an RDBMS but fine for NoSQL-databases. I am aware that many projects require a key-value database that shall be open for storing anything ("We don't know yet which properties our clients want to store"), but insist on using a RDBMS for it. That won't work in the long run: Been there, done that against better knowledge. Use the right tool for the job.
Datatypes table will abstract your datatypes, however 2 value** columns are created in entry_data due to the fact that your data can be different in nature(belong to different Classes), thus would need different storage. But as far as varchar2 vs. number vs.date -- all can be placed into varchar2 , just would need later on some casting. And with very simplistic logic of NVL in code you can determine which column was populated out of value or value_geometry.