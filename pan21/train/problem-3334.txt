Now assigning and comparing these AddressType values looks just like an enum, but explicitly prevents you from using any magic numbers.  If you really need it, you can also add conversions to/from int, but only allow it if they are known values.
Alternatively, if you want to go with your approach, you should restrict it to only allow you to instantiate an AddressType with known values, which will prevent the use of magic numbers and make it more strongly typed than using a plain int.
You would then store your values as int on your entities, but always compare them against these constants.  This would give you the same usage pattern as you showed in your question.
You could use something like the following, though if you have more than 2 values you'll probably want to use a dictionary to map from int to AddressType:
I think the biggest drawback to your approach is that you're adding complexity but not really getting the main benefit you're after, which is to avoid magic numbers.  This code doesn't prevent you from using magic numbers since it automatically converts from any int to an AddressType, and it still exposes its values as an int.  So I would suggest one of the following two approaches.  The first one is very simple but seems to give the same benefits as your code.  The second one is more along the lines of what you're after, so there's some complexity, but has some added benefits as well.
I think the simplest thing would be to just have a static class with constants defined in it, like so: