The star topology setup can sync changes pretty instantly, but it requires Unison to be run a couple times. Suppose that the load balancer lands a user at server D and the user uploads an image. Then if Unison is running with the repeat=watch option, basically as a daemon watching your files for changes, then it'll start syncing to the hub node A as soon as the image is uploaded. Now you need to trigger Unison to run between A and the other spoke servers in your setup. Ideally you would want to split this work up among the spoke nodes, as opposed to running a bunch of instances of Unison on A to push to the spokes. So I'd use inotifytools on A to watch for changes, and whenever a change occurs have A send a command to each spoke to run Unison to fetch the changes on A.
In contrast there is a complication that comes with a fully-connected setup, especially if just using repeat=watch to sync thing instantly. Suppose a user uploads a file to server D. Then in your fully connected setup you'd have Unison run one at a time, once for each other server to sync that file. So first D syncs to A, then D starts to sync to B, but because A has changed and is now out of sync with B, it will also run Unison and try to sync to B, and now B is trying to get updated from two sources at once ... and this might make Unison cranky at the least. Then goodness forbid that you get conflicting changes on two servers, like say a user uploads their file to D but before everything syncs another user uploads a file of the same name to E, in addition to this first headache.  
Since you're aiming to sync a website between these servers, what you need is to make sure the servers are in sync all the time; that there is little or no delay between the files being changed on one server and getting Unison to update those changes to another server. This can be done pretty easily with the Unison option repeat=watch and maybe using inotifytools.