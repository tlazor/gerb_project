Challenges faced by each 'location' means you may need to regularly re-visit the overall strategy, and you should be 'trying things out' in various teams and regularly rolling those changes back into the overall process. Process is just like software delivery, too.
Once again, not DevOps-specific, but a classic problem of business that comes from far before electronic computers.  Reduce dependencies and make it clear when they happen that they are happening, and the effects of slippage, and keep all affected parties informed of schedule changes.
Etsy has their famous example of 'schema change thursday', where they allow non-contract-breaking-changes to be deployed as often as needed, but anything that will require coordinated change between systems happens on a specific day every week.
Large enterprises will commonly adopt a delivery framework, or operating model, that has been built to support large enterprises.  From an Agile/DevOps perspective, which is my area of expertise there are three frameworks of interest:
As far as I am aware there are no statistical data about the enterprise adoption of each of these frameworks and whether they have adopted DevOps practices in addition to Agile practices, however from experience many organisations appear to gravitate towards Scaled Agile Framework.
Imagine a fast-food chain restaurant. Each restaurant may re-organize things a bit according to the architecture of their specific location, to best suit their needs. However, the general components and the ingredients and the intended SLAs for delivery will be the same. An employee should be easily able to transfer between any location with some minor re-orientation.
This is a problem any company with multiple development teams, or multiple teams of any sort that share a common functionality, will face.  The simplest answer is to move them all onto a shared cycle.
Again, not a problem specific to DevOps.  As with developer teams, you need to increase visibility into other teams and introduce standards to keep people in sync.
Again, need authoritative control and agreement between teams... a corporate brand with many locations, not a food court of different franchises.
It is worth noting that adopting an "enterprise-grade" framework is not a requirement in an enterprise, at the end of the day Agile, DevOps and Lean are about adopting the right practices for your organisation, not the most popular ones.
Kristof Horvath discusses the application of DevOps in these enterprise-grade agile frameworks in his article: Scaling Agile in Large Enterprises: LeSS, DAD or SAFeÂ®?.
I view this as both a failure to standardize process across teams and a management problem if people aren't sticking to process. Individual teams should be flexible in terms of how they manage their people, but processes should be transparent and followed.