The word "INVALID" is hardcoded in four completely independent places.  Better would be to either create a constant or to restructure the code so that it only appears once.
Here is an alternative that uses all of these suggestions.  It does not use pow or anything else from <math.h> and does not use strcmp or anything else from <string.h> so does not have those #includes.  It makes a single pass through the value and efficiently implements the checkdigit verification.  Finally, each string appears only once and a card is assumed to be invalid unless otherwise successfully categorized.
Your code uses printf with a format string of "%s\n" in some places and with a hardcoded string "INVALID\n" in others.  The code would be simpler if there was a single call instead of multiple, and if you would use puts() instead of printf.
To count the number of digits, the code does successive divisions.  Then when it verifies the checksum, it does those divisions again.  Better would be make a single pass and calculate both.
There is no need to store separate odd_sum and even_sum values.  Instead, one can simply keep a running total and eliminate much complication.  
Floating point math is great for some things, but can be computationally costly on some machines.  There are also rounding and other issues (e.g. denormals, NaNs) to consider. This code doesn't need any floating point routines.  All it really needs are the first and second digits of the credit card number.