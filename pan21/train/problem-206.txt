There's one way to "escape" GPL or (practically) any other license. Make a clean-room implementation.
Regarding the question about the Quake engine: code can be released under GPL and also under other licenses. Valve licensed Quake by paying money to iD. Later, everyone in the world was granted a GPL License (sic) to use the Quake source code. When iD GPLed the engine, they didn't retroactively convert other licenses to GPL; that would be impossible. In fact, iD can still license the Quake engine under a different license if they wish, as they own the original copyright.
That's actually not the case at all.  The engine source remains under the GPL for sure, but it pays to have a read of the GPL FAQ, particularly the parts of it that relate to the output of a GPL program, which I believe are relevant here: http://www.gnu.org/licenses/gpl-faq.html#GPLOutput
This doesn't mean that you're safe from lawsuits.. patents and "look and feel" crap is still out there, and at least in the US, anyone can sue anyone for no particular reason (or at least it seems so..)
This changes your situation quite a bit.  You're not actually in a position where any content you develop for or with this engine also falls under the GPL; that content is yours, you own the copyright for it, and you can license it as you wish.
There are a lot of misunderstandings about what the GPL actually is and actually means, and I'm detecting one in your question:
If that code is yours you can change license every time you want, decide to be payed or not, you can do what you want, but if the code it's not yours you stick with the license if you want to avoid troubles; big troubles.
The owner can also refuse to accept to be payed, it's a situation like the one that you have with the patents, if you can prove that you own the code doesn't mean that you are putting it on the market for money, many many times the patent or the license is supposed to force the market or the user to stay in a confined space.
Hire two groups of people. The task of the first group is to study the original material in minute detail and describe it. The second group, who never, ever get to see the original material, will write a new implementation based on the description.
Only the person, the group of people, or the activity that owns the code can change its own license.
This is how BIOS on original PC clones was created; the BIOS was the only bit IBM didn't let other people copy.