GPIO Zero provides a mock pin interface, meaning you can run the same code on your PC and emulate the pins. See examples of how it's used in the test suite.
I simply choose what sections of code to run by checking what machine I'm running on. I can then emeluate a GPIO call - like a switch closing - from the PC keyboard.
They are mostly used for Unit Testing, but I'm pretty it would work very well in your case. And you would probably be better of trying it by writting some unit tests.
There's a library you can download here: https://roderickvella.wordpress.com/2016/06/28/raspberry-pi-gpio-emulator/
Being a newbie to Python and the Pi I didn't understand Joan's answer and needed a simple (bot not elegant!) way of testing my program on the PC without error messages caused by missing GPIO calls.
It replaces on-the-go an existing class, and you just have to write yourself the behaviour you're looking for. It allows you not to change anything in your logic (even the imports), but still get the return values you suppose you would receive from an actual call of the API.