Easiest answer is to use the ~/.ssh/config file and add a directive for the destination only, as in (borrowing from your own reference, adding only the last line):
The answer is you don't need to do anything.  EACH ssh connection is encrypted.  The traffic "seen" by ruapehu and aoraki is not in the clear.  You don't need to add any additional encryption layer.
named ruapehu.example.com, aoraki, and tongariro. The example simplifies the configuration by using proxy commands. One weakness in the scheme is that the first two nodes can read the traffic, while it would be better if they cannot do so. If we manage to introduce the commands [encrypt] and [decrypt] in the chain, we may actually come close to what the tor network does. Another problem is how to introduce port forwarding in the multi-hop chain? The following will obviously not work, but it is pretty much what I would want to do:
In what we could call the canonical multi-hop ssh example, we can see that the following command would route the user's ssh traffic through three (fictitious) consecutive nodes:
That is, assuming you can open port 80 on your local host, otherwise you might have to use a non-privileged port, something above 1024 (depending upon your host and configuration).