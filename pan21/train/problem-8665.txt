Finally, to clean up test tables, you will need some method to identify them (table name pattern, owner etc). You can then automate a script to drop such tables.
Developers should then create new tables in a developement database and these are migrated to production via the DBA team following a code review and test cycle.
The review process should be able to ensure that only tables fulfilling a business need are created and that the data the table holds is not already available elsewhere. A message to the developer will likely just be ignored where a review action that means the code cannot progress to test will need to be acknowledged and accepted by the reviewer.
If this is about developers creating temporary tables 'at will' in the production database then revoke their privileges ! Now ! Only privileged users should be creating any objects in production and then only through tested and reviewed scripts.
If this is a production database, you should remove developer's access rights to create tables. This can be achieved via the REVOKE command. You may have further work to do if the developers are adminstrators.
If this is mainly about temporary tables from migration and integration activities then I suggest ensuring that they are named consistently so that you can create a script that will periodically drop them. You could schedule this via DBMS_JOB or whatever scheduler is normally used and it will call a package to find the tables and drop them.
Alternatively, you could create a DDL trigger that could stop users creating tables via a ROLLBACK and create a warning message for the developers as you suggest.