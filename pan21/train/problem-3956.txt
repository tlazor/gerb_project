Instead of setting the values to either 1 or 0, this makes the top a bit more smooth. The clamp is required to make range of thr values inside the mesh lie between 1 and 0.
In the GPU gems article, we get a nice way of generating a 3D signed distance field based on terrain which is mostly 2 dimensional. You simply add together the results from 3D perlin noise with a simple modulating function that goes from 0 to 1 from the minimum to maximum height of the world.
This is because unlike the 3d-noise function, the density values go straight from 0 to 1, and MC always generates vertices along a grid instead of at different heights in between the grid. How do I modify the above IsoValue function to not always give values between 0 and 1 (to make smoother looking terrain) depending on how close the generated noise is to the grid?
However 3D perlin noise is not very useful for generating terrain. 2D perlin noise is much better. One could use the following function to generate the density values at each corner of each cube sent through the marching cubes algorithm with an iso level of 0:
The Marching Cubes (MC) algorithm works by taking 8 points of a cube with different density values and converting them into vertices and triangles based on a given iso level (threshold above which is considered solid area). It can create quite a smooth result. For example the following picture shows MC generating polygons using a 3D noise perlin function.
Note that Marching Cubes needs continuous gradients in 3D to represent smooth surfaces. The function you provided does not have continuous gradients in 3D (there is a  hard cutoff in x and y based on the height value, and no gradient in z).
The trouble is that what you want is a continuous 3D function over which to compute the isosurface. In other words, you want a signed distance field representation of the map. Not a heightmap. 3D perlin noise is already representing a signed distance field in 3D, so it works with marching cubes. 