My suggestion for an ideal scenario would be to build a development environment that is an exact copy of your production environment - same releases of all software, same database contents, etc.  This can be made publicly accessible, or locked away behind a firewall where all your developers & QA folks VPN in to do their work (which way you go depends heavily on your workflow and processes, but I personally like the VPN solution).
Generally speaking your testing environment should be entirely separate from your production environment -- This allows you to test things like software updates before rolling them out to production, so if they break stuff you can determine what and how to fix it without the time pressures associated with your live environment being down.
It's also often advantageous to build your development environment using something like VMWare, where you can snapshot the environment before making major changes.
You will also need a process in place for promoting your changes to production.  If you have the time to invest in a solution like Puppet or radmind now it will make future deployments much easier (VMWare comes in handy here too -- You can test your deployment process on virtual machines and debug it so when it runs in production you know how it will behave).