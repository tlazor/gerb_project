In summary, this is a lot of work and complexity to add to your project. As you can see, it's a bit difficult to get the Disposable pattern right. Weigh your options here. This is really only worth it if you're calling this code a lot. 
And now you have it. Of course, no harm would have been done without the guard clause in your particular case, but I find it good to just implement the same boiler plate every time. It kind of burns into your brain after a while. 
Every time I've ever found myself thinking that I need to implement IDisposable, I was wrong. Each and every time I was able to create a cohesive class that avoided keeping disposable objects as members. Instead, I found ways to kept each call to the disposable object short lived. I challenge you to see if you really need the excelPackage to live for the lifetime of this class. I would try to keep it inside of a using block in the method you'd like to call. 
So, in any public member of your class that uses excelPackage, you should check the new disposed field and throw accordingly. For example: