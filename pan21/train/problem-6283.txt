Not only that, but it would probably be very hard to spend most of your life in any CS field, where you would have to maintain such intimate contact with such a delicate and capricious (and not to mention difficult) processes, while simultaneously maintaining no interest whatsoever in even the basics of why things work. In other words, I suppose you could glue together libraries for the rest of your life, but if that doesn't sound like your thing, you will have to have at least a passing acquaintance with the fundamentals of the problems you deal with.
One of the founders of the theory of computation, Alan Turing, tried to pin down the meaning of “computing a function” for a human being equipped with a piece of paper, by giving a mathematical description of the process. I’m not the only one to think he was extremely successful, and Turing machines proved to be an accurate model of many other computing processes.
The central open problem of complexity theory, P vs NP, is just a formalisation of another philosophically significant question: is it really harder to solve a problem than to check if an alleged solution of it is indeed correct? I believe this question is worth asking, and answering, independently of its practical significance.
Some other guys, the first ones usually identified with Juris Hartmanis and Richard E. Stearns, tried to describe mathematically what it means for a function (resp., a problem) to be hard or easy to compute (resp., to solve). There are several complexity measures according to which the hardness of problems can be described; the most common one is just how much time we need to solve them. Alan Cobham and Jack Edmonds were quite successful in identifying a reasonable notion of “efficient computation”.
Within the computational complexity framework, we can now prove some results that are consistent with our intuitive notion of computation. My favourite example is the time hierarchy theorem: if we are given more time to compute, we can solve harder problems.
One of the main reasons why I find the theory of computation (“my” branch of theoretical computer science) fascinating and worth studying is the following one: it provides us with a way to investigate some deep (and sometimes puzzling) philosophical questions.
Now that we possess a class of mathematical objects describing computations, we can actually prove theorems about them, thus trying to uncover what can be computed, and how it can be computed; it immediately turned out that lots of perfectly legitimate functions cannot be computed at all, and that they can be classified according to a degree of uncomputability (some functions are just “more uncomputable” than others).
We cannot "convince" you, since computer science is not mathematically better than AI or any other field. So, we cannot carry out a proof of its dominance! IMO, It is more a matter of taste than anything else.
While actively participating in TCS research is a question that probably only you can answer, a good starting point (IMO) is to start off with a view of the problems you're interested in looking at, and go from there. You may also not even have enough information to answer that question, so a better way to proceed might be to just see where your interests take you.
What most intrigues me is the ability to apply the theory of computer science to other disciplines, especially biology and cell biology.  If this notion intrigues you also, I'd suggest you take a look at the following: an essay by Jeannette Wing about the importance of Computational Thinking; and an NSF report about applying the Algorithmic Lens to other scientific disciplines.
If you make a career as a computer scientist, your job will probably involve not just processing and structuring data in a way that makes it useful and efficient to use, but also thinking about how and why what you are doing works, as well as in which bounds it operates (if for no other reason than to understand it enough to implement it). This is ESPECIALLY the case for AI/NLP/IR, which is VERY research-intensive, even if you are not in academia. In fact, going into AI pretty much guarantees that you will deal heavily in "theoretic" problems, and in fact it may be hard to find a job without that background. So that might be one compelling reason you would consider it.