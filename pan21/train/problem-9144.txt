I am using Sublime Text 3 as my editor, so there are also several features available to ensure proper styling on future code.  Some quick changes to the user settings in ST3 include can include:
The most elegant solution (possibly short of using a proper template engine package) was proposed by @Gwyn Evans.  The string module provides us with a Template class which allows for $-based string replacement rather than the normal %-based format and also eliminates the need for the pesky s conversion types.  The document PEP 292 provides an excellent in-depth explanation of the rationale behind this method (which I discovered the hard way as explained above). You define your string as a Template and then perform a .substitute() using your key mapped data.  The above example becomes:
This is certainly better than the original post and solves my concern about list mixing (or more likely columns being moved in native Excel file).  However, it still has some weaknesses.  Forget one of the s's and Python hands you an error:
After reading through PEP8 and the supporting docs, you will gain a deeper insight into the importance of style in your Python code.  As @Josay mentioned in his thoughtful answer, the style of the code is poor (spacing issues, line lengths, naming conventions) leading to poor readability.  In addition to using the autopep8 tool mention in @Josay's answer, some of the style issues can be fixed with changes to methods as explained below.  
The data in the program is being read by cvs.DictReader() into a dictionary with column heads as the keys, so a slightly better approach would be to at least use the optional mapping key on the string formatting operator to take advantage of that.  The above example becomes:
or worse (in my opinion), you put too many s's in or put it in the wrong place and you can end up with a semantic error, i.e. you do not get an error from Python, but the output is wrong:
If you need more output options, look at the string.format functionality, but this is probably best for starting with.
As mentioned in the original post, the simple string replace method of using the string formatting operator like:
You can also change the $ delimiter character or make other changes to the template behavior if desired as described in the docs.  
Python has a number of templating options, but the simplest to start is probably the string.Template one described in https://docs.python.org/3/library/string.html#template-strings
is very fragile.  It works fine for very short strings like this example, but not for longer strings (like documents).  Mix up your list and your bar suddenly runs into a foo!   
In addition, a linting package for ST3 can be installed and used to highlight style issues as you code.  I selected the SublimeLinter3 package with the pep8 plug-in.