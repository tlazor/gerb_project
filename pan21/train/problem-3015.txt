One of the main advantages of the async/await pattern is that it allows for code locality - that is, to write straightforward code, line by line, that doesn't have to be structured like Task's ContinueWith. 
I'm feeling odd about covering using with the await Task.Run since I can also await for repo.SaveChangesAsync(), but then IsBusy will not change (and the Wait message will not be made visible). 
I'm using a DataContext to insert an object. Currently it's working, but I'm feeling things could be done better. Method is called from UI (Using Caliburn Micro Binding). IsBusy is a property used by the UI (Xceed Extended WPF Toolkit) to display a wait message.
This is especially useful with async/await's support for try/catch/finally, allowing you to put clean-up code in the same level as your set-up code, namely - putting IsBusy=false in a top-level try/finally block. That way your UI-handling code is at the top level, and the repository/business logic code in the inner task, and can even be extracted to a separate method that knows nothing of the UI.