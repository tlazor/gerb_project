There other potential costs such as information leaks around the development process that could potentially be used to derive hacks, but you made it through the testing process as-is, you shouldn't really be worried about that.
Making games is a business. Even if it isn't a money-making business, it's still a business with limited resources. Every decision requires a cost-benefit analysis, even if you don't go writing business cases for each one. And the simple fact is that cost of leaving those assets in the game is a slightly larger download, and the benefits are a significantly reduced risk of something blowing up right before release. 
The most obvious cost is that someone has to delete them. Now you could just put an intern on the case and have him go searching through files and whatnot to remove the ones that aren't needed in the actual game. But still, you have to pay for this and, even if you don't (because you're a monster who doesn't pay interns) you still could have had that intern doing something useful like ordering pizza for the dev team, so it still costs you.
It's been hinted at, but it hasn't been fully touched on by the other answers: it all boils down to cost, and some of the costs are trickier than you might think.
There are several ways content could be referenced that can defeat such systems, generally simply by referencing the content by something that system can't track (such as creating a implicit or hard-coded reference in code to some asset).
Even assuming you have solved the problem of finding all content inter-references, you have the problem of not being able to tell if something is actually used. Maybe some asset is referenced in a script somewhere, but the trigger volume for that script is incorrectly placed inside a wall and the content can thus never spawn in-game. Testing this exhaustively is quite difficult as well. 
Surely this just takes up extra space on a disc and means more data has to be downloaded if you download the game? 
All those question marks in the "less obvious" paragraph represent uncertainty. You just don't know. And when you're running a business, you have to trade your unknowns for knowns. And what is known is that the package you built passed testing, even if it has a little bloat to it.
It's usually not a sufficient amount of content to really move the needle much for load or file size optimizations. There are also tools for reporting the largest or slowest assets in any large build chain or engine, but the focus there is to reduce the impact of the major offenders and not find and locate every single wasted byte. Usually.
When automated (or automatable) methods for detecting and filtering out unused content fail, you are left with the old-fashioned way: human intervention. Humans make mistakes, bad assumptions (they may think a file is still used even though it isn't because somebody else made a change), and yes even sometimes choose to intentionally leave irrelevant content in the game as Easter Eggs. It's just natural human fallibility that leads to this.
It can be harder than you think to find all the referenced content in a large game that is worked on by multiple people. Even when there are explicit tools in place to help (we built such tools at ArenaNet, anybody who uses Unreal has access to Unreal's version of those tools, Bungie has tools that do the same thing and even gave a talk about them, et cetera)
Major games use something called a build pipeline. This is like another set of tools that handles building the game content for all the different distributions. Multi-platform games like No Man's sky and Watch_Dogs most definitely use different assets for the different platforms. So the way I see it there two possible answers to your question.
I was just reading about what was discovered in the files for No Man's Sky, a lot of things that weren't used or relevant to the game. I also read a short while ago about the E3 settings being left in the Watch Dogs files. Why do game developers leave old and unused files in the final game?
tl;dr:  No one will notice a 4% larger download, but they will notice if you broke the game by removing necessary files.
The less obvious cost is that the resource you're about to remove was put in for a reason: are you absolutely sure that reason is obsolete? Sure, you wrote this code for a demo and don't need it anymore, but is that entirely true? Did you write a useful function that you forgot to migrate to the other libraries? Did Stacey make a really cool graphic for the demo that ended up in the real game? Does an internal simulator still make use of that old level you used for testing?