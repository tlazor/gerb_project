Working with Javascript is like working with templates in C++. If it has what the function need it works. In this case length might not suffice for every browser. It is true that it is possible to use built-in functions like that but if that function tries to access a property which is not available in your object it will fail.
I'm going to say no, because this is an array. It works, but you are hammering a screw at this point. Simply use an array.
It's like you're driving along the motorway in a box that may have any of: steering wheel, tyres, axle, floor, seats ... and you don't know which.
Depending upon how Array is implemented on any given browser, this may completely not work at all. Breaking the API in this manner is a silly idea.
I'm not going to go into the depths of implementation detail with this one; I'm just going to say that you're invoking a single Array function on an object that is not an Array.
Now coming to your second point. AFAIK, ECMA script standard does not push any internal operation and even if it does browsers do not use them as hard rules, they take it as guidelines. So it is possible that your code will not work on every browser, but arguments object is implemented by the browser as well, to be compatible with its array architecture. Therefore using Array.prototype.slice.push(arg, 0); is relatively safer than using your custom object with built in array functions.