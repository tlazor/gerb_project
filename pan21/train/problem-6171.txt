Will by the time I get a 4.x supporting setup will there be new versions and a lack of backwards compatibility that trash all usage of 4.x?  Will 4.x ever dominate over earlier versions support wise before a new major version is realized and released?
Lately I've been looking at a lot of answers on this website that direct users to divert their work towards the most recent OpenGL versions, citing hardware surveys of DirectX support and only recommending earlier versions as a last, final resort (as if to imply there is something wrong with them that makes all usage of them invalid or pointless).
On the other hand Ogre3D takes a more complicated approach, instead of implementing a single hardware layer class they provide basic abstract classes for any hardware API (DirectX, OpenGL, OpenGL ES etc) each hardware layer is implemented by overriding this interface, this way you can have multiple API support with a more object oriented (but more complicated approach).
OpenGL 1.x is not likely going to disappear on PCs. A great number of luminaries in the GL community consider the explicit compatibility mode and deprecated features of GL 3.1 to be a mistake. The last time GL was scheduled for a massive break in compatibility, Khronos backed out and delivered an incremental update.
If I write a game engine that uses OpenGL 1.5 (not assuming what else I do), is it portable now and is it still portable five years from now or are/will support for OpenGL by hardware and drivers (be) exclusive to their (much more farther along) target OpenGL versions?
While nobody can see the future, it's very likely that your GL 1.x code will continue working on PCs for some time to come.
concept3d's answer is very right in that you really should abstract your use of the graphics API. Write a thin bit of code that wraps GL textures in your own Texture objects and so on. Then you can later write GL 1.x versions, GL 5.x versions, Direct3D versions, whatever.
Otherwise if your engine directly use OpenGL calls then you probably need to rewrite a lot of the functions to support newer versions. If you're a beginner and this one of your first projects, my main concern won't be about portability/re-usability but actually about how to make the engine,  you will mostly figure out that there are better ways of doing it after your first time. 
The short answer, OpenGL really changes after version 3.1, that being said don't use OpenGL function calls directly, but actually build a small wrapper around it. One way to do it is to make a class that is responsible for all openGL calls, this can be replaced once you want to upgrade to newer versions. You can for example have a Texture resource class that doesn't rely on OpenGL, the mapping happens in the wrapper class this is what Horde3D does. 
Portability problems will arise only if you want to target a platform that doesn't support GL at all, like mobile devices (which use GL|ES, so it's very similar at least) and most consoles (you can get a GL-like API on Sony's consoles, but it's still going to require porting work to support).
If I only have computers that can provide OpenGL <=1.5 or <=2.1 contexts should I just give up game programming if I can't afford a new computer with hardware and drivers for 3.x and 4.x?  Or should I finish my game engine the way I intended to?