The main idea of caching is to provide same responses to the same request without asking a back-end system. The problem with POST requests is, that you have to inspect the body to decide when two requests are the same. The best solution is to change from POST to GET. 
I understand that caching POST is a bit tricky because you cannot just cache based on the url as a key like for GET; it needs to actually inspect the request body. In case of multipart/form-data requests, there should probably be a limit on the size of the request body for it to be cached  (so that big file uploads, etc won't be cached). Nevertheless I really want to be able to cache short HTTP POST, or at least the application/x-www-form-urlencoded ones.
If this is not applicable you can try Nginx' proxy module with following setup (see the required limitation of the body size):
I am hosting a REST service which is sending appropriate cache-control headers. I use Varnish as a caching server in front of my webserver. However, a limitation of varnish is that it doesn't support caching HTTP POST and HTTP PUT. Is there any alternate caching server that will be able to cache these requests?