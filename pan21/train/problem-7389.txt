I am currently designing a system, which needs to receive data from serial devices (mainly ARM boards). To achieve this, I use some USB-to-Serial (FTDI232) adapter(s). I coded a simple loopback program (9600 baud) to test the setup, flashed the ARM board and was successfully able to receive everything I sent, without any data loss.
We switched the USB hub to a more expensive one, but it didn't change anything. We changed the PC, but it also didn't solve the problem. Additionally, it is confusing that hub does not drop packets we are sending to the serial adapter, but only the packets which are sent by the serial adapter.
The difference between direct host connection and connection over USB hub is that in host case the transactions are performed directly in native FS protocol, while connection over hubs needs a special driver that works with split transactions. You might have a weak split transaction driver.
Get better adapters that use USB 2.0 HS protocol. One thing with FS devices over HS hubs is that the host must use split-transaction protocol, which is known for implementation difficulties due to horrible complexity. I wouldn't wage any bets that the split transaction engine was ever tested on large number of crappy FS UART bridges.
However, this system will eventually require to communicate with many boards. Therefore, I connected a USB Hub to the USB port and used it to connect more boards. However, after a few days we noticed some problems. First it seemed like we had a few bitflips. Then it turned out, that even whole bytes are dropped when we receive messages from the boards. When we connected these adapaters to normal usb ports (without a hub inbetween) the problem went away.
We are thinking, that the USB Hub is causing it. However, we depend on it, as we will have to connect many devices. So before we create our own serial handling solution (dedicated FPGA or Pi based), I wanted to ask if somebody here may know what is up? Are there Linux configuration files, which maybe allow faster polling (if it is a polling issue)? I think the serial adapter is not the issue here.
The other thing is that many USB 2.0 hubs have a single TT, so overall performance sucks, and buffering/scheduling must be very careful. Again, with crazy CDC polling protocol all bets should be off. Get a better USB-UART bridge, something based on FT232H.
Be prudent when intermixing USB2 and USB3 devices and interfaces. Some problems can occur because of such an intermixing. Further, remember that some USB hubs are simply crap. 
We assumed, that it is a buffering issue. Maybe the serial controller or the device is sending its data out too fast. Therefore, we installed RTS/CTS flow control on the serial side. Again, the bytes were dropped by usb hubs and not when the serial adapter is connected directly to the PC.