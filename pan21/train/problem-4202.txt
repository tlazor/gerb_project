Look at how FPSInputController reads keypresses and then sends a command to the CharacterMotor.  You will want to create two new commands to pass (or possibly more, I've added "crouch" and "sprint" to mine, you're looking for "rotate right" and "rotate left"). You'll have to define new inputs as well, Edit -> Project -> Input.  Add 2 to the array size and define your keys.
If you look through the Settings, you can see a "Mouse X" setting. If you want to remove rotation with the mouse, you can directly edit this, or increment the Size field by 1. This will add another property at the end of the list, which you can edit.
You want to change the Horizontal movement, so expand that and delete the Negative and Positive Buttons, as well as the alt buttons. Alternatively, you can set your preffered keys for horizontal movement. For Q and E, it would look like this:
Next, go into the CharacterMotor and implement the methods you are attempting to call in the FPSInputcontroller.  They might be named setRotateRight() and setRotateLeft(), so find an existing one, e.g. setJumping(), duplicate, rename, and alter the variable, then go define the variable (there are multiple classes inside this file, your input booleans should be part of the CharacterMotor class, not the internal subclasses).
Next, find the Update() function, it will call another function, go to its definition.  Now add some lines that look at your rotateRight / rotateLeft booleans and do:
With the standard assets, this can be achieved quite easily, with the Input manager. To alter the settings, go to Edit->Project Settings->Input.
Start with the FPSInputController as it will be simpler.  Do not worry about if the lines you add throw errors that prevent compilation: you're simply trying to use a method you haven't made yet.
Also, you will probably want to set a high Gravity, so that the rotation stops quite soon, after releasing a key. You can also play around with the sensitivity, to get a faster or slower rotation.