Because they knew how many line it should take, and they were looking for statistical outliers. If the line count is way off then it is a sign of a problem.
In any case, I could not count lines of code. Even looking for outliers is through with dangers. I remember the quality manager coming to me with a big grin on his face. He had just got a new code metrics analyser. He had run the code for a large medical pump project (that I was working on), through it. It showed that one of my modules had a very, very, very high value for coupling. Much, much higher than any other module. I asked to see the data, it showed near zero for every other metric. I smiled and looked across to the name of the module, it was ……… something_factory. Yes, it was this modules job to have all the coupling, so other module could have none. I looked back at the quality manager, with a smile. But he did not understand why I was smiling. It took several meetings with my boss and human resources, to finally get him off of our backs. 
There is nothing worse when doing an interview than asking an opening question which your student doesn't understand well enough even to be able to guess the answer. 
I remember a story by Michael Jackson, about judging how brilliant some one is. I will include the last 3 paragraphs here.
I agree with the other posters here: using num LoC as an indicator is a very poor assessment of the code.
When I was an university, there was a myth that some lazy teachers (I don't know the technical terms for the roles), would weigh your reports, and give a grade base on that. I heard of one student that handed in some work with a load of blank paper attached, and got a good grade.
Over complex code is bad, see in working out the final grade, the number of lines of code, goes some ware in the denominator.
This is the only one that would make any sense, but people do a lot of thinks that don't make sense.
Using regular expressions may be pretty cool, but can make it very difficult to read for anyone that has to do maintenance on the code, or even to understand.
4) is it modular: resusable, logically broken into functions/methods with appropriate names for funcs/methods and variables
The scenario here doesn't really give much context for the evaluator's question. Most importantly, we have no information about what she did as a result of the opening question. It is perfectly possible that this opening was a hidden request for context - is the presenter actually familiar with  the code or just doing the PR part of the project? By asking a 'harmless' question which has no right answer, it makes the rest of the questions much easier to pitch.