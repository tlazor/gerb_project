The document just describes a particle system. Particle systems are nothing new, the difference with the demo is just that it uses the geometry shader to generate the geometry needed for the single partices. You can do the same on the CPU, the only drawback is that it is slower. Everything else can be done on SM 3.0 in a similar way as described in the document.
I suggest reading that, it is an interesting solution to a problem that he was having and may suit your game better
Is it possible to achieve something similar to nVidia's rain demo using only shader model 3.0 capabilities? If yes, could you point out a few documents/web resources that are suitable candidates and do not require a heavy programming load (e.g. not more than two hard weeks of programming for one single person)? 
The basic answer is that once you have programmable shaders, everything is possible.  It's not really valid to speak of DX9 or 11 "capabilities" in these terms as they can both achieve the same end result; the difference exists in the code that you need to write to get there.  So what on DX9 may be a complex multipass algorithm which is heavy on draw calls and state changes could be expressed on 11 with a much simpler, cleaner and faster setup.
It would be nice if the answer could also contain a pro/con phrase for the proposed idea (e.g. postprocessing rain shader vs. a particle based effect). 
Yes you can achieve this effect, however like I said to someone else, it isn't always better: http://blogs.msdn.com/b/shawnhar/archive/2009/04/01/motogp-wet-weather-effects.aspx