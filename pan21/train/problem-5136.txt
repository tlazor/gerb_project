On my modest laptop I loaded up 25,000 animating sprites and still ran at 60fps. Add in background rendering, game logic and physics, and input, and maybe it could only handle 15,000. The trick to getting XNA to run fast is discouraging the garbage collector from running. Avoid heap allocations in your update loop(use structs), don't release references until the main gameplay sequence has a break, and watch your iterators.
SDL is a popular software renderer, and has a C#/.NET binding:  But like Joe and others have said, worrying about super fast rendering is silly if you want to use C#/Mono/.NET. You'll already get a lot of performance out of using something other than Flash.
If you want to be really fast, go use C++ with SFML. But again, make sure you're actually going to have issues with performance.
SpriteBatch doesn't immediately send draw request to the graphics card, but puts them into a list. If the next draw call is for a different Texture2D or SpriteBatch.End() is called all draw requests from the list are sent at once to the graphics card and the image is only copied once to the graphics card memory but rendered for each request in the list.
This is just my opinion, but performance-wise, it shouldn't matter. Pick the framework most comfortable to you. It will save you a lot of pain in the long run. Not only that, but any decent framework should be performant enough for your needs. If you try one framework and it can't reach 60 fps, then either your code is terrible, or the framework is. If it's you (more likely) then no framework will fix it for you. If it's the framework, then it's junk and shouldn't have been on your list anyway.
If you actually are in a situation where performance is critical, for example you are doing far more operations than normal, then you probably shouldn't be looking at C# as a language anyway (unless you've already mastered the garbage collector.)
So you can either put all images your game needs into one big image and tell the sprite batch which parts of it it needs to render or sort your sprites to draw after drawing depth and texture.
Your problem seems to be to render a lot of objects on screen. XNA is more than capable to handle this, but you don't need to go low-level for this.