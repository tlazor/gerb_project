If you're booting with Secure Boot disabled, you can change shimx64.efi to grubx64.efi; however, shimx64.efi should work with or without Secure Boot enabled, so it's best to use it unless it doesn't work. Note also the double backslashes (\\) as directory separators; EFI uses DOS/Windows-style backslashes (\) rather that Unix/Linux-style slashes (/) as directory separators, and the backslashes must be doubled up or enclosed in quotes in Bash because they're used as escape characters in Bash. (I hear that recent versions of efibootmgr can convert slashes to backslashes, but I don't know the version in which this change has appeared, so it's safest to use the doubled-up backslashes.)
As a first step to fixing your problem, I recommend you run dosfsck (or some equivalent tool from another OS) on the ESP. This should fix any lingering filesystem problems.
A caveat: If your Super GRUB Disk is booting in BIOS/CSM/legacy mode, efibootmgr won't work. If this is true, you'll need to do the above using a Linux emergency disk booted in EFI/UEFI mode. Alternatively, you could use my rEFInd boot manager on USB flash disk or CD-R to boot Ubuntu in EFI mode, then use efibootmgr to re-activate GRUB.
With that done, you need to create a new NVRAM entry for the boot entry. The least intrusive way to do this is to use efibootmgr from Linux, bcfg from an EFI shell, EasyUEFI or bcdedit from Windows, or some similar tool. Since you can boot to Ubuntu now, the following command should do the trick:
Putting all of the above together, my suspicion is that when you resized your ESP, you rendered the Ubuntu boot loader inaccessible to the firmware, which then deleted it from its built-in boot manager. Resizing the partition back to its original size might or might not have fixed the access problem, but even if the filesystem is now accessible, with the NVRAM-based boot entry gone, you can no longer boot the boot loader -- at least, not without jumping through some extra hoops, like using Super GRUB Disk.