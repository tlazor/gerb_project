Another example, not quite so extreme, are the different editions of Windows. Different editions of Windows support different number of CPU cores and different amounts of memory. If you have large memory and a large number of CPUs, you can make your system faster, just by upgrading to a "bigger" edition of Windows. Note that the editions have the exact same code; there is just some configuration switch somewhere that says "you are a Home Edition, you only support 1 CPU and 128 GiByte".
Similarly, IBM mainframes distinguish between different kinds of processors: Linux processors, Java processors, Transaction processors, etc. They are actually all the same processor, but the OS scheduler will refuse to schedule Transaction tasks (which are the most important ones) to a Java or Linux processor. Only Java VMs will be scheduled to the Java processors and only Linux VMs will be scheduled to the Linux processors. If you want to get higher Transaction performance, you have to buy licenses for more Transaction processors: again, those are the exact same processors, the only difference is a configuration flag in the scheduler which says "don't schedule transaction tasks to those processors".
A very extreme example of this are large IBM mainframe computers: you can buy more CPU time online, and all you get is a license key which you have to enter into your OS, and boom!, your system runs faster. The trick is simple: the OS scheduler will sometimes just refuse to schedule tasks and have the CPU go to sleep instead, or even just run a NO-OP loop for a short time, to achieve a given overall average throughput. If you pay for a more expensive license, the scheduler then removes those NO-OPs.
Or, even more drastically: if you buy a system with only 4 or 6 or 8 CPUs, there will typically be around 16-32 ones actually installed. The OS simply shuts some of them down, and by entering a license key, you can turn them on.