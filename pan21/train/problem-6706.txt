This is our protocol handler, the idea being that we inject the network object above into the protocol handler This particular example is a simple 'reverse echo'.  Once the client is connected, it sends back everything the server sends, reversed (so reversed textually and in the normal model, haha, get it...)
I've commented some of the code that I'm feel most unsure about.  In addition - the idea was to add PSR-compatible logging, so mind the dingy echo statements.  (This will actually run as-is without any additional code).
I am in the process of writing networking code for PHP that is meant to be used in long-running PHP processes.  I realize that PHP is supposedly not well suited for long-running processes, however that is not my question, and I already am well aware of the implications.  This is meant as an OOP learning exercise for the most part.
My idea is to write a networking class that can be dependency-injected into a protocol-handling class.  In the final product, these are meant to be two separate files, that use namespaces properly! I've put them here as namespace-less files:
If you paste this all into one file, in order, it will run.  Any advice or feedback, particularly regarding my use of dependency injection and callbacks, would be greatly appre