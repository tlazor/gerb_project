The best course of action is obviously stopping it happen as once you are notified by any job logic its already too late. In saying that there are a few temporary workarounds you can do to make your life easier when it comes to restoring things back to normal until you have found out what the cause was and put a stop to it.
In terms of monitoring the table counts. Just create an agent job that does a count on the table, if its below a number you are expecting send an email off. Id set this to run more frequently than every hour for now as you would want to pick up on this faster than your customers. You could even get clever and if it detects zero rows use the temporary table you created and repopulate it - then email yourself to let you know what happened.
The main issue here for me is how a web user was able to truncate the table. I would have a serious look at the permissions assigned to the tables and limit what can be done. If users only need to be able to read data then only allow them select access, if they need edit, give them select, insert and update etc... Work on giving them the least amount of privilages possible. This should at least start limiting what damage can be done.
Not knowing how this occoured, another thing to look at is making sure any page, input field where a user can enter in data that is saved back to the database has code to make sure what is being saved is actual legit data and not someone trying to do some SQL Injection.
Alex has already touched on backups, if you find that there is a key table that is constantly getting hit I would as an easy rollback, create copy of the table (if its not too large of course), something like select * into TableName_backup From TableName. It will be a lot faster to recover the table.