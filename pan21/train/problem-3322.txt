The int array will serve as the pixels of the Sprite. You can fill the array programmatically or just load any bitmap from disk.
I think starting with an existing simple game, then adding to it or changing it is a good route to take. So, find a 2D opensource game to start with as a base. Perhaps you can find one that suits you on one of the game jam sites like ludum dare? I know they usually post their code for people to look at when they're done. This also makes sure that everything is included so you don't have issues with all those compile errors you were talking about.
What it does is rendering a single BufferedImage to the screen that contains all the game data. But how to draw images to the BufferedImage?
Then when it's time to draw that Sprite just copy the pixels from the Sprite over to our pixel array in the SwingRenderTarget. Here is an example to fill the whole screen. To use smaller Sprites one has to copy one row from the Sprite pixel array to the SwingRenderTarget pixel array at a time:
I would like to create a 2d game in Java, but tutorials online for game libraries such as LWJGL are usually filled with errors once I compile the project. Most people do not explain very well, and just go on very quickly. Can someone please provide me a couple examples with source code, and somewhere to have a starting point? I used to have trouble with making a GUI and you guys helped me through, hopefully you can do the same again!
How about an example how to render a simple Sprite to the screen? First of all create a Sprite class:
This is simple! Create an array of ints (called currentPixels in this example) and just treat every int as a single pixel of your screen! In the method swapBuffers this array of pixels is written to the previously created BufferedImage which is then rendered to screen.
A very simple and effective method to write small software rendered games is to use the methods and tools swing offers. Begin a new Swing project and add a single component to the window. That is the component everything is being rendered into. It might look like this: