You will need a way to differentiate from the different sources but if you did that, you could always use replication with a filter. That way you could merge all of the data from different SQL sources without stepping on each other. I actually set something like this up but it never made it past testing phase and even then only with 10 different databases but it worked. 
Hourly updates isn't necessarily that big of a problem for a good warehouse, as long as you have the hardware necessary to do the job.  You can create SSIS packages to run on SQL Agent jobs (or through any other kind of scheduler, honestly) which perform the necessary tasks (pulling data from source systems, doing any transformations, doing any necessary staging, and building Analysis Services cubes), so scheduling isn't a problem if the individual processes are fast enough.
If you're trying to do something "on the cheap," there's a much higher likelihood of failure, to be honest.  This is why I'm a little concerned about why you put "data warehouse" in quotes.  Yeah, there are easy-to-develop non-warehouse models you could come up with (such as possibly replicating all of the tables over to another server), but they're typically going to fall into one (or more) of a few categories:
You have "data warehouse" in quotes, which could mean one of two things:  you're either looking for an actual data warehouse or you aren't (yay, truisms!).
If you're looking for an actual data warehouse, there's an entire Microsoft BI stack available to you as part of your already-purchased SQL Server licensing:  SQL Server Integration Services for ETL, SQL Server Analysis Services for creating cubes, and SQL Server Reporting Services and PowerPivot for analyzing data.  Doing a data warehouse right is not a trivial activity, even for somebody with a great deal of experience designing and developing transactional databases.  The big problem is not so much learning the tools and languages (though MDX is so different from T-SQL that it's in its own world), but getting the right mindset.  If you do go down this route, start with Ralph Kimball's Data Warehouse Toolkit.  It's a fairly long book and was not written for any particular technology stack, but instead tries to give you an understanding of what makes for a successful data warehousing project.  Doing it right could possibly take years even if you already know the tools, because the single most important thing about data warehousing is understanding the end user.  You really have to know what the end users (the business people) want, how they want it, how they can understand what they're seeing, and how what data and systems you have can get translated into what they want in a single, consistent manner.
Another method that I used was using Merge in a SSIS package. The merge statement is only available for SQL 2008 but the merge in the data flow transformations biggest advantage is that you could use different sources. This will be about the only way you can use your Access databases [just typing that leaves a bad taste in my mouth!]
These are among the many problems you'll run into in the world of business intelligence.  Good data warehousing (be it Kimball-style, Inmon-style, some hybrid, or something else) doesn't avoid these problems, but instead gives you a mindset where you can understand and solve them.  Rolling a cheap-and-easy solution may let you paper over the problems in development, but we don't measure success simply through getting out of development; people have to use it for a warehouse of any type to have value.
Personally my favorite is the replication method. It's fairly easy, runs on its on, isn't prone to failures. I have hundreds of different merge and transactional replication jobs set up on our servers and I have yet to encounter an real issue. 
I do understand the "data warehouse" in quotes, that is what we currently have where I work and I would love to move to a real warehouse but we will have to wait until bigger projects finish up. Building an OLAP system takes time and education, not only of the IT staff but also all of the "C" management levels.
The third method that we use is good old fashion complicated sprocs attached to jobs that pull from multiple sources. Its messy but it works.