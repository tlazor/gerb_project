The confusion itself stems from simply not realizing that there are articulably different uses of equality in the first place.  In my experience, simply pointing it out is actually enough to stem the tide of the confusion.  (You gave a perfectly wonderful explanation in the question itself.)  Then, two or three more times over the first few weeks of class, I will gently remind them that this equals (some code statement we are examining) is a mutating equals, not the constraining equals of mathematics.
When introducing = and == in python, I refrain from reading them loud with a name that contains "equal" (or rather « égale » in French).
Instead, I always read x = y as "x takes the value of y" (« x prend la valeur de y » which happens to be literally what the pseudo-language used in earlier classes mandates) and x == y "x has the same value as y" (« x a même valeur que y »).
I don't teach CS in any official capacity but I have tutored a number of friends and colleagues on the basics. I find that differentiating the language I use when describing the different concepts helps a lot, for instance:
I actually cover this idea in my very first lesson in AP Computer Science, because I have found that students find the different uses of = to be confusing, indeed.  I run a unit based on Tom Roger's unit, Java Ain't Algebra, and I also talk about it a little here.
Using the above terms when talking through code I have never been asked to explain the difference between assignment and comparison. YMMV
The real difference is in the control structures surrounding the statement.  if...then in programming is a control structure, whereas if...then in mathematics is simply another statement that can be either True or False.... i.e. mathematics is generally concerned with the logical implications of $x=x^2$ being either True or False, whereas programmers are generally concerned with the difference of what they will show on a screen when x==x**2 or x!=x**2.  
I do this right at the beginning because, if mutability is not made explicit, students do not seem to exhibit a total loss of comprehension or ability right away, but rather, very slowly slip further and further behind.  They will never be able to articulate what they find confusing about the material, because every piece seems to make sense when looked at in isolation.
The programmer's x == x**2 is the exact same statement as the mathematics $x=x^2$: it is a statement that can be either True or False. Most people are just rather cavalier in their usage of the mathematics version:  They'll just STATE that $x=x^2$ and then derive $x \in \{0,1\}$, but what they are really doing is writing a proof that if the statement $x=x^2$ is True, then the statement $x \in \{0,1\}$ is also True.  Notably, the statement $x=x^2$ does NOT simply constrain $x \in \{0,1\}$, since one might very well start out a mathematical argument as "Suppose that $x=x^2$ is False...."
And this leaves "x equals y" (« x égale y ») for $x=y$ to my math colleagues, which they usually use.
I think this stemmed from the first language I was taught academically was pascal where the assignment operator is := and comparison is =, having that difference caused me to internally narrate my code in this way, which has helped my understanding and my vocabulary when explaining to others.