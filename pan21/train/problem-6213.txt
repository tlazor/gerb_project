Now, onto simplification: I believe that you have to make a choice between exposing the whole ports container and exposing only some ways to access its content. There's absolutely no upside in offering begin, end, [] and so on if the client already has access to the vector inside, since they can call those function themselves with e.g. class.container().begin(). And the downside is clear since you have to maintain many transparent functions, over multiple layers.
So, either you want to hide some implementation details, or want to control how class members are accessed and/or modified, and then offering direct access to the inner containers isn't rational, or you don't mind and then providing numerous ways to access the same piece of data is just too much code.
Data initialization: since C++11 (at least if I remember correctly) you can specify default values for non-static data members inside the class. For instance:
It is a lot more readable than having, as you do, the members' definition in the .cpp file. The other possibility is to have an inline constructor with a member initializer list, which was already available with C++98.
using directive: you can replace typedefs by usings. It won't change much to your code, but it is easier to read, more flexible, and typedefs should progressively disappear anyway.