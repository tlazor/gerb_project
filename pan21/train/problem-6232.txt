Referring to a resource by IP address is bad for obvious reasons, you're not able to change the IP address of the resource without updating all your configuration that refers to it. If you're using DNS or some kind of zeroconf domain name system (e.g Bonjour), then you can just update the mapping between domain-name and IP address to point to a new physical resource.
Assuming you understand how domains are used on the Internet, it's easiest to think of local domains as an extension of that. These days DNS is the primary means of identifying hosts on a network. All DNS entries must reside within a domain. It follows therefore that a domain is required.
I am unsure if the same terminology carries across Windows and Linux however if it does, I would like to know how this relates to Linux.
I am new to the world of server configurations and am having a hard time coming to grasps what a domain is especially in an internal environment. For example I have read and been told the best naming convention to use for an internal domain is domain_name.local. However I have no idea of the purpose of having a domain and what it does? 
The second question I have is if I have a registered domain name e.g. example.com which points to a website, how does using the domain name example.com affect me using same name when setting up a web server and mail server?
Domains are handy things, since it allows you a single namespace to locate resources. Even internally, this is quite useful. Most companies only have a few externally accessible addresses and quite a few more internal ones. Using a subdomain ("winserv023.hosting-nyc-usa.example.com") under your publicly visible domain ("example.com") makes it easy to set up and not conflict with anything else out there on the internet. 
Using an arbitrary root ("winserv023.companyname") has its own problems, even if it'll never ever be visible to the world. With the expected explosion in top-level-domains in coming years, it is not impossible that "companyname." could be a perfectly valid top-level domain.
It's basically up to you, you need to choose something which is consistent and make your DNS service reliable. It's platform agnostic as well, the only thing you'll need to worry about is what DNS server/method you use. I believe Windows deployments tend to mostly use ActiveDirectory as a DNS server, since you'd need to have one in a Windows domain anyway. 
DNS domains are completely different than Windows Active Directory Domains, though AD domains do use DNS for resource location. DNS domains function the same on both Linux and Windows and follow very similar terminology. Windows DNS and Linux BIND DNS have slightly different terminology usage in their documentation but they both do the same thing in the end.
As an example, all the computers on our company network have DNS entries in the company's internal domain, just as our public resources have DNS entries in our public domain.
So, a domain is basically just a way to refer to a resource (server/group of servers) by a name instead of an IP address.
Obviously whether you use a private domain or public domain is like using a private or public IP address. Private domains e.g "mailserver.local" or "pdns.mycorp" means that the resources will only be addressable internally. If you want something to be publically addressable, or don't want to roll out your private DNS infrastructure, you'll need to buy and use a public domain name, something ending .com or .net or whatever.