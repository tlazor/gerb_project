Chatton has already explained the general unnecessity of making Node public, but I would like to point out a specific problem in your code: By making both Node.setNext(Node) and SinglyLinkedList.getHead() public, you are putting your list in danger of being corrupted, because with a reference to head, one has almost complete control over your object, more than you would probably like (only size remains inaccessible directly). So even if the class Node is public, you should still make at least one of these two methods private.
A final remark about the field size. Technically, the size of your SinglyLinkedList is not really a state of the object per se, but rather a value that depends on another field, namely head. So you represent the same property of your object in different fields, which is basically an invitation for bugs. You might forget to update size when you add or remove an element, or you might make another mistake that causes size to contain an incorrect value. The problem I mentioned at the beginning of this answer is an example of this. Even if the exposure of the list's head node and its setNext(Node) method is intentional, your object can still become corrupted because size will not be updated if someone simply modifies the list's head node. If I were you, I would remove this field and instead make the method getSize() calculate the list size based on the field head. True, this might make a call to getSize() more expensive than if the size were cached in a field, but this is not your problem but that of the caller. And if that caller is you because you want to ensure that the index parameter passed to addAtIndex(T, int), removeAtIndex(int) and get(int) is valid, you can instead rely on getNodeAt(int) to throw an exception if the index is out of bounds, so you don't have to traverse the node tree multiple times.
I would make the Node class private. This is an implementation detail and nobody using your list should need to know or worry about it. I would also remove any public facing methods that return a Node over a T. If you want them internally you can make them private. (The built in Java LinkedList uses a private Node class but we don't need to worry about it)
When someone passes in a bad index, I would prefer and IndexOutOfBoundsException over IllegalArgumentException. (this is what java.util.Lists do afterall)
You could remove a lot of boiler plate getters and setters by making the Node class private. You can access the fields directly within your SinglyLinkedList class.
get methods (with the add and remove methods delegating to the addAtIndex and removeAtIndex methods).
extensive. However, in this basic implementation, I just wanted to implement the addAtIndex, removeAtIndex, and
You've overridden equals and hashCode in your node class which is usually a good thing to do in general, but here you don't really need it. However you may like to keep it if you end up adding additional functionality that may rely on it.
I also agree with chatton that, if you pass 0 as an index to addAtIndex(int) or removeAtIndex(int), this is simply a special case and there is no more elegant solution for this. If the index is 0, the new node must be set by changing the reference of a SinglyLinkedList's instance field (head). If the index is greater than 0, however, the new node must be set by changing the reference of a Node's instance field (next). The classes SinglyLinkedList and Node are unrelated to each other, so using a common method to change that field is not an option. The most "elegant" way I could think of that does not handle both cases separately is by determining the field whose reference to change at runtime using reflection, and I doubt you would call this "more elegant" (at least I wouldn't).
I think special casing index 0 is perfectly fine. 2 distinct things happen depending on it being the first element or any subsequent one.
I look at your addAtIndex(T, int) and removeAtIndex(int) methods and see duplicate code. Alarm bells ring. Even if it's just 3 lines. You could make a private method that returns the Node at a given index and call this method instead:
A nice toString method would also be good here, you could just use a StringBuilder or StringJoiner to do this easily.
As well as this, I'd also like to see a more descriptive exception message. Maybe say which index was used, and what the current size is of the list.