The Pi doesn't have external access to high speed interfaces that would normally be used for something like this.  However, for a relatively low speed like 1MHz, you may be able to get away with using the SPI bus:
The bigger issues are going to be how useful the data received is for analysis.  Things like clock jitter, bits of resolution, and probably most importantly the analog front end will strongly effect what you can do with the data.  For example, if you have a specific signal you are searching for, then the details of your implementation will very well matter.
The Nyquist sampling theorem states you need at least 2 times the highest frequency component of the signal you're going to be sampling. Two megaherz. The higher the sampling frequency, the more accurate the representation.
You'll need a parallel output ADC. As in the other answers, the SPI speed limits your ADC speed - but if you get all the bits from your ADC in one go, you can multiply your speed by 8 to 10. Several setups showed it works, including designs with ADCs such as the CA3306.
In practice, I found that the Raspberry can provide fast enough clock, but copying the ADC values to RAM is the bottleneck, and limits acquisition speed to 11-12 Msps. You can again double this value by having a second adc interleaved on the remaining GPIOs. I'm testing such a design, and even at 11 Msps for a 3.5MHz sensor,  it's definitely possible to acquire ultrasound signals. 