i know this isnt going to come over as overly helpful, but why are you needing to upgrade python ? - RHEL5 is aimed at stability and hence there's an inherant tradeoff in the ability to harness newer releases.
Recent Fedora releases and the RHEL6 beta ship more advanced Python versions (2.5+), along with updates to dozens (possibly hundreds) of Python scripts, too. But Red Hat decided to keep its EL5 branch on Python 2.4, probably due to the risk of breaking any Python 2.4-only scripts running on clients' machines. (This is a pretty standard practice for a long-term-stable distro series like RHEL.)
Simple. Don't do that. Either modify the shebang line of the appropriate scripts, or invoke python26 directly.
The problem is that the transition from Python 2.4 to 2.6 introduced a few backward-incompatibilities. So a lot of scripts authored with 2.4 in mind won't run properly under 2.6 without some patching. (There are people who claim that 2.6 IS backwards compatible... it's close, but not 100%.)
Unfortunately, you cannot remove Python 2.4 from RHEL5, unless you're able to remove (or patch) dozens of Python scripts that only work with 2.4, not 2.6. You can easily install 2.6 in parallel with 2.4 (as you already know), but removing 2.4 is "major surgery". You can certainly try, but most users/operators just don't bother.
Handling 2.6-only modules is a bit harder. You'll need to move them from '/usr/lib/python/...' to '/usr/lib/python26/...'. If you're lucky, somebody may have already packaged a variant specifically for Python 2.6 on RHEL5 with the paths changed, or you can modify and rebuild existing RPMs, yourself.
As another poster noted, '/usr/bin/python26' is in your default PATH, just like '/usr/bin/python'. On the command line, you can just call 'python26' instead of 'python'. In your 2.6-specific scripts/programs, you can replace your she-bang lines with '#!/usr/bin/python26'.