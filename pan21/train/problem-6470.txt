So, game developers who have experience across multiple platforms and consoles, do you think we should stick to C++03 until the new generation of consoles arrive and most everybody has switched to C++11 standard (have they already?). Or are most consoles using/support compilers (VC++, GCC or variants?) that are already supporting C++11 features?
Our game engine, written in C++03, is designed to be compiled on Windows, OSX and iOS. Linux support is planned for the (very) near future. Our experience is limited when it comes to consoles, which is why I am asking this question.
If you're willing to take that sort of risk for the sake of auto, then by all means, go for it.  But I'm not going to advise you to do it.
If you rely on your code in order to pay for food and shelter, and you need to support cross-platform on unknown future platforms (or reasonably might need to support cross-platform in the future), then designing your code to rely on a bunch of unknown compiler writers' correct adherence to bleeding edge language standards is dangerous (and I would argue, irresponsible).  It's dangerous for you, and therefore also dangerous for your dependents.
Currently, we are debating whether switching to C++11 and using non-compatible features of the C++11 standard could pose a problem in the near future when we need to port our engine to any of the current gen consoles (perhaps the compilers supported by some console(s) do not support C++11 yet? We don't know...). 
Because in my experience, going cross-platform, particularly on consoles, is best accomplished by aiming for the lowest common denominator which you can be certain will work virtually everywhere, not by relying on all the latest whiz-bang language features.  If someday you need to port to a platform which doesn't support them, you wind up having to rewrite your systems from scratch.  Can you afford to pay wages/rent while that happens?