How critical is the data?  If it's very important (ie - must not lose it) then bias the build to redundancy.  If it has to be 100% available (no downtime) then bias to resiliency (and get a bigger budget).  If it's JUST a performance database (i.e. a data warehouse) then you can optimise for performance.
I'm currently having trouble with a database server for a DB with lots of small writes and a few in comparison big reads. Read performance is more important because people is involved, writes are performed by automated clients. This database is currently 30GB and will grow up until a hundred or so.
You must look at the performance counters to find out where the current bottleneck is.  High disk I/O and disk queues?   High CPU? (often caused by limited RAM and context trashing)
I would consider using your 10 disks as a 6 disk RAID10 and a 4 disk RAID5. Split the RAID5 into a small C: partition for the OS and the rest as a D: partition for the log files. Logs tend to be sequentially written so the slower random access speed isn't such an issue. Put the data on the RAID10 where they'll benefit from the high random access speed, particularly the high random access write speed.
You should get away with a twin drive RAID 1 for LOGS, a twin drive for TEMP (create as many TEMP datafiles as CPU's across the two drives) and then the DATA can be on a larger 4 to 6 RAID10 array.
Your 4 disk RAID10 arrays are about the same speed as a 2 disk RAID0, or a bit less than twice the speed of an unraided disk, so they won't be that fast. Using a 4 disk RAID5 instead would give an array with faster streaming read and write speed, but a bit slower random access write speed (I've tested this on a Dell Perc5/i controller and I assume it's true for other controllers).
Is this server only hosting this single database or is it being used by many applications with different databases?
Generally, keep away from RAID 5 (your database size is small enough not to need to extra capacity), RAID10 is best.
NB I'm not recommending you organise the disks as RAID10 and RAID5, however I am recommending that you test using the disks in this format and compare the speed to your suggestion of RAID1 + RAID10 + RAID10.
If you have lots of disks, e.g. in some form of SAN, then RAID10 is the obvious choice as it combines speed and fault tolerance. However in most cases there is a limit on the number of disks that can be fitted in a server, and in that case you need to consider RAID5 as an alternative.
Is the SQL code written right?  I've seen big machines (and yours is quite big) brought to their knees by poor SQL code and tiny machines (1 CPU, 1GB RAM) run load's of well written and busy databases.
So, due to its many ugly points (underperforming, no RAID, external USB drive for backups) I'm planning to set up a new database server.