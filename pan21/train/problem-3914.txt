As you can see I'm treating the planet coordinates as a string rather than how it's done now and this will eliminate the need to have both a : and a ; delimiter.
Overall the Planet class seem unnecessary. Just making it a struct with the only the ints and a single non-class function printPlanet(const Planet&) would work just as well.
I don't particularly like Hungarian notation. But if you are going to use it, be consistent. None of your member variables in Planet use it at all. I'd expect them to be named iX, iY, iZ, etc. Especially since coordinates are usually floating point. Also in Universe, you have vector<Planet> vPlanet. I'd expect it to be vpPlanet, and I'd probably make it plural since it usually holds more than 1 (unless it's a lonely Universe). 
I also have no idea what Clvl, Dlvl, Mlvl, and Plvl mean. Nor do I understand what Mstor, Cstor, or Dstor are. Don't be afraid to use full names like miningLevel or powerLevel (or whatever they stand for).
Same with the parameter to vsSanitizeData(). It should be named vsData or maybe something more descriptive like vsToSanitize.
What is Planet::getPlanet() supposed to do? It returns an int, but the return statement has 10 variables it appears to be returning. My compiler is confused by this. It seems like maybe you're trying to make a copy of it? Like it should be:
splitString() has a return value, but it's always 0, and it's ignored anyway. Also, it doesn't just split a string. It constructs a new Planet and adds it to the Universe. That seems like a bigger deal than splitting the string, so I'd change the name to reflect that. Maybe void addPlanetFromString(const std::string& planetStr)? Making the string a const reference will keep you from copying the string.
What's the purpose of using classes if all of your data and methods are public? Why bother having getters and setters like getMlvl(), getClvl(), getDlvl()? Personally, I'd make all the instance variables private and leave the accessors because if you later expand this it will be difficult to track who's changing parts of an object otherwise. But if you are going to make them all public, don't bother having accessors. (Or at least, be consistent and make them for all members or none.)
Instead of having 7 different sort routines, I'd just have 1 that takes the compare structure as its parameter or maybe an enum saying which sort you want to do.
Where are the galaxies and systems? Your Universe class contains a single vector of Planets. I thought there was a hierarchy of Universe contains Galaxies contain Systems contain Planets? But I only see that Universe contains Planets. That seems odd.