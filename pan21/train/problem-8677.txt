I am building a backend to a mobile application that will be hosted on a Django site connected to a PostgreSQL database. 
In case it helps a little ... in your register function, you can simplify the creation of the string for the c.execute statement.
I have never built anything to accomplish this before and this is my first go at it. I have not studied this type of application before so please let me know if the below code follows best practices for this task, is secure, and doesn't have any obvious problems.  If there is an industry standard for this that is very different, please let me know what it is and why it is preferred. 
There are a lot of columns to be inserted, and a long parameter list.  I think it would be less error prone if you used named placeholders.
Assuming that there is an exact correspondence between the JSON tags and the method names of cc(), you could dispatch dynamically.  (Your syncProfile() method doesn't match 'syncprofile', but you could rename your methods accordingly.)
Returning HTTP 404 ("Not Found") is improper, unless you are deliberately sending obfuscatory responses as a kind of security-by-obscurity measure.  If you require a POST, and the client sends anything but a POST, the proper response should HTTP 405 ("Method Not Allowed").  For a body that does not have an appropriate JSON tag, I think that the appropriate response would be a non-specific HTTP 400 ("Bad Request").
It's a bit odd that you let the client specify the profile creation date.  I would just let the database issue a timestamp.
I have a separate class that holds all the code to handle the incoming JSON requests. This is one such function. 
I think that the long parameter list is indicative of a problematic database schema.  If you ever want to add another attribute to the user profile, that would require a schema alteration.  The profiles table should probably be split into an accounts table containing the essentials and an account_attributes table that stores arbitrary key-value pairs.
In if-else branches, prefer to put the branch with less code first, to get it out of the way and reduce mental load.  Usually, that means putting the error handler first.  As a bonus, you can eliminate one level of indentation.
Imports should be listed at the top of the file.  I wouldn't alias bcrypt as bc, as the latter sacrifices clarity just to save a few characters.