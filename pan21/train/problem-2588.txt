this is actually a very good solution as I can get the position correct with minimal amounts of data sent over the network. but since I have obstacles in my game it gets very weird as moving the NPCs transform doesnt include collisions and it can perform weird movements when colliding. Furthermore it seems to teleport to its position because of the transform.position updates when playing in full screen. barely visible in smaller resolution for some reason.
Your mob moves dumbly for a given values from server, but if your server keep sending position and movement updates every server tick the client can update the position and the movement stuff with the correct one.
I have also tried using rigidbody.moveposition in the MoveThisEnemy function but this just means it doesnt get updated correctly as moveposition seems to be less precise than transform.position.
although this works fine the NPcs movement is wonky as in it finishes its movement faster than the next update can come no matter what and therefore although lerping it seems to move faster than I can provide it with updates. imagine a cartoon slug that moves fast, stops, moves again, stops. so Npc is always there and not just teleporting but still not the effect I am looking for.
First of all, I might missunderstanded your question but it looks like your clients are updating the mobs position, this shouldn't happen. Game logic should be managed by the master server for several reasons from security (dont trust the client, ever) to math consistency (diferent platforms, different float precision)
Here I simply try to just reproduce on the player client what I am doing on the master client but I make sure to correct the position of the NPC ever so often to guarantee its in the correct position.
Now I have made a great deal of different solutions to movement of my NPCs across the network and some solutions are better than others but noone have been perfect. So I would love some feedback on this.
About the smooth movement, a widely used approach is using movement prediction, checkpoints and interpolation.
This could lead to bumping, to fix it, you want to artificially lag a little the game and interpolate the position and movement between the last two recieved updates, by doing this and averaging with the last updates (and taking latency in mind) you can achieve smooth movement.
Knowing this, you can say from your server to your clients to move #12742 mob in (0.3, 1, 0.1) direction at speed 3 until point X is reached (f.e.), then, your clients can predict and update the position based on the server input.
If object A that is in P point moves in V direction at S speed, you know that, in 10 frames, that object A will be 10*S units from P in V direction.
I have a master client that determines everythings position, and actions and send this information to all other clients.