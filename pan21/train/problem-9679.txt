Now, when the hardware implementation of the receiver sees that three (for example) packets in succession have been missed, what does it do? It just interrupts the CPU, and the software handles the situation by declaring the link down and triggering various other actions.
In BFD there is a requirement that packets be sent very often, something like 50ms apart (based on configuration). Similarly, if the receiver does not see three packets in succession, it declares that the BFD session is down.
To summarize, the whole point of the "hardware-assisted" or "hardware-offloaded" BFD implementation is to free up the CPU.
Now think about a Cisco IOS or IOS-XE or IOS-XR router/switch. There is a lot of software running on the CPU (various routing protocols, background tasks, and so on). On a loaded system, it is possible that the software gets so busy that it fails to meet a 50ms deadline on one of the possibly many BFD sessions configured. 
So yes, having a hardware implementation will allow you to configure more aggressive timers than would be possible on a software based implementation. I have seen 50ms timers with a multiplier of 3 working in a stable fashion. More aggressive timers should also be possible, but, sorry, I am not aware of the numbers. Cisco documentation for specific hardware/linecards may be a source of authoritative information.
Is there any hardware implementation of BFD (Bidirectional Forwarding Detection)? In such case, what will be the average times for discovering a link failure instead of a path failure?
Even if the 50ms deadline can be met, merely the fact that it has to send a packet every 50ms can prove to be a major burden on the CPU, affecting the software's scalability when it comes to other work.
The story is the same on the receiver as well. A BFD packet needs to be received and processed every 50ms.
I know that at least some Cisco routers and switches "implement" BFD in hardware. The problem they address is as follows.
Many router/switches handle this by having dedicated hardware. This hardware does not have to be very complicated: it just needs to send a BFD packet (which has a fairly simple format) every 50ms. This frees up the software from the burdensome task of sending the BFD packets. On the receiver, again, the received packet is checked for correctness, which again is not too hard.