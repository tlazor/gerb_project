I've seen some people address this by having AI mark the path they plan to walk on as more expensive for other AI.  This has the effect of some avoidance between agents but since it isn't time aware (the future path is more expensive always, not just when the agent will be there in the future) it can make some odd behavior if it is too strong of an effect.  Another way people deal with this is to let the AI in this situation either slide past each other instead of getting stuck, let AI push each other around a bit to let them through, or even just allow them to walk through each other (sometimes only when there are no other options).  There are other ways to solve it but these are a few ideas.  There are entire research papers dedicated to this topic so the right answer depends on your specific needs (:
I'm currently working on AI and, as stated above, I'm having trouble figuring out how to keep the AI from getting stuck on each other.
If your AIs can move through more than one tile per turn then you can just let them pass through each other but dont letting them stay in the same tile and using the wait method whenever they just cant move.
Case 1.- Your game maps have small corridors, passages, doors,obstacles,and so forth or AIs are positioned too close, so they can't turn around each other : In this case you have to use the help of a "wait" variable whenever there is no way to move, and keep it until the leader frees more space to move. You can either alternate the other AIs order on the snake formation. If the leader got stuck because it can't pass through the other AIs you can add a "switch position" method to switch position whenever they cant move. 
Case 2.- Your maps are big but your AIs get stuck because the AIs still want to pass through each other(or your algorithm is not that complex) or they want to have an specific formation no matter where the leader is pointing at or want to go: In this case you can do what you already stated, make the occupied tiles more expensive, you have to treat them as total obstacles. You can also apply the "switch" and "wait" methods to make it easier.
this is my first time helping on a question and is hard for me to understand others when they dont use a graphic exaple. Apologies in advance.
The way I've programmed it, AI traveling to a destination will calculate which tile gets it closer to it's goal (they use jump point pathfinding to find their way around) and then they calculate which tile they'll move to the next turn. Other AI check to see if a traveling AI is around them and if there is, they move one space to the side (or at least they're supposed to move.)
Considering that your game is turn based and your AI units can only move one tile per turn, and considering that they get stuck so easily, then I have to make some assumptions on how you game works and offer at the same time some solutions to your problem.