In a big network/power outage, the end of day cleanup is what over-time is for as the current days sales can get spreads across several different terminals and you have to sort it all out. I am glad I no longer do that work. 
As mentioned, this question is outside the scope of systems administration.  That said, distributed databases and distributed data stores are being used in some very recognizable places.  While SQLite's strengths do not generally lend itself to this type if application, it is not unheard of.  Look, for example, at the Fossil project.  Even though this is a distributed source control system based on SQLite, it also provides a distributed wiki and a blogging application, and might actually do the trick for you.  While you should probably look beyond SQLite, this does not mean you need to abandon open-source.  Consider implementing your project in Apache CouchDB or a Hadoop-based data store  An even more novel approach is to create applications in a distributed user-space virtual environment like Inferno.
I suggest you abandon your current design ideas and have a look at how such things are being done by others. Use any one of the common wiki systems (I prefer MediaWiki) with a regular database system (MySQL being very popular) and you'll not only save massive amounts of time but you'll end up with a system that is both more usable and more robust, plus much cheaper to implement.
In short, stop trying to reinvent the wheel, because your current design is going to end up more like a square with a hole roughly in the middle.
This question isn't related to system administration but when I read it so many warning alarms went off that I just have to answer.
If the master was to fail, all the other terminals pop up a message saying "Make me the new master?". You press yes and everything continues on. This could continue until there was one terminal standing. 
Your plan has so many holes in it I really don't know where to start but I will tell you that it will be an overly complex system that will prove to be incredibly unreliable and poor performing.
Tells me much. To set up a wiki normally takes only minutes and any decent wiki system will have aides to speed up the importing of data from other systems.
It works, and is sort of idiot proof, but having a corrupted database at the end of the day is common. Luckily, the terminals only store that days sales, so your daily totals may be off a little as some order didn't get saved right. This is preferred over the system going down for a few hours and loosing sales. 
Your description sounds a lot like what POS (Point of Sale) systems use. One master terminal is declared on startup that does the database processing. A copy of the database is synced between the master and all the slave terminals for backup. 
I really have to tell you that your entire concept is so far off the mark that you won't find anyone else doing it. For starters, SQLite is unsuited to such jobs and the fact that you've had some success with it is more due to good luck that anything else.
Have you seen http://litereplica.io/ ? They have a sqlite3 driver for nodejs and it seems fairly well architected. 