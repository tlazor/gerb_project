Global variables should be avoided if possible.  They represent an interface to functions that is hidden and likely undocumented.  For example, you can't tell from the call create_new_p() at the end of run_puzzle() that you need to first:
Notice how the interface for create_new_puzzle() is independent from how the function is implemented.  The phrase and mapping are passed in and the cryptogram gets returned.  This is good because you can change the internals of the function without affecting the rest of the program.
or the function won't run correctly.  It also doesn't show that the result of the call is returned in converted_phrase.
run_puzzle() goes through a lot of work to build a mapping from the alphabet to a randomized alphabet.  First it collects the unique letters in the phrase, and then associating a unique random number from 1 to 26 to each letter.  This can be improved by realizing that it is unnecessary to get the unique letters or associating the numbers. Instead just build a mapping from the alphabet to a jumbled up version of the alphabet.  This can also be made into a separate function:
Looking at a call to get_rand_num(), you don't know what it returns without inspecting the function.  However, a Python programmer, would readily understand a call to  random.randint(1, 26).  So just use the later.
The Phrase class doesn't really serve a purpose here. The class attributes aren't really so related as to belong in a class.
Docstrings go inside the function, not before it.  And please, not in all caps.  All uppercase text is actually harder to read than proper mixed case text.
Comments are good when they add useful information to help someone (likely you in the future) understand the code.  MODULE IMPORT, CLASS IMPORTS, and GLOBAL VARIABLES don't really add anything.  In contrast, a comment that explains what a global variable is used for and why it needs to be a global variable would be useful.
I presume phrases is supposed to be a list of phrases, so that one can be picked at random to make a cryptogram puzzle.
In python, strings are immutable. So contcatenating a letter to a string may have to create a new string, copy the old string and the new letter into the new string.  You will frequently see code that creates strings  by appending letters to a list, and then using ''.join() on the list at the end to make a string.
From the doc string for create_new_p() (p for puzzle?), the purpose of the function is to take an input phrase and create a puzzle phrase by mapping the letters to a random permutation of the letters.  For example, 'a' may be mapped to 'x' and 'b' may be mapped to 'e'.  Anything that isn't a letter is unchanged.