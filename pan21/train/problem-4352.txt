Back to the original problem, you could select the "prevent accidental deletion" option (or whatever the actual words are) for the user account.  This won't stop it being moved, but will prevent one possible ****-up.  You could also script a periodic "dsquery user" command, to ensure your account hasn't been moved.  
This is different, in my opinion, to situations where an application has a need to query LDAP more freely, e.g.: an appliance that needs to resolve user objects in general would be pointed at a suitable tree root, in order to find the relevant users.  Here, of course, sub-tree searching definitely has a purpose.
If the user object is being used for the purposes of authentication, I can see their point of view in terms of how they pin-point the user.  As you know, LDAP supports objects with the same CN (common name) throughout the LDAP namespace.  So, assuming you only referred to the object using its CN, you could be referring to a user in another part of your namespace.
Whether this can be sent, and whether other LDAP paths like the search base or user/group identifications are stuck to specific paths, are completely up to the implementing software, so you milage will vary.
I have an application that needs to authenticate (log in as) a particular user.  The vendor says they need to hard-code the full DN of the user to make this occur.
Reason: If an admin reorganizes the AD OU structure, some applications will fail to authenticate causing an unexp
It really depends on how the app implements the object binding. Some apps simply don't support subtree searches (which is really frustrating in these cases). You should ask your vendor if their product supports subtree searches which let you bind to a higher level of the directory and search it. It might just be that they can only bind directly to the user object. I work with an app for which that is the case... Really frustrating and I run into the problem you describe frequently.
Finally, if your admins are "rearranging" your OUs without proper change-control, then someone needs a slap anyway ;-)
It sounds like you're specifically referring to configuring the Bind DN, which the app will use to authenticate to LDAP?
If that's the case, then you're exactly right; you don't need to hardcode the user DN.  A UPN is also valid (username@upnsuffix, where upnsuffix is usually your domain's FQDN).
It's been a while since I looked at LDAP, but remember a way that a user can either be searched for, referenced, or authenticated with a "shortened" LDAP query, but forget the syntax.
What LDAP syntax will allow a user to refer to an CN (aka "user") without hard coding the full OU path?