So if you want your angular velocity components and not the momenta, then simply divide the components of your torque by the corresponding components of the inertia tensor, ie,
In Unity, the inertia tensor is represented by a vector of the diagonal of the actual inertia tensor. That is to say, there are no off-diagonal elements in the inertia tensor. As Pieter mentioned, you need to think of the inertia tensor as the mass of the object. Once you do that, you can draw results from correspondence to linear equations. We all know that F = m * a, so in rotational terms, T = I * alpha, where I is your inertia tensor and alpha is your angular acceleration. There is one GIANT difference, though. I is a tensor and not a scalar. That means you need to do matrix math to get it right. Luckily, the simplification in Unity is that I is diagonal, so you can just treat it like a "magnitude", ie, T_x = I_x * alpha_x and so forth for each of the three components.
Which means that the change in angular momentum is simply torque multiplied by the amount of time you apply the torque! So the answer you seek is that the inertia tensor doesn't affect the angular momentum change due to a torque. It will however affect the angular velocity since 
Now, in your problem statement, you are trying to figure out how T affects L, where L is your angular momentum vector. Well, going back to our linear correspondence, we know that L = I * omega, where omega is the angular velocity since p = m * v. We also know that alpha = omega / dt since a = v / dt. Let's put that together: