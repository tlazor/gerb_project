I'm about to start a simple browser text RPG, with characters that can (passively) fight other people. This involves a list of about 10 skills like strength, dexterity and so on, with additional proficiencies for different weapons. 
Why not use associated arrays?, this gives the benefit of being easily extended (using PHP for example)
The most OOP way of doing things would probably be doing something with inheritance. Your base class (or super class depending on language) would be person, then maybe villains and heroes inherit from the base class. Then your strength based heroes and flight based heroes would branch off as their mode of transport is different, for instance.
Using a list will help you to avoid rewriting a lot of code as in order to add a character with an attribute you hadn't thought of yet, you just have to make sure it has an interaction that works with your existing system.
You may also consider using the Decorator design pattern, so that the modifiers on the stats work as "filters" that are applied one after the otherâ€¦
This has the added bonus that your computer players can have the same base class as the human players and it will hopefully simplify your life.
I'll try to answer this question the most OOP way (or at least what I think it would be). It may be completely overkill, depending on the evolutions you see about the stats.
Is there a better way to design this character class then just having those skills as class attribute? It seems easy, but I'm reluctant because it's clumsiness.
Then the hero would have an intrinsicStats field of the SkillSet type. A weapon could have a modifier skillSet as well.
The other thing regarding attributes, and this is less OOP specific would be to represent your character attributes as a list so you don't have to have them all defined explicitly in your code. So maybe you would have a list for weapons and a list for physical attributes. Make some sort of base class for these attributes so they can interact, so each one is defined in terms of damage, energy cost, etc. so when two individuals come together it is relatively clear how the interaction will take place. You would iterate through the list of each character's list of attributes and calculate the damage one does to the other with a degree of probability in each interaction.