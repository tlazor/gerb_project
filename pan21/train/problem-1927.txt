There is the absolutely great libtcod you could try. Basically, it is a console emulator/Curses type console. In more detail, it is a fully fledged rogue library (i.e. dungeon generation, FoV calculation, heightmap generation..which may be useful?). It is written in C/C++, but it has wrappers for C# (and the documentation is great for all of its supported languages).
It doesn't look like you have much selection in terms of NCurses APIs for .NET (I found this, but it looked Mono-focused and thus may not meet your needs. So it sounds like you may need to rewrite that aspect of your program. System.Console has a few features that may be useful, but likely is not robust enough to replace a curses-based UI unless you were using very simple stuff.
It's hard to provide much more direction without knowing more about specific technologies and techniques you employ in your game.
I would be careful with porting your mix-ins. There are frameworks for aspect-oriented programming in C#, but they are generally extremely heavyweight and probably not suitable for games. Hand-rolled dynamic class generation is an option, but is still likely going to be more work than it's worth for the features and behavior you're likely getting from your mix-ins. It may be best simply to port these features as individualized objects that you aggregate inside other classes and defer to.
While directly porting the classes, et cetera, over is possible, the biggest issue to be aware of (when discussing the problem at such as a high level as you are) is the different semantics for various operations and paradigms between two languages. 