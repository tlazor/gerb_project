Also, wherever you place the fail2ban.php action, it must be indented as much as the line above it. For example:
There are no doubt many ways. Have the script(s) above drop the data into a DB and have clients read from that, polling for new rules and running them as they come in. The simple "run a rule as you see it" won't be perfect if many hosts are submitting information, for example this case:
I've just implemented this and so far it seems to be working well. However, I had to update some of the php because the scripts in the original answer use deprecated functions.
but this should not be a significant problem, and if you get a bit more clever with the database you could manage multiple submissions more cleanly if you decided it was worth the effort.
The problem is that the synchronization service is centralized and source code of the server side doesn't seem to be available, so you can't easily start your own DenyHosts service and you have to rely on 3rd party (which might be fine for some use cases).
A fairly manual setup would be to change the configuration that calls iptables to update rules so that it calls a script of your own devising which loops through a list of hosts (read from a file?) and makes the iptables calls on each via SSH. You would need key-based auth between all the hosts configured for this to work. Admin automation tools like puppet may make setting this up and maintaining it easier. This would not be terribly efficient but unless you see a massive amount of probing traffic (and/or have a massive number of hosts) then I'm sure it would be good enough. If you only have a few hosts then you don't even need to loop through a file: configure each to just call the others in order. The scripting effort will be minimal.
An alternative to fail2ban is DenyHosts which comes with a synchronization functionality. Installation is fairly similar to fail2ban, see Cyberciti's tutorial for more details.