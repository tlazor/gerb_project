Whatâ€™s more - with AlwaysOn, the failover is possible for a single database, a group of databases or for the entire SQL Server instance. In addition, AlwaysOn availability group allows the user to create more than one failover target and to have the full control of the failover process.
Unlike monitoring the Failover cluster or mirroring (where passive/secondary components are inactive), AlwaysOn Availability Group allows the direct interaction between a user and secondary databases, but ONLY for reading (not writing).
If you take a look at this article http://solutioncenter.apexsql.com/performance-monitoring-of-alwayson-availability-groups-part-1/ - you will understand that AlwaysOn availability group performance is not linked with "performance" but with "reliability". AlwaysOn is the synergy of the best of clustering (FCI) and database mirroring, folded in the single feature - as analogy to this, look at this as RAID 1 which is there to keep your data safe, rather than RAID 0 which sacrifies reliability to gain some performance.
So, by careful planning you can actually get some performance improvements, by distributing loads from primary to secondary etc. Anyway, I strongly advise you to monitor AlwaysOn metrics to get some insight in how your AlwaysOn AG behaves performance wise and if needed you can reconfigure your AG to squeeze out some better performance if possible.
Create alerts and notification on AlwaysOn metrics that can help you to analyze the potential bottlenecks and performance problems, so that you can deal with them timely. Once you establish this well, it should help you in both fields - reliability and performance.
You can use some SSMS built-in monitoring solutions via AlwaysOn dashboard or use T-SQL scripts for direct querying of the AlwaysOn dedicated DMVs (or Performance Monitor, but it's a bit tricky).