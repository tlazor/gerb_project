Check constraints based on UDFs are rubbish. Concurrency, RBAR, isolation etc as you've found out. Some links:
The constraint is active, as we can't just manually add a row that bypasses this constraint.  However, when we run CHECKCONSTRAINTS(Files), we find that it has been bypassed on a handful of occasions during our test runs.  The rows in question were all created within a half-second of one another, suggesting some kind of race condition.
Edit: to prevent a file and a folder having the same name in a given parent folder only, use an indexed view. Duplicate files or duplicate folders requires table level uniqueness.
Individual rows are added inside transactions, so I'm having a hard time understanding how duplicate rows are sneaking past this constraint.
That CheckUniqueNameInFolder function is hardly checking anything. Plenty of duplicates can be added under that constraint check. It has two distinct SELECTS that are run sequentially (therefore the condition checked by the first select can be invalidated by the time the second one runs) and, in any case, the constraint tells, at best, that there was no duplicate when the check occurred, in no way does it tell that there is no duplicate when the insert/update occur. Since the checks do not lock the keys being validated in U or X mode, multiple inserts can occur concurrently, do the check, find no duplicate and all proceed to insert the same entry.
The safest way for SQL Server in this case would be to use standard constraints such as unique and foreign keys. I can't see why you check the folders table for a constraint on the files table though
The reads aren't mutually exclusive and serialized so two concurrent transactions can both read that the row does not exist. You could add UPDLOCK,ROWLOCK,HOLDLOCK hints to the SELECT.
Here's the constraint being applied to the table.  The rule is meant to ensure name uniqueness in a given parent folder:
Create a computed column with the full path of your 'files' and enforce uniqueness on the entire path with a UNIQUE constraint, or perhaps use an UNIQUE constraint on (ParentFolderID, Name). Don't store Folders and Files separately, use a common table for both Folders and Files (eg. Entries) since they occupy the same namespace. 