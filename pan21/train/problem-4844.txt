To be a good DBA you also need the confidence and maturity that tends to come with age. Others have listed other aspects of this, but I'd add having the confidence to say no and stand your ground, tempered with the experience to know when it's appropriate.
It's hard to judge whether being a DBA is really what you want to do until you're doing it, but through the above route people are able to gradually build up to it. You may either love it and make it your career focus, or find it's not for you and stick with your previous career path, all without taking a giant leap into the unknown. But, that takes time, and that fits with DBA's tending to be "wiser in years" in the industry.
As someone who considers himself primarily a SysAdmin and secondly an accidental DBA, I think part of it comes down to the amount of knowledge required to stand on your own and do the job, or perhaps more importantly, to understand the job.
Finally, I think being a good DBA requires a certain mindset, and it's hard to know whether you have that until you've been in the trenches. Having an eye for detail, a willingness to plan ahead, the ability to look at the big picture, and a not being afraid of documenting your work are important aspects of maintaining a stable system. Some SysAdmins and Developers are like that, and can easily make the transition, while others may find that while their approach has value in their current work, as a DBA they'll struggle and find these things a chore and not enjoy the work.
The old MCDBA certification sums it up quite well I think. It required four exams to be passed, a SysAdmin exam, a Network Infrastructure exam, a Database Development exam and a SQL Administration exam. That's quite a broad range of topics, so realistically you're likely to come at it via one of them first. I would argue that much of SQL Administration stands on the shoulders of the other three, so most people come at it via one of those routes initially. For instance a SysAdmin handling the SQL backups (my first foray into SQL many years ago), or a Developer designing the database for the code they're writing. Starting out you won't know everything, but you'll have the grounding in at least part of it, for instance the systems SQL runs on and how permissions work, or the programming methods used to talk to the database, and from there you can learn the rest.