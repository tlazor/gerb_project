The next two tests, using an equivalent .NET / SQLCLR method and passing in either NCHAR(0) or 'iv', worked every time:
I tested the approaches noted in both Kevin's answer and user3792838's answer, using both the built-in T-SQL FORMAT function as well as the equivalent .NET / SQLCLR function (using the SQL# library, which I wrote; and the Date_Format function is available in the Free version). I tested across 4 versions of SQL Server ( using SQL Server LocalDB, though that shouldn't matter ):
This works due to what appears to be a quirk of how the .NET implementation of CultureInfo looks up the culture data. The string comparisons it is doing seem to ignore any data following a null character, likely because they are being done within native code in the CLR via functions intended for use with null-terminated strings. It therefore sees a string starting with a null character as being equivalent to the empty string, which as you noted is the documented identifier for the invariant culture.
I have found only one way to get FORMAT to use the invariant culture: pass a string starting with the null character for the culture parameter.
DISCLAIMER: This is obviously rather hackish since this behavior is not documented for FORMAT nor for CultureInfo. I have only tried this with SQL Server 2012 running with .NET 4.0.3. I personally would not rely on this behavior for anything that cannot be easily changed if it were to stop working due to a future update.
This change in behavior appears to have been introduced in .NET 4.5 as it is noted in the documentation starting with that version (in the "Remarks" section). That info is not present in the .NET 4.0 documentation.
I found that each test worked the same across all 4 version of SQL Server: one variation did not work in any version, and the other 3 worked in all 4 versions.
The first test, using the built-in FORMAT function and passing in NCHAR(0), failed each time (even though Kevin reported that it worked in SQL Server 2012 with .NET 4.0.3 on his system):
(The above example is using the "year month" format string of 'Y' since it produces different output between en-US and the invariant culture.)
The next test, using the built-in FORMAT function and passing in 'iv' for the culture, worked every time (even though user3792838 stated that it only worked on SQL Server 2017 on their system):