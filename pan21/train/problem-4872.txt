That way mysqld_safe never runs as root, and you avoid this error. I find this distasteful, but your entire setup is already something i'd never ever do so I think it would be in good company! :)
If you are still getting the error try the above and if their are any matches they are what is to blame.
If you want to cheat, create a wrapper script using buildout_script (http://pypi.python.org/pypi/buildout_script/0.2a1)
Secondly, your problem appears to be the paths.  Not permissions.  Unless you've substituted the actual path with /.../ everywhere in this post, that's your problem.  If you did, please update the question with the full path.
I believe Gentoo and a system-level config tool like puppet, chef-solo, or kokki would suit you better though.
Failing that, do a fresh build and never ever start as a non-root user. Does that make any difference?
Silly question first. Are you sure there isn't another mysql running? Read-only errors despite sane permissions (and despite 777) are almost always a sign that files are locked by another process. You can use lsof to find out if something else is messing with your files:
First off?  Don't use 777 for this.  Don't.  Daemons don't run as root for a reason (monstrous security problem if any of them have a buffer overflow -- if anybody manages to get into your website via SQL injection or other, they've just rooted your box).  Use a wrapper script to drop the privileges after you open the port.  Nginx doesn't need to be run as root either.