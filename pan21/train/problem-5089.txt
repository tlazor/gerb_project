To do so simply set the center object's rotation equal to Quaternion.LookRotation which takes one or two parameters.  The first is the position to look at relative to the position of the object.  To get this simply subtract the target position from the object's position.  The second is the up direction, which you can ignore unless the camera also rolls around the Z from your gyro movement and you want the object to match that, in which case you can just pass it the .up from your camera's transform.
If you want the object to stay in the center of the screen upon rotating the camera then it's impossible to leave it at 0,0,0 without major shenanigans and making it a child object remains your best option (any setting of the position by you would just be duplicating a good chunk of what making an object a child does already)
Note that neither of these will move the object, so if you rotate your camera without moving it in space to keep it facing the object the object will leave the center of your screen when you turn the camera! 
While I agree that making your object a child of the camera should work (though it won't stay at 0,0,0); If you want to keep the object at it's current position and only adjust it's rotation to face the camera, you can use LookRotation to get the behavior you want.
If making the object a child of the camera doesn't seem to be working, make sure it's parented to the gameobject that's actually rotating and not a container object which only shifts position.  This is an easy mistake to make that's tripped me up before when working with camera objects where the object with the actual camera component was actually one or two children down in the hierarchy.
Well I think I was overthinking as I was doing it for VR Headset so I was thinking there should be some really complex thing to achieve this. But this is super simple. You need to make the object child of your camera and keep in mind that you need to position it locally.