The most common reason I've used DB links in the past is for sharing of data between 2 databases, generally for import/export -style purposes. Using Data pump Import with Network Link option via DB link (I believe this option became available in 10g) can save the hassle of dealing with export files and finding the disk space , then transferring the files ... :) (ie leave out the middle man).
The primary reason to use database links is to enable database operations to be stored in a local procedure but to operate on the data in a remote database. This can be useful if the data has been brought up to date in a local database, but needs to be recorded for some business reason in some remote database.  A stored procedure in the local database can fulfill the responsibility of making the data available in a remote database, which might be the global database.
Closely related, but different, is the concept of Table links in MS Access.  This gives the Access application a view on data that is actually stored somewhere in a much larger database.  Often, the Access table link is connected to a view in the master database that summarizes or restricts the data in some huge table in the global database.
Additional, as others have pointed out, you could have an actual setup using multiple databases, where they are logically separate databases, however, in 1 of them you need to "look at" some data from the other one .. for whatever reason.
in short, anytime you need to access data from 2 or more databases using the same code/script/process, db links become an option.
Either one of these can be used for "pushing" data or "pulling" data.  I have tended to use Access table links for pulling data, so as to mess around with it without screwing up the data in the master DB.
In my current job we use it solely in conjunction with materialized views in order to 'replicate' table from one database to another.