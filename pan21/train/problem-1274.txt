In general, only use exceptions for exceptional cases. Everything which could be written using normal conditional checks should be written as such. (Hence the name exceptions.)
The other thing that you have to watch for is that you don't "squash" the exception.  For instance, your code looks like it might be catching an exception with serious consequences, logging it as a "minor" issue (level == debug) ... and then continuing as if nothing bad had happened.  This approach is a bad idea.  It makes bugs harder to find than if you'd just let the exception propagate and produce an ugly stack trace ... or whatever.
There are some exceptions I classify as "exogenous" exceptions. That is, they are exceptions that state "the world is not how you assumed it would be, and we can't do the thing you asked". The problem with exogenous exceptions is that the world is constantly changing. You think you're going to be able to access that file, and then someone changes its permissions from another process, or the tape drive catches on fire, or someone unplugs the router, or whatever, and oops, you can't access the file after all.
And if the string is malformed, it throws an exception. That is vexing! The developer might have a string where they don't know whether it is well-formed or not, because a user typed it in. The work they have to do to avoid the exception is equivalent to simply not calling the method in the first place. A better way to do it is:
Exogenous exceptions are precisely the ones you should be catching; they indicate situations that are rare enough and dangerous enough to reasonably be exceptions, but common enough that you can have some clue ahead of time as to what they are, and reasonably recover from them.
Sometimes they are hard to avoid, as in your example. I would consider it bad practice only in cases where the exception is easy to avoid (e.g. by testing the sign before calculating the square root).
In your particular scenario, you should wonder why the process is being terminated. Is there no way you could prevent the exception from being thrown? Perhaps you could solve the issue better by attaching logic to the Exited event. It all depends on what your sample code is doing.
In general, if we assume that the exception is going to be thrown (i.e. there's no simple / cheap / reliable way to avoid it), then there is nothing wrong with catching it.  However, the question is whether you are going to achieve much by doing so.
The other class of exceptions you need to catch are the "vexing" exceptions. That is, the exceptions where someone wrote you a library that communicates with you via exceptions in non-exceptional circumstances. Ideally you should never write a library that requires the developer to catch a vexing exception; rather, expose tools that allow them to prevent the exception.