We've used it with students as young as 8. On the whole we've concluded that age 10-11 is a sweet spot for starting with this kind of thing (as against something like Scratch). Some 8-year-olds can definitely get to grips with Processing, but most get a little frustrated after the first 5-10 lessons at how slow progress can be. In particular the reliance on coordinates can be a very high bar for younger students to cross. 
Although full-featured Java can be a bit daunting for the beginner, the tools I mentioned can be used to keep it simple enough to teach programming. (Turtle Graphics is, iirc, how I was introduced to programming in high-school) 
An advantage of this approach over using a language designed only to learn programming, is that this approach more easily gives access to more advanced learning tools, as more people use Java than very specific learning languages.
It has a "Compile" button but seems to compile automatically after saving so if you want to run your project, you can just press the "Run" button.
To create visual output in Java, you can use the Turtle Graphics package, which visualizes the path a 'turtle', let's call him Joe, walks, according to the commands you gave Joe in Java (e.g. joe.forward(100), joe.right(90), etc.)
As an alternative, I also would recommend Javascript but I think it is already in one of the other answers. 
Greenfoot is an IDE for Java which was created for teaching purposes. It displays a graphical "world" (a two dimensonal rectangle with configurable background) in which "actors" can be created, deleted, react to user input and move.
I personally always enjoy working with Greenfoot, but depending on (mental) age and programming interest of your students, a graphical language like Scratch could be a better (more motivating) choice.
It is using Java and is therefore object-oriented, which could be demonstrated by placing multiple actors of the same class in a world. Additionally, extending classes is visualized using a tree diagram and has to be done from the beginning on as each "actor" has to be a subclass of the abstract Actor class.
As a sidenote: Greenfoot has recently introduced the "Stride" language which introduces its own syntax, forces indentation by being a bit more graphical and can be (only) used through shortcuts. I haven't extensively tested it yet, but didn't want to leave it unmentioned.
Processing probably ticks a lot of your boxes. It's essentially a framework built on top of Java and shipped with its own IDE (also free and open source). A lot of the boiler plate code that normally exists in Java (package and include statements and so on) is hidden by default, so it's very clean for newbies (you can import extra packages later if you need to in the normal way). As straightforward as you'd want it to be to put together simple versions of classic games, like Pong below, which I think of as a good barometer for a teaching language.
Although, I never got a chance to use C professionally (like when I work on software projects for enterprises and small companies and startups), I ended up teaching that so many times. From a software developer perspective, C is just not right for todays environment, but for some reason, I feel that it is the simplest language to learn, and that is what I advise to students who are young, and brand new to programming. 
As to language oddities you could say it has all oddities Java has - relevant for starters might be the == or equals problem when comparing strings.
In addition, Dr. Java supports some more advanced features (without cluttering the screen), such as automated testing and code coverage with JUnit and a debugger.
Dr. Java is simple IDE for Java that is designed for students. Dr. Java insist you press the 'compile' button before the 'run' button, but that is all. 
As stated on the overview page of Greenfoot, it has auto-completion and a built-in access to documentation, which is (as far as I remember) quite good. The auto-completion seems to work good as well (I've just done a quick test). Auto-indentation is also included, but has to be triggered manually.