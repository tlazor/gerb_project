VxLAN provides VLAN like isolation with point-to-point connectivity, meaning your network can be entirely ignorant of the details, or indeed, of the overlay network. 
So: don't do that! UDP or raw IP is a much better encapsulation, as they don't provide another unnecessary level of retransmissions. Tunneling protocols exist both for UDP (GTP, VXLAN, Geneve) and for raw IP (GRE).
In such environments it is important that the overlay network plays nice with the underlay network. The underlay network is likely to be very high traffic and thus make use of features like Link aggregation and Equal cost multipath.
UDP is used as a convenient format in terms of programming and its use of src/dst port provides a ready means to both multiplex connections as well as a means by which intermediary forwarding elements can hash connections over parallel links.  In short, UDP is familiar, has low overhead and is already extremely well understood.
ECMP and link aggregation rely on being able to hash the header fields of packets so that packets belonging to the same transport layer session go down the same path and hence are delivered in-order. To maximise efficiency you want different sessions on the overlay network to be regarded as different sessions by the devices on the underlay network.
While TCP over TCP may appear to work if packet loss is low, having retransmissions at two different levels makes the system increasingly inefficient at high packet loss rates.
Consider, too, that you can implement TCP somewhat efficiently on top of UDP, but not the other way round: if you choose TCP, you opt-in to all kinds of extras (as compared to UDP), like error detection and retransmits, that will cost you whether you make full use of them or not.
OTV can run over MPLS-GRE or UDP, with UDP being the preferred mechanism for the past few years.  Again, one of the big drivers was depolarization of traffic (allowing parallel paths to carry determinstically hashed fractions of overall traffic).  
While the accepted answer explains well why UDP is used instead of raw IP, it doesn't explain well why TCP is not used. The short reason is that the Ethernet packets traveling inside a VXLAN tunnel have most commonly already one level of TCP. If you encapsulate those packets inside another level of TCP, you have two levels of TCP in the same packet.
Not related to VxLAN, but for 'building TCP from UDP + time', see for example https://hpbn.co/building-blocks-of-udp/ (and I would recommend reading the TCP section to understand what the disadvantages of TCP vs UDP can be). 
One reason VxLAN was developed in the first place is that placing headers directly in the frame would effectively make this a GRE or VLAN. It also has limitations, notably linked to the fact you can only pile an extra 20 bytes onto your frame so many times before it requires MTUs to be adjusted throughout your network, or will start impacting throughput (not to mention switching overhead linked to reading/popping/adding VLAN tags). 
Why not TCP?  Excessive overhead on the encapsulating device and added latency are big examples.  The bigger point, though, is that to get any value out of TCP would require the ability to concatenate the individual packets to be encapsulated into an overall stream to be managed via sliding windows rather than simply maintaining a 1:1 mapping.  Add in the amount of state tracking and buffering issues associated with having the capability for retransmission and it becomes truly unruly.  
Most better ECMP and link aggregation implementations understand UDP. VXLAN uses the UDP source port number to communicate session hashing information from the overlay network to the underlay network.
Another reason for using UDP is that it is a 'standard' protocol, so unlike things like GRE/IPSEC and similar, you don't need intermediary devices to support anything exotic.
It is designed for big multi tenant datacenters that need to provide virtual Ethernet networks to their tennants but are outgrowing the conventional VLAN/STP soloution in terms of the number of VLAN numbers or the ability to efficently route traffic. 
Yes - your understanding of encapsulation is correct: a given frame has a VXLAN header applied.  This is carried in a UDP packet.