I'll share one other short example where students have to implement a command-line calculator in C and used switch to identify which operation to perform. Here's the switch from there:
This function takes in a character corresponding to the card's value. I used a single char as the data type for each card, so I needed a function that took in a card's name (i.e. letter) and returned its value. Were I to design this again, I would probably reduce it down to one return statement and have a variable represent something like cardValue (and in that case I'd need to use break statements, which I currently omit thanks to return). That said, the switch statement is a clear example where you don't want a bunch of if-else statements. For the face cards that would be redundant. There's a nice mix of those cases that "fall through" and those that don't. 
Using card games where cards share the same value is a fun, but realistic example for students to see the value of a switch statement. 
When possible, avoid contrived examples for motivating usage. Instead, show where you (or someone else) used a switch & discuss why it was preferable.
The example that instantly comes to mind is Blackjack. See the code excerpt below for an extended example in C (even though it's C, the syntax will pretty much hold true for Java as well):
With this example the clarity of the code is made much stronger by virtue of the case statements for each operation. From a readability perspective, it makes it clear how the operations are separated out by showing so visually.