Imagine you were tracking someone on Google Maps, and that person could teleport anywhere in the world, at any time, and you were trying to connect these dots. 
This is an answer, not a solution. There is NO solution to the question. The asker clearly states: "from a log that is being actively appended by an application".  You can read on to understand more, and skip to the end for a suggestion I make based on my presumption why this code isn't following logging best practices.
regular (nightly or weekly, typically) moving of an existing log file to some other file name and starting fresh with an empty log file. After a period the old log files get thrown away.
The Linux tool "truncate" can discard data at the end of the file, by simply walking the inode tree and (at the location/size you designate) it will discard all subsequent pointers in the stack.   To do the reverse - discard data at the start of the file - would be a such horribly complex and risky process of rewriting the inode tree in real-time that nobody will write such tools for the public, because they would often fail and lead to data loss. The Inodes wiki is short but explains some of these concepts.
Whenever I hear "to an ACTIVE logfile", I immediately ask that person to tell me the "special story" behind this application. Usually it is" the developer quit, and we can't change the code. This is actually the inverse of safety, has it's own set of risks. But I get you want a solution that avoids touching the source code. If this is the case, a more specific question is needed.
Opening in sublime text Deleting the lines and saving the file works somehow, even if the file is getting appended, but I came here for searching the solution for a command-line solution, so I would just leave this working but useless solution here!!
ACTIVE files are not some kind of container you simply put data into. A filename points to ONE inode (start of the file) and every inode has a pointer to another inode (if there is more data). That means a continually written-to file has a constant stream of inodes being added to it, and what you think of a "file" is actually a log sequence of inodes. 
**My advice: flip this problem around -- WHY is this application behaving this way? There's many Logging Best practices but often they're tied to what your logging system actually is (syslog, etc). At the core, an application is expected to "release" it's handle to the file, so logrotate (etc) can handle further processing of the old data.
To be clear: other "answers" here offer the false promise. No amount of renaming will trick the application into using the new file. The most useful information is buried in the comments made to these incorrect answers.