The distinction is subtle, and may be a bit difficult to understand. Especially since I can't think of a good example for it, but static is rarely, if ever, used. In the five years I've been doing this, not that long I suppose, I have never needed static for anything. There are exceptions, but I doubt you will ever need them.
Because your code is so dependent upon static properties many of its methods must also be static. This also includes your constructor. You can't properly instantiate your class because everything is static. You have to manually check it instead of relying on it. This extermely inhibits your abilities and makes your code repetitive, which violates the "Don't Repeat Yourself" (DRY) principle.
There, no more need for globals. If you need to access it outside of the class, then there are a few different ways to go about it. The first I already showed you with referencing, though I don't suggest it due to lack of legibility. In fact I only mentioned it because you were already doing it. The simplest way is to manually access it from the class scope. Again, not really the best way as you normally don't want to be directly accessing these properties, but a possibility. The final way is to create a getter for it and call that getter as you need it. This final one is the one I'd recommend.
If you know the file you are looking for is actually a file and not a directory, use is_file(). If you are not sure, use file_exists(). If you know it's a directory use is_dir().
There is no reason to use a global, ever, but especially not in a class. Globals were replaced by properties.
Peter mentioned that PHP is already a templating language. By this he meant that it is fairly easy to add PHP variables to HTML unobstrusively.
Going along with the above suggestion, you can then also reuse an access modifier. Though I seem to be one of the minority in this regard. So this is subjective.
PHP inherrently requires braces in its syntax, otherwise you wouldn't have to add them after your statements became longer than one line. To be consistent, and to avoid accidents, it is best to just always add those braces to your statements. This can also make nested statements easier to read.
First of all, I'm really impressed that you are using comments. That besing said, in the future, please exclude them. Especially if they account for half of the scrollbar. It is intimidating to those of us trying to answer this, which means less meaningful answers for you. It is also unnecessary as most of us can get by without them. If you MUST have comments to explain your code then your code obviously has something wrong with it. Comments should be used in the public API, interfaces, or abstract classes, not in the code.
I would not suggest using short tags unless your server is using one of the most recent versions of PHP where they are always available, otherwise you will have to make sure your server enables them manually.
self::$cpath from above is a variable-variable. These are almost as bad as globals. MVC is one of the few frameworks where they are usually considered acceptable, but you are abusing that here.
Resubmit this with Peter's suggested changes and I'll go into more details about your code and some of the principles I talked about and how to apply them. Sorry I can't do more.
There are quite a few different reasons why globals are considered to be bad. Chief among them is security and lack of legibility. Globals are accessable from any script. So, imagine if you had a $user global with all of the user's credentials. This is a huge security risk. Any script can access this. A private class property, on the other hand, is unavailable outside of that class and therefore is not subject to these issues. Also, globals are not not legible. You have no idea where they could be coming from and they could change at a whim.
That being said, some of these properties would be better as constants. For instance, those path variables. Properties/Variables are "variable", they change. A path isn't likely to change, thus it should be declared as a constant. Technically they shouldn't be hard coded into your classes at all, but for the time being I'm just going to suggest you change them to constants. For more on this take a look at: Separation of Concerns (SoC), Inversion of Control (IoC), Dependency Injection (DI).
Sometimes it is important to abstract information from your statements just to improve legibility. This is especially the case in long statements or statements that have nested braces. Long statements are any that break 80 characters, including whitespace, usually denoted as the 80th column on editors.
Ternary statements are a powerful tool. But you should know when to use them. If your statement becomes too long, see above, or to complex, then you should revert to using if/else statements. And above all you should never nest ternary. However, sometimes you can just abstract a portion and that will fix it, but not always. Here's an example:
This actual review is going to be short. I'm usually much more thorough, but as Peter pointed out, this is very difficult to read. Make the suggestions we recommended and post a new question and I'll try and make a more thorough review. At the moment I can't get past the first globals and statics. Sorry for that harsh truth, but there it is.
This is not a functionality suggestion, but one of legibility, which is equally important, if not more so. If you group like properties/methods together and use whitespace to separate them then it will make it much easier to find what you are looking for. For instance:
This is pretty neat, but not typically done. I personally find this rather difficult to read. There are ways of making it better, such as adding new lines and whitespace after each method, but overall, it just seems cluttered. Another thing to note: The constructor can not be chained and already returns the class instance, thus explicitly returning $this is pointless and redundant.
As Peter said, don't use the error suppressor @. This is a sure sign of bad code. Do whatever checks you need to do to ensure that those suppressors are unnecessary. Specifically in the above code you were suppressing the warning you get when file_exists() fails. I honestly don't know what would  cause this unless the value being passed to it was not a string but an object or array. So you can use is_string() on self::$cpath to determine if you should use it. Do that check before attempting to append on to it.
Another point I would like to bring up before diving in. Peter gave you some really good advice. Vague, but good all the same. The fact that you shot it down almost immediately worries me. Yes, a better explanation would have been nice, but flat out saying that you aren't going to change something is not very smart. What we are telling you, for the most part, is all VERY good advice that comes from experience. They are suggestions, but not without purpose. Some comments, like those about globals and static, will always be the same. There is never, or almost never in the case of static, a good reason to use them. If there is some reason you must not or can not change something, then you must factor that in while reading a review. But ask why someone said something before just shooting it down.
When you return $this you are returning the object so that further methods can be chained to it. For instance: