200MB of database usage a day is, I don't know, a tad optimistic. I think even tenfolding it still won't be enough.
Depending on the quality and efficiency of the code I'd say three average â‚¬3-4000 servers, perhaps even up to five or six for redundancy and load-balancing.
Having said that, 100,000 users isn't a huge load if they only load the page a few times a day.  You should be able to get started on that with as little as a single server and probably no more than 2-3 total.
Will depend on how much time/page loads the average user has.  Social networking tends to be "sticky" according to Facebook, so people hang around for a while.  More page loads means more load on the system.  The code behind the site will have another huge effect, better code will put a lighter load on the system.
A request taking a third the amount of resources and time will in theory be able to be delivered three times as many as it's poorly written counterpart.
These days if you don't have a good idea how much/how fast your site will grow you might want to consider one of the cloud hosting environments like EC2 or Rackspace Cloud/Slicehost.  You can buy two server instances to get started, and add more servers quickly as load changes.  Experience with your app is the best way to get a solid idea on how much capacity you will really need.  Excess capacity sitting around is expensive, so avoid it if you can.
100.000 users browsing an average of ten pages per hour during 16 hours a day amounts to about 280 requests/sec and bursts at perhaps three or four times that.
Unless you happen to have 4 million users all lined up ready to use your site I would just get one cheap server to start everything with and see where it goes from there. Concentrate, instead, on building a scalable software platform for your service. Test, benchmark, profile everything you can so you know what the limits of your software/hardware is at any time and what effect changes have.
If you are mainly just curious about high end scalability you can search for how the current "big guys" do it and the challenges they faced along the way. For example, Facebook, Wikipedia, High Scalability, MySpace, etc.... You may not be aiming so high but you can learn a lot from how they do things and use the same design patterns. Unless you have experience working with such large systems it is very hard or impossible to guess the scalability issues you are going to have until you have them.