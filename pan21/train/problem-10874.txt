Instead of checking for the negative condition, check for the positive. It removes several lines of code and a comment. 
I've made some changes to my motor class based on some of the answers I received here and some additional research and tests. I also changed it so it can be used in a form based application (WPF in my case) and this is what I got:
This works but I'm still not feeling good with my long lived NetworkStream and the fact that I couldn't separate the SendCommand() and the Listener() into two different classes because the listener class stooped receiving data when used with a different TcpClient instance.
However, in SendCommand and Listen, IDisposable objects pop into being with the call to GetStream(). The lifetime of that variable needs to be wrapped in using to ensure proper deterministic disposal.
I'm going to argue against implementing IDisposable here. The class itself does not create any IDisposable objects - the only one happens to be passed into the constructor. It's a bit of a surprise to have an object used elsewhere be disposed unceremoniously without the caller's knowledge. So, don't implement that interface and let the caller wrap the new TcpClient(...) in a using construct.