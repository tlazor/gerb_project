Random arrays are actually not that common. Lots of times you will be sorting an array that is already sorted (because someone was careless), or one that is almost sorted, or sorted in reverse order, or is a sorted array with some elements added. 
To handle these cases well, I'd try picking the median of three numbers randomly picked reasonably close to the middle of the array. If the array is already sorted, or sorted in reverse order, or has some random elements added at the end, that median will be very close to the median of the array. In an array that was sorted with random elements changed, it is still quite likely to be a good choice. 
An interesting variation happens when moving elements is much slower than comparing elements, for example if you are not sorting numbers or pointers, but large structs. If you always pick a pivot that is not the median, but say at the 30% or 70% percentile, the number of comparisons grows, but the number of moves actually goes down! So instead of the median, you might take the second or third of four values in that situation. 