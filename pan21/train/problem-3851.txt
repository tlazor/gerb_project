We in the industry know that it's fun to do these things, but any company that has pandered to its staff and let them have their head came crying to the banker when the money ran out.
All non development tasks can be done by anyone. The team must be capable of completing the development. Marketing, licensing and company directing legal stuff are all easy to pick up. A lot easier than games development itself. It all takes time though, so try to pick someone who's going to be done with their part of the development early to take on these roles, and maybe someone who doesn't come in till later to take on the role of company direction.
There is no need to draw a grand backdrop if you're only going to see it through a dirty window, no need to code a physics model if a free one will suffice.
e) Every project needs a different team. Since you don't tell what game you're working on I can't get very specific. But given a little bit of planning and design you'll most likely end up with a list of project roles you're going to need. Additionally you'll need someone to act as the sysadmin (e.g. for servers), research and maintain the asset pipeline and tools, do the PR and maybe budgeting.
In addition to the digital asset creation skills you must have, you also need to acquire the sense of when to give up. If something is proving to take longer than expected, as a hobbyist, you need to find something else to do to keep rolling. Small teams means there's less chance that all your requirements are covered, and that'll mean last minute research and development before the game can come together. Heed the advice of those who have gone before regarding what not to do and how to do stuff without doing it right. There's time to be wasted doing things right when you could just get them done. Not sloppy coding or bad art, but test driven development way of thinking, do only what you need to do to get it performing as expected.
The design for the games comes from the business guys (which happens to also be a programmer who has made multiple games previously) mainly, but with a lot of input from the programmer.
I can write about how I work since what I do could be described as a hobbyist gamedev. We loosely have a 4 person team: programmer, business guy, graphics artists and music guy. The graphics and music guys are contracted do for specific work and are paid per hour/job.
The programmer does the actual programming with the business guy helping with the testing. Once the game is ready, the business guys take responsibility for pushing it on to vendors, try to get deals with distributor/carriers. When new platforms are made available, the programmer ensures that it will run properly and make modifications as necessary. Of course, there is bug fixing as well.
As a hobbyist, you'll likely need to pick up a graphics package as a programmer, and figure out how to create audio too. There's no pain like not having an asset to get something tested.
Hobbyists need resources as much as professionals. However, hobbyists don't need to maintain old code. This is a crucial difference between industry and indie. The difference manifests itself in skills required, but only slightly.
d) Persistent communication rules. Use something like basecamp and version control for everything. This way, people can easily reconnect to threads that were dismissed months ago, and keep their information up to date. Also, you can backtrace decisions and have everything documented. This is especially important if you work in a distributed team.
b) It all comes down to personal preference. If you're a game designer and more of the social kind of guy you might enjoy marketing. Maybe your game designer loves Twitter. Then he/she should definitely take over that PR aspect. Maybe she's good in English - she should write the PR texts then. Finding motivation for some tasks can get very hard in a hobbyist team. If you like what you do you'll be more easily motivated.
a) Many hats. There's no way that you'll have clearly separated roles. Some roles might be easy to assign to one and only one team member. Others will have to be shared. In our team of five (we're not hobbyists but a similarly small team) we've never managed to clearly assign roles because we're still too small for that.
c) Stay agile. Even if you find the perfect team, there are a number of roles you'll only need at certain phases of a project, e.g. a graphics artist and an audio designer. You can hire those or ask a friend to do it, but you can similarly find someone in your team who's into audio and have him mix your soundtrack and switch back to whatever he did before, afterwards.
We work in the mobile space, so it is not clear if the concept would work on the PC/Console due to the size of the games produced. We are on track to get 3-4 games out per year. Finally, the programmer and business guy split the revenues.