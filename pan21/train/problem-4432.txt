Of course it actually depends on what your system looks like. It's hard to say without actually knowing application.
I'm not so sure that POP3 access is going to be all that slow. I'd be wary of doing the integration at the filesystem level, because you may have contention and locking issues (ugh-- think about mounting maildirs over NFS as an example of fun filesystem contention issues) as new mail comes in. POP3 gives you a nice method to atomically access items in the mailbox.
You're adding more layers and potential bottlenecks, certainly, than just accepting SMTP directly into your code, but you're leveraging all the work that the mail server authors have already done. I'd rather have a scaling problem on a mail server, though, than a scaling problem on custom SMTP server code.
Instead of POP (if you go that route), use IMAP(S).  That way you can leave things on the server "read" once they've been acted on.
An issue with POP3 that springs to mind is the default use of cleartext credentials. If you can run it over SSL (mail server dependent), you can mitigate that concern.
I've seen apps do this with POP3 (Spiceworks is one example I can think of). I think it's a decent way to separate the app. server from the mail server, and allows you to let the mail server concentrate on what it does well and freeing the client from the queuing / storage duties for the messages.
I'd either simply create a tool that regularly fetches all mails in the defined POP3 accounts, or even better yet (IMHO) fetch it on an event basis.
By event basis I mean something like: You have a website that lists the emails retrieved. Whenever this site is loaded a background task is fired off that fetches unseen mails from the mailbox.
Having multiple consumers running on the same POP3 mailbox at the same time would probably be problematic (if you're trying to scale out to handle more message traffic). For that, you might want to script something on the mail server side to round-robin distribute incoming messages into a group of mailboxes, and tie each consumer to a given mailbox. (You might consider using IMAP for a multiple consumer architecture, but that's just me blowing smoke w/o thinking it thru.)