On the other hand having a modelview matrix per object may be a pretty good idea. Off the top of my head you get the benefit that you don't need to do matrix calculations in the rendering phase (since it can be set in the physics simulation phase). This means you only have to recalculate these matrices if the object actually moves. It probably has some memory penalty but that's unlikely to matter on today's hardware. It may also allow you to have one transformation matrix for both the graphical and physical representation of the object (this depends on the frameworks you use).
In my OpenGL ES2 engine I have global transformation matrices (one modelview and one projection, obviously). I guess I've done it that way because it resembles how the old pipeline worked. It also makes sense because the way you traverse the scene you can build a stack of matrices (again, similar to the traditional approach) and it's really easy to understand - you can just think of the matrix transformations as camera movement.