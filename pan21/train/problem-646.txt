While it's a good idea to provide documentation on the parameters for your functions, these comments as is are not helpful. They just take up space and are distracting -- after all, I can see the names of the parameters just a few lines below the comments.
There are places where you've written a lot of code that does essentially the same thing. For example:
Alternatively, you can introduce using declarations like using std::cout; to add specific names to the global namespace.
These two structs hold the same categories of data, just that one holds budget data and the other holds expenses data. You can just create one struct (called, e.g. Categories) and use one variable of that type for all the budget data and another variable of that type for all the expenses data. Using one struct for both reduces the amount of code you have to write and, more importantly, reduces the risk of bugs if you need to add or remove categories: instead of having to remember to modify both of your structs you'd only have to modify the one struct.
Instead of simply listing the parameter name, provide some explanation of what values it is allowed to take (e.g. months should be between 1 and 12, inclusive), what happens if the parameter value is not valid, etc.
Good job breaking up the logic in main() into different functions. However, some improvements can be made.
You could do the same with the code that acquires the expenses inputs (in fact, you could write one function for both).
This can cause name collisions because it adds every name in the std namespace to the global namespace. For a small program like this one it's unlikely that you'll run into any problems (then again, maybe not) but it's best to get into the habit of using the std:: prefix on names in the std namespace.
Not only is this an opportunity to refactor that code into a function, but the numbers 14 and 11 (arguments to setw() here) appear multiple times in your code with the same purpose. Instead, define a constant (e.g. const int width = 14) and use that constant. This means that if you ever want to change that value you'd only have to change the value of that constant once (the value of the const int width) instead of trying to find the literal 14 all over your program.