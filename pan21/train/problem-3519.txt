A Docker image bundles application and "platform", that's correct. But usually the image is composed of a base image and the actual application.
First of all, many of your updates that you traditionally ran in the past will simply not be inside the container itself.  The container should be a fairly lightweight and small subset of  the full file system your accustomed to seeing in the past.  The packages you should have to update would be those that are a part of your DockerFile, and since you have the DockerFile, you should be able to to keep track of those packages and container IDs that need updates. Cloudstein's UI that will be released soon keeps track of these DockerFile ingredients for you so that one can build the update scheme that fits best for their containers.  Hope this helps
I was considering deploying sonarr and radarr in docker containers but knowing they are not going to get the regular security updates my container gets is a deal breaker.  Managing security updates for my container is enough hassle without having to deal with somehow having to manually apply security updates to each docker image individually.
it is generally even worse than the three choices you provided.  Most docker images are not built with package managers therefore you can't just shell into the docker image and issue an update.  You will either need to rebuild or reobtain the docker image.
The fact that you need to rebuild or are beholding to others to rebuild for security patches seems unreasonable in most cases.
So the canonical way to handle security updates is to update the base image, then rebuild your application image.
The containers are supposed to be lightweight and interchangeable.  If your container has a security problem, you rebuild a version of the container that's patched and deploy the new container.  (many containers use a standard base image that uses standard package management tools like apt-get to install their dependencies, rebuilding will pull the updates from the repositories)