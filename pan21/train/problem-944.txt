In any case I hope it will save some people head caches, not sure if this is best or even good solution, but I like it more, than tracking effects independently of attributes. Making each attribute tracking it's own state is much easier in this case, and should be less error prone. There is essentially only one point of failure, which is fairly short and simple class.
For example, you have a buff that adds defense. There would be at minimum a EffectID and Duration for that buff. When casting it, it would apply the EffectID to the character for the specified duration.
I don't know if you are still reading it, but here is how I'm doing it now (code is based on UE4 and C++).
I worked on a small MMO and all items, powers, buffs etc had 'effects'. An effect was a class that had variables for 'AddDefense', 'InstantDamage', 'HealHP', etc. The powers, items, etc would handle the duration for that effect.
In a game that I worked on with a friend for a class we made a buff/debuff system for when the user gets trapped in tall grass and speed-up tiles and what not, and some minor things like bleeds and poisons.
First, I think that from a design perspective most people are getting too caught up in what types of buffs can be created and how they are applied and forgetting the basic principles of object oriented programming.  
Now how to actually apply buffs from the world is a different story. Here is my food for thought though.
That's just a start, but from there you're just defining what you want and acting on it using your normal game state.  For example, say you wanted to create a cursed item that reduces movement speed...
What do I mean?  It doesn't really matter whether something is a buff or a debuff, they are both modifiers that just affect something in either a positive or negative manner.  The code doesn't care which is which.  For that matter it doesn't ultimately matter whether something is adding stats or multiplying them, those are just different operators and again the code doesn't care which is which.
This function is supposed to recalculate entire stack of bonuses, each time effect is added or removed. Function is still not finished (as you can see), but you can get the general idea.
And I thought, that well, encapsulating single attribute within class/struct is not that bad idea after all. Keep in mind though, that I'm taking really big advantage of UE4 build in code reflection system, so without some rework, this might not be suitable everywhere.
Also I'm not 100% sure about handling CurrentValue of attribute, but it should work. They way it is now.
Including flat bonuses from items. When new item is equipped, new effect (along with handle) is created, and it is added to dedicated map, which handle infinite duration bonuses (those that must be manually removed by player).
My biggest gripe right now is handling Damaging/Healing attribute (without involving recalculating entire stack), I think I have this somewhat solved, but it still require more testing to be 100%.
When new Effect is being applied, new Handle for it is created (handle is just int, wrapped with struct), and then that handle is passed all around as a means to interacting with this effect, as well as keep track if the effect is still active.
And so forth, and when I create a buff I just assign it the BuffType of Curse and everything else is up to the engine...
When you cast a power or put on an item it would apply the effect to the character for the specified duration. Then the main attack, etc calculations would take into account the applied effects.
Another example for an item, would have the same fields. But the duration would be infinite or until the effect is removed by taking the item off the character.
So where am I going with this?  That designing a good (read: simple, elegant) buff/debuff class isn't all that difficult, what's hard is designing the systems that calculate and maintain the game state.
http://gamedevelopment.tutsplus.com/tutorials/using-the-composite-design-pattern-for-an-rpg-attributes-system--gamedev-243
Attributes can be modified only by Effects. Trying to modify them directly is unsafe and not exposed to designers. I'm assuming that everything, that can interact with attributes is Effect.
I know this is fairly old but it was linked in a newer post and I have some thoughts on it I'd like to share.  Unfortunately I don't have my notes with me at the moment, so I'll try to give a general overview of what I'm talking about and I'll edit in the details and some example code when I have it in front of me.