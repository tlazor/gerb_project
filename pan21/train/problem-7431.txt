I think it's wrong. Your entity types are mixing concerns and are no longer simple POCO types, they now have incestuous knowledge of a DbContext (which can access every single entity type and the database itself, run stored procedures, ...everything).
Split responsibilities, let entity types be entity types, and write your GetFooByBar methods in some FooService class that receives an IUnitOfWork dependency in its constructor:
Needing a StartTransaction method on a UoW feels weird at best, because the sole purpose of a UoW is to encapsulate a transaction - in an ideal world, you would only call SaveChanges once in its entire lifetime.
Not only that, but you're working against Entity Framework, rather than with it: a DbContext is a unit-of-work, as it already encapsulates a transaction for you - and regardless of what people say, IDbSet<T> is a repository, at least as far as EF is concerned.
Entity types should be Plain Old CLR Objects - simple classes with getters+setters; yours are full-fledged data access services, and to be honest I'm surprised Entity Framework can even work with those, given the absence of a default constructor and... the singleton.
That way whoever is controlling the instantiation of SomeService gets to inject the IUnitOfWork, and if there are 20 such services, they can all get the same instance, and thus contribute to the same transaction.
Main reason I am trying to write this way is to use this across multiple application layers with out dealing Entities across them. Now all I have to do is add reference to the application and use them as written at the bottom.
I am trying to use Entity framework along with UOW in business class where I want to use this layer across multiple types of applications like web, webapi and Windows Services. So I cooked something from the online resources. Can some one figure out any potential performance or fallback?
I'm guessing the default constructor is defined by the EDMX generated code, otherwise your code would never work. Point is, if a type has to have a default constructor, even considering making a singleton out of it is pointless.