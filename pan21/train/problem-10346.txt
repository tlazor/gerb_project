Have a method in each vehicle where it performs a radial search around itself, if there are any other vehicles inside this radius, move away in a fashion suitable to your liking: 1) Move in the opposite vector, 2) slow down, 3) speed up, etc.
Here is an approach: Every vehicle has a short projected path where the vehicle in the end slows down and enters a loop, these paths may not overlap. Whenever a vehicle comes to the point where it is set to slow down you try to generate a new path that does not overlap any of the existing. If that is not found to be possible the vehicle continues on it's given path and retries making a new path periodically.
I also suggest that any vehicle that is predicted to collide in the near future reduces its speed while maintaining the same look-ahead distance - this will give your vehicles more opportunity to avoid collisions, just as in real life.
You can even do combinations: If the other vehicle's vector is not straight ahead or directly behind: move away; else if it is straight ahead: slow down; else: speed up.
The method could be improved to allow tighter traffic by letting paths leading to loops overlap each other and loops where it can be determined that this will not cause a collision.
I suggest relaxing the 'autonomous' aspect and having a function that resolves predicted collisions between 2 (or more) vehicles. It can be as naive as picking random new directions to travel in and seeing if that resolves the problem, but the important thing is that the function only returns when it's reached an agreement that suits both vehicles.