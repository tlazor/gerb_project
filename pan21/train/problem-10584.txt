So, for slow motion we simply reduce the rate of "Game Time" updates relative to "Real Time". eg: we increase "Game Time" at half the rate of "Real Time" to get a 50% slow down. We can also do the opposite, and run "Game Time" faster than "Real Time" to get a fast forward effect.
For slowing things down within a field, you could use a temporary modifier to "Game Time", however this may cause fun deterministic issues if your game is networked. You may need to confirm the position of objects as they enter the field, and the position of objects as they leave the field to ensure consistency across clients. Lockstep engines will be pretty much fine, but ones that do clientside prediction will have issues with entering/leaving the field and subsequent deterministic calculations of position.
In Box2D, what you want is called a Sensor.  A Fixture is a physics object which will actually cause collisions with other physics objects, thereby preventing them from intersecting an area.  A Sensor does not cause these collisions, but does generate BeginContact and EndContact events, which you can use to track whether your player is in the mud.  Here's some more info.  A Fixture is turned into a Sensor but setting the isSensor property on the Fixture.
If I understand your problem correctly, you are trying to create an area that can detect the player is in contact, but without preventing the player from walking in it.
As per your question. Its important to know whether the game is networked or not, as if the game is networked you need to keep "Time" synchronized between all clients (including both concepts of game, and real time). 
On contact with your mud sensor you can set a modifier on the player's velocity, such as multiplying it by 0.4.  Or, if you'd like the player's animation to slow down as well, you could use a modifier on the deltatime the player receives, causing him to literally operate in slow motion.