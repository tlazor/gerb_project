That will at least give you more clarity and the encapsulation let you test your classes individually. You can also delegate the creation to your main method :
Another quick win would be to move your int[][] board into his own class. So that you can clarify your code by replacing all the board[x][y]==0 by board.isFreeAt(x, y). You can also create three methods to verify if there is a complete row/column/diagonal, make them private and hide them behind a hasCompleteLine():boolean method in that new Board class. And replace the int that is used to know if the cell is empty or X or O by a char where \0 means empty or by an enum. This will clear your methods and make them more readable.
The simplest thing that you can do is extract all System.out and System.in usages into another class, let's say UserInterface so that you can move away the concerns about validating the user inputs and formatting (have a look at https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html)
First of all, your game logic is into a your main method. You should better move it into the Solution class. But of course this is not simple as moving a method. 
This pattern (Create Ui, Create control, bind them together) looks like the ModelViewPresenter pattern that help you in decoupling the application logic and controls from the UI.
Remove the unused parameters from Player and rename all the snake_case_names by a camelCaseName in all classes to be more compliant.