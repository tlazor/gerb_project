In the event that you do not find the right version packaged for you, sometimes a search on Google will yield a person who packaged the right version for your distribution, even though your distribution hasn't done so yet.  If so, and if you trust the other person to not be doing something malicious, then you can typically install their package.
For my distribution, rpm is the package manager, and yum is the command line front-end.  To check if an update exists for a package with yum, I type
Keep in mind that software installed outside of the package manager's knowledge probably will never be known to the package manager, so future use of the package manager with respect to that software will probably need to be handled specially, to prevent the package manager from doing something that makes sense if your version of Python isn't installed.
Whatever your outcome is with respect to your Python module, you should learn a bit about your package manager and how to use it to avoid the rush of needing to learn it at a critical juncture.
Basically, this means learning what type of package manager your distribution uses, and then seeing if the next release is available.  Weaknesses to this technique exist:
If no prepackaged version exists, then you are stuck and need to read the "how to install" pages of the particular item, and for Python, it closely reflects Maxime's "the hard way", which might sound intimidating, but after you do it a few times, you realize it isn't really that hard.
The easiest way to upgrade Python on Linux is to have someone else do it for you; your distribution often has many people who package upgrades specifically for that distribution.  Before you roll up your sleeves and get into it, see if they have already done the work.