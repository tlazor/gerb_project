But the basic reason this is a bad idea is this simple -- having things other than RAM doesn't force you to use them. It simply allows you to use them if it's beneficial. You can't make things better by taking away options.
Back in the 1980s there were a variety of systems that could run completely in RAM.  Technically you didn't need any drive in the original IBM PC or XT, as they could boot straight into a BASIC interpreter built into ROM.  All the early Commodore machines (like the VIC-20, C64, 4+, C16, etc.) (and many others) were the same.
So all you have is RAM, and you can't use it effectively. That would be a horrible recipe for a general-purpose operating system.
Embedded OSs frequently can run completely in RAM, depending on the application.  I wrote one a few years back for an Atmel micro controller.
In the 1990s, the most popular consumer system with the entire OS executed in RAM was PalmOS, which originally had no filesystem of any sort (internally everything was stored in one big (non-relational) RAM record database.  If you happen to remember PRC and PDB files, there were pretty much just dumps of these RAM records for a specific application resource or data store).  It wasn't until they introduced external storage options that any sort of filesystem access was built into the OS, and even then if you didn't use SD or MMC cards in your device, the system would run completely from RAM.  Apps didn't have to "load", as they ran pretty much in-situ (although they could allocate stack and heap space, naturally).
As to why we don't frequently see this in practice outside certain areas of the embedded space?  Even embedded devices need to initialize from something, and these days flash memory is pretty cheap and reliable, making it pretty easy and cheap to at least add some small solid-state storage to boot from.  And unless your volume for your device is large, having ROM chips made to contain your OS for bootstrapping/reinitialization can be expensive.  Of course, in more general purpose PCs where the manufacturer doesn't know what sort of load you intend to put onto the system, being able to have persistent storage that can be used as a backing store for swapping virtual memory pages is a huge benefit.  But for more custom needs that don't require massive storage, there are a variety of os's out there that can run completely from RAM only.
The Linux kernel can be configured to run completely from within RAM.  This isn't really all that useful for general-purpose computing (where the device won't know what you're going to throw at it), but if you know your specific memory bounds for a given application, you can configure and run it this way.  You won't have any swap, and you're going to have to use something to load the kernel in the first place with whatever app code you want to run, but it can be done (although of course in a real-world scenario, you'll want to at least have some sort of firmware to store the kernel and application data for if/when the device is reinitialized).