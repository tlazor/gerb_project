For example lets say that almost all of your entities behave really similarly and the constructor of your object only needs to take maybe 5-6 parameters to create a new type of enemy. In this situation the approach of not loading the data from an external source would be fine. Even if all of those functions that set up these entities, were in there own class called EntityFactory or something, this should be fine.
Another issue is scalability and maintainability. You make 100 entities in your game, well that's 100-200 configuration lines, not pleasant but you've been making your game for enough time by now to not mind the extra work in actually locating the line you want to change. But now you add a few levels and start making really minor changes to those entities. Well... Making multiple changes is going to be difficult. It's different when you have a 100 lines and know which one you need to find, but when actually balancing something you need to change 4-5 values in entirely different lines this becomes a pain, fast. Now just think about releasing an expansion. Now you have 2 configuration classes (3, 4?).
One issue with this approach however is usability. Now you not only have to change the configuration class every time you want to change anything about any entity, but you also have to recompile your game when you do so.
I want to hear from someone with experience, since I'm new at this, what are the pros/cons of each, and is there a "best way", for simple single player games?
As far as file format goes, I cannot recommend XML for this task. I always recommend to start with the simplest format possible, and proceed to move to different libraries in order of lowest complexity and forward, as there becomes a requirement for that feature. For example when I first start out I tend to save everything in CSVs. If I realize that I'm going to need to express some kind of relationship or inheritance or something, I switch to JSON or write my own parser for the task.
2: isolate the encryption and add it in the final build step on the build server and you do NOT Have to deal with encryption during debugging. Slim, easy to extend. Easy to handle translations. I would likely call it standard as this is the way I have seen this handled for great many smaller games (i.e. non MMORPG style games).
In this case I would not recommend that you do this. Basically you have the data (the files that you need to import variables from) and you have the model (the place where that data is actually maintained to be used by the entities). What you're suggesting essentially can be paraphrased to "Forget the data driven approach altogether, and configure each entity model in code". There's a few issues with this approach, although I would never say it's wrong to do in every case.
Hands down I love #1 the most, but I wonder if it will affect performance. I hate #2 because it requires a lot more work to organize everything, plus I have to do encryption and remove said encryption when debugging. #3 works fine but feels... unprofessional or sloppy.
1: TOTAL overhead. Like driving a 40 ton truck to your weekly shopping for you and your spouse. Adds a lot of memory eating high end functionality into what is essentially a configuration file. If you consider that the best fit to store some small amount of data - you really need a reality check. Or have thousands of weapons.
I'm working on a game (single player, metroidvania type, Java) and I'm torn as to how data should be stored. For example, monster stats, dialogues, flavor text for weapons, gear stats... there is all kinds of fixed data that needs to be loaded. 