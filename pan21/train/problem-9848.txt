UDP and ICMP are easiest to fake, but TCP is also possible.  It requires an insecure remote OS, which uses predictable sequence numbers to exploit.  Sometimes it's the load balancing machines that alter sequence numbers and make them predictable.  So, TCP is possible -- but harder.
UDP is the main part of why this is easy - in fact, Skype and Slingbox exploit the ability to forge IP addresses easily in UDP to 'punch' through NAT and allow for easy peer-to-peer.  
TCP is harder since it requires a full SYN/ACK cycle, but you could still flood the server with hanging SYN packets which go to IP addresses many-hops away and essentially tie up a huge number of routers in the process.
If I fake a few addresses here and there, it costs my ISP nothing.  If every user of my ISP faked one packet between 1:00 and 2:00, it would still be hardly a blip on the radar.  However, when a botnet sends many spoofed packets from many hosts on many ISPs, the target machine or network falls over.
My ISP damned well knows that I am on a specific address, or at least the subnet I'm on.  Yet I can use any source address.  Why is that?  Simply, cost.
You may want to introduce a slightly more sophisticated scheme where you block, but only for a period, like a year. If your network is capable of bandwidth throttling or connection limiting, you might also consider a scheme where douche bags who run Apache Benchmarks on your site just get put in a cage with very limited bandwidth. 
The financial reality is that unless you are the one attacked, spoofing costs nothing.  It costs money to implement filtering near the customer, and the one spending the money realizes very little return other than knowing they are good network citizens.
The GOOG article was explicitly discussing DNS. DNS uses both UDP and TCP packets. The UDP ones can be forged, but not the TCP. TCP requires a 3 way handshake. If the IP address for a TCP packet is forged then the forging computer will not receive the response and the connection will fail. UDP, as mentioned in other answers, is 'fire and forget' and requires no response communication. DoS attacks come almost exclusively in the form of UDP packets for this reason. 
DNS anti-spoofing focuses mostly on the security side of preventing someone from submitting a false answer to a recursive resolver.  The flooding aspects of UDP are not DNS specific other than a single small query (say, for '.') will cause a rather large response.  Thus, it makes a nice amplification vector.  There are many other UDP protocols out there that work, but DNS is in use everywhere, and it's easy to find machines to use to amplify attacks.
For ISPs running DSL etc services, each virtual line should be configured with ip verify unicast reverse-path (or whatever the non-Cisco equivalent is) which blocks any packet whose source IP address isn't in the ranges known to be routed down that line.
In the context of Stack Overflow and family sites, the issue raised by Takaun Daikon is very valid. There are many ways to get a new IP address from one's ISP. Changing a MAC address is clearly the easiest and works for many ISPs. In addition, many folks who are up to silliness may be using a public proxy or TOR. Clearly blocking the origination IP for those packets would just block the proxy or TOR termination node. 
So is blocking IP addresses valid? Hell yes it is. But you will end up with errors. You will block some IPs which really are not the source of the problem (i.e proxies) and you will also have people avoiding your blocks by changing IPs. The person who is unlucky enough to get the banned IP later will not be able to access the SO family of sites. But the error rate should be small. Unless you are blocking huge sets of IPs. But if you are blocking one or two a day, you should be fine. 