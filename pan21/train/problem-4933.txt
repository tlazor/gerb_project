This is done as part of the HTTP request by adding a Host: header. The browser uses the name you give in the address bar to fill in this header during the request, but strictly speaking this has nothing to do with DNS. 
So the Internet works fine, and you can even access web sites without DNS, even if you don't have names in your hosts file, as long as you know the IP address. 
HTTP clients ordinarily use DNS forward queries when make connections, but not necessarily, because such thing as HTTP proxy is possible. It delegates resolving server name to the proxy (that can, in turn, query another proxy. etc.). Ī once read (although didn’t see) that ancient LAN protocols allowed browsers to operate without TCP at all.
System administrators often choose to block DNS at the firewall to force all clients inside the organization to use a local DNS server.  This helps control the risk of DNS cache poisoning attacks.
default settings for nsswitch will look up /etc/hosts (files) first then try dns. So if the host is listed in /etc/hosts and you block port 53 udp/tcp then it will still get the correct ip and work. If the host is not in /etc/hosts you will not get an IP
One other way that browsing by IP can be problematic is on HTTPS sites because the certificates are issued to certain host names. This won't prevent them from working, but the certificate can't be verified by the browser since the name doesn't match and you'll get a warning. 
Strictly speaking, the hostname resolution process is out of scope of the HTTP specification.  In practice, though, it is nearly always done using DNS over UDP port 53.
Something to keep in mind with regard to HTTP is that all of the communication between the browser and web server takes place over TCP, which uses IP addresses. The name resolution as you said happens first, because without the IP address, no communication can take place. 
Now, to contradict what I just said a little bit, since your question is specifically about HTTP, the truth is that some web sites will not work if you try to access them directly by IP address. 
This could be for many reasons but one of the most common is that the web server actually hosts many different websites on a single IP, and then differentiates requests to those sites based on the requested host name. 
Moreover, if an application calls gethostbyname() or similar, then it might result in an outbound packet, but not necessarily, because it is a question of DNS implementation in particular operating system and its setup. One of situations where gethostbyname() doesn’t result in an outbound traffic is locally-operated (127.0.0.1) DNS server that, for some reason, already cached all DNS records required.