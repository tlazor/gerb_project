Let's say there are 100 NPC characters in a game which will have different animations running at any time.If we are maintaining the state in Sprite class, we usually create 100 sprites and draw it as each sprite has its own state.
Assuming this, it really isn't going to help you much (concerning memory usage) to have the NPC and the Sprite class separated. Although I think separating the two can still be a good idea if you look at it the following way:
You are correct. We do the same type of thing in our engine. There is a sprite object that can organize your images into pages (texture file) and groups. A group has frames of animation taken from the texture from a grid or if you want to pack more data into the optimal space, you can specify the sprite via a rect. There is an entity object which is made from a sprite group and they exist as instances in the game world having position and size. This allows for efficient management of objects for your game. Multiple entities can efficiently use the one sprite object.
For me I feel separating the "state" kills encapsulation.But at the same time it will have a benefit in terms of huge memory!
             Imagine, position and animation state is separated from the Sprite class.When ever we want to draw we will just set it and draw the frame at certain position.With this approach there is no need to have 100 sprite  instances.We can make the exact above situation with one single sprite instance.
Usually a sprite contains current position, current frame number to be displayed in the running animation, etc... This is what I mean is STATE.
I assume all your classes use a pointer to the sprite-sheet/texture, so that the actual sprite-bitmap-data takes up memory space just once.