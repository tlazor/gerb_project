A new CRM solution is a lot of work in training folks and you'll never end up with a system that exactly suits your business requirements.
You've mentioned RAM and processors, but not disks.  I admit it's been almost a decade since I've dealt with MS's SQL Server, but it's bound to the disks just as much as any other database, if it can't fit everything in memory.
You've got a numbber of suggestions stating primary keys and indexing should be thoroughly reviewed.  Access also really likes using a SQL Server TimeStamp aka RowVersion column on each table as this reduces a lot of time that Access spends deciding if a record has been changed when it comes to updating the records.
After that, I'd worry about database level tuning, but with that, you're going to need to define your tests and an optimization goal so that you don't break things or make queries worse.  Although you said that the primary keys didn't show much advantage in your test database, you should look at your testing methodology -- primary keys can allow some databases  (not sure if MS SQL is one of 'em) to use record level locking, rather than table level locks, which can reduce contention that might not be shown in testing with only a few users.
I'd find a good Access person who is also very knowledgable on SQL Server and get them to spend 3 or 6 months in normalzing the tables and fixing up user pain points.  Ensure that person works on the saem floors as your users, although in a quiet space, and is accessible.  Although not too accessible.  Developers don't like interruptions.   S
I'd probably first try to the fill the machine with as much RAM as it can take -- then I'd make sure the logs are being written to disks that are not being used for tables or indexes.  I'd then try to make sure that no tables have their indexes on the same spindle.
Before spending a lot of money or time, take a couple hours and add indexes (or primary keys if you can) to any tables involved in those joins ... particularly for columns used in a where clause.  You could easily improve the performance by a factor of 10 in just a few hours.
tables with tens of thousands of rows with no primary key or index, which are also used heavily in multi-table joins