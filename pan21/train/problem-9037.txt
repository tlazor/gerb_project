There is a built-in feature, look into the "Recovery" tab when you click the properties of the service in services.msc. You can "Run a Program" if the service fails, this program can be a script to send an email for example.
Since you mentioned interest in a 3rd party utility, our (free) monitoring software EventSentry Light should be able to fulfill all of your requirements - with one piece of free software:
If you've got more of a *nix background, you might find it simpler to use SNMP to monitor and control services, though the native option is WMI (Windows Management Instrumentation), and the command-line WMIC (Windows Management Instrumentation Command), which is very powerful once you get the hang of using it.
 - An awareness of manual intervention, such that the tool will not interfere with manual actions. e.g. Ability to stop and start services interactively via the same tool that does the monitoring, and/or ability to notify the tool that manual intervention is taking place.
These seems like fairly basic requirements, but I have not found any easy way to satisfy them with built-in Windows features, or simple and affordable third-party tools. Surely this must be a solved problem?! I expected to immediately find some open source tool to do just this.
There are also dozens of network monitoring solutions which can monitor windows services, Nagios, PRTG, OpenNMS to name a few.
The advantage of the application scheduler is that it can capture the output from command-line processes in the event log, so if the service restart didn't work (for whatever reason), then you can instantly get a notification with the entire command line output.
RobM's and HopelessN00b's suggestions are good if you want to stick with Windows tools (except for emailing with blat.exe which is actually a great command-line smtp emails).
A little bit of logic in your scripting language of choice and you can send out email alerts when a specific service isn't running, start, stop or restart services on a schedule, and meet all your other requirements.  Best of all, it's native, and the only tool you need is a windows CLI (cmd and Powershell both work) and a very small amount of scripting skill.
We have about a dozen Windows Services, both in-house developed and third-party products, and have the following requirements for managing them:
As suggested by @RobM you can provide basic monitoring and recovery functionality through the service properties tab, though in my experience this tends to not scale well across a large number of servers or services and is more limited than I'd like.  If your needs are beyond this basic tool, you can license any number of monitoring suites, or if cost is a factor, roll your own monitoring scripts fairly simply.