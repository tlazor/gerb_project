If you don't want to do that, but you can still render 2d shapes with custom texture coordinates and shaders, here's an idea (although a little complicated):
You didn't specify what 2d means exactly in your situation. If you're doing 2d in a 3d engine, you could just render the planet with an ortographic projection.
What if I then wanted to add the moon orbiting the Earth? A second sprite sheet for the moon's positions, with blank frames where it should be hidden behind the Earth?
Frankly the best way to avoid using the frames method is make your game in OpenGL or DirectX and simply import the planet models straight from 3ds Max and just have them sit in the background, but if you have no experience at all in 3D graphics API's then you're pretty much stuck with animating loads of frames.
Well, you could render the entire earth, and then draw it rotated to a clip rectangle if you wanted a smooth animation with more flexibility. And, you could do the same for a moon and then use sin/cos to make an arcing path around the earth. There's a few other things you could do like separating the land from the water on the earth and animate those separately. It depends on how you want it to look and how much memory you want your textures to take up. 
So long as your staying in 2d, tons of frames is pretty much the only reliable option, you could try to use a video codec in your program, but I've seen that's usually way more trouble than its worth if you want to do it for free.
I've modeled a photorealistic scene of the Earth rotating in 3DS Max and would like to use it as a backdrop of a menu screen in a 2D game. What would be the appropriate way to implement this effect in-game, a sprite sheet? That seems like it would require a whole mess of frames to appear convincing. Does that matter?