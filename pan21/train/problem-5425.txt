I'm not really comparing before and after. Without seeing the data that comes in that's a bit hard. Instead I'll focus on the new code.
First, install perltidy and run it against your code until you get used to looking at well formatted code and type it that way.
Checking request authorization is combines the lookup when you set fromreferer and the spot where you check it to maybe return an error message.
Besides these points, the code is fine. If you pick better names and add some comments as to why things are done, I would like it a lot more though. 
In general, a lot of your variables could benefit from clearer naming. If you use more than one word for a name, which is good, use underscores _ to separate them, like $on_first_name_app. You've already done this in a couple of places. Being consistent is important to make code more readable.
Putting a bunch of related (or not) variables into a hash doesn't really do much except add syntax to access or mutate the values.
The tricky one is, of course, run_app_or_redirect().  I'm not going to work that all out for you.  You should be able to do that yourself and probably better than I can since you know the problem domain.  Just break the code into sections.  First decide which thing you are going to do, and then collect the information needed to do it.  You may even wish to make the main sub look like:
Well, 404 with the form data (whatever that is) is your fallback case.  If you have a user_id then you redirect, run code if you have it, or 404.  And you 401 if you your referrer data looks fishy.
Finally, when you refactor code, always work with unit tests to be on the safe side. Look at Plack::Test if you haven't to build some tests for this. You can also use a combination of Test::WWW::Mechanize and LWP::Protocol::PSGI if you feel more comfortable with having a $mech object in your tests.
There are also quite a few typos in your variable names and comments. When you fix those, make sure not to fix the typos in the URLs as those have been there before, and you have to retain existing behavior when you refactor code.
Second, names are really, really important.  Names for functions and variables should be readable (use camel case or snake case to break up long names, but be consistent) and descriptive.  Make sure the names are spelled correctly.  Don't use names like greater_than_ten.  The rule may change and you start caring about URLs with more than 12 or 8 digits.  Instead name it for the meaning.  Maybe something $url_with_token
You have logic and effects all mixed up and spread out.  Instead of setting a variable at line 10 and then maybe resetting at line 30 so that you can use it at line 90, (line numbers are hypothetical here), either do all your input analysis in one place and set up a packet of info you need later, OR analyze your data and take action on within a few lines.
When you write comments, try to explain the business logic decisions. The code already clearly shows that a value is assigned an empty string because it's used as a string later. But some of deeply nested decisions where the redirect is issued would really benefit from explaining why this happens.