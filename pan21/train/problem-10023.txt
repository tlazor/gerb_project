It can prevent against SSH brute force attacks. Every unix has a 'root' account. However it's not clear from the outside what your 'sudo' username would be. Hence if someone wants to try to brute force their way in, they know there's a root account and will probably try it. However they don't know where to start if you're using sudo.
You should always use accounts with the lowest level of privilege possible. Running as root all of the time encourages bad habits and laziness that will make life unpleasant when you are working with multiple users or expose something to a public/semi-public network.
Another argument in favor of multiple user accounts is to run different softwares under different users. Doing this, if a security flaw is exploited in one application, the exploiter can only access files and resources accessible to its running user.
One last point for not using root : resource consumption. Root has no limit on how much memory, processing time, file handlers or disk space he can use. On a lot of filesystems, there are data blocks which are reserved only to root. So a normal user can never use them to fill your disk. ulimit command can also be used to restrict the memory and file handler number a user can consume. But if you are root (or an application running as root), nothing prevent you to change this limit.
Also keep in mind that password cracking is only one compromise scenario -- and isn't the most common scenario either. You're more likely to fall victim to a browser vulnerability, or a vulnerability in some daemon thats running on your system.
Even if I don't trust in "security by obscurity", there is surely an advantage to use a custom login instead of the ever-existing root login. You can thus also configure SSH to prevent root logging in.
As other said too, root can do everything without any confirmation. So using an unprivileged user can prevent stupid mistake and typos.
Think about code that you use without thinking. For example, the Linux port of Adobe Flash, which is a steaming pile of poop that has only become usable in the relatively recent past. How secure do you think that code is? Do you want that to be able to exert full control of your system?