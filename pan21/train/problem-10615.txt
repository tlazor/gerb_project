The reason you're hitting it is that a large fraction of requests are either slow, or crashing. If you can figure out what request is causing this issue.
Monitor the memory usage (try top(1) or vmstat(8)). When you see a surge, you need to look at the process and determine why it doesn't free the memory. Maybe there is a script running or something. Or you have a huge query.
You're almost certainly running out of memory.  Often apache will hit maxclients when you start to swap because the existing children are tied up waiting for disk i/o so it will spawn new children to handle new requests, which will then hang waiting for disk i/o, rinse, cycle, repeat until maxclients is reached.
Just a note, not sure what you're doing with mod_python, but if its django (or even if not really) you should take a look at mod_wsgi.  It tends to be a more efficient memory usage model.
If it returns any output, it means your system ran out of memory and Linux had to kill a few processes. If that's the case, review your processes RSS memory usage and try to stop unnecessary jobs. Maybe you can also add more swap space - although this is not a good idea if this is a virtualized host (VPS).
Mostly likely you need to go through your mysql and apache configs and trim them to use less memory.  You'll also need to take a look at whatever code you're running in mod_python and see if its being a hog.  As Yves mentioned eyballing the RSS column in a "top" while browsing your site will help show you approximately how much memory each apache child is taking up.  I've seen 20 - 50mb in mod_python scenarios before, so if I didn't want apache to use more than 1.5GB I'd limit my maxclients to around 40.  MySQL similarly can be configured to only use a certain amount of ram, but that gets too complicated to explain here.
Check your mysql logs whether it ran out of connections. Bugzilla had this issue that it would eat up connections until the whole site crashed.
One thing I tend to disagree with is expanding your swap.  Swap is sooo much slower than regular ram that it almost always triggers a runaway or pile-up scenario that takes you down just as badly as OOM would.  Might as well get the machine back to a log-in-able state quickly so you can work on the real solution.