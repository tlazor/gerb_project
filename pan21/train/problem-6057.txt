However, it has no implication for code signed by certificates that were not signed by the compromised root.
First, the Apple code signing root is not related to the compromised root (DigiNotar), so to your first question, there is no direct impact on iOS code signing from this. This cert is in the iOS root store, so it could impact applications, including Safari or anyone who uses the built-in URL loading system or the root keystone.
There are only two ways in general to handle a key compromise in X.509: wait for the certificate to expire or revoke it. Most root certificates have fairly long validity ranges (often decades). Lower-level certificates have shorter ranges (months or years).
Keep in mind that Mac and Windows and Unix etc existed for many years without code signing. Most modern OSes have some kind of code signing, but it isn't used very extensively (often only at package install). When it fails, users generally ignore it. The iOS scheme is a big step forward, but you can muddle along without it.
Just because the root certificates are compromised doesn't by itself mean that malicious code would suddenly run on everyone's devices (or anyone's devices). Compromising a certificate is just one piece of a more complicated attack. But it'd be a useful piece.
Revoking a certificate means that the software (iOS in this case) needs to check a revocation list and reject certificates on it. That would break every piece of software out there until they were all resigned and reinstalled.
If the Apple code signing key (or one of the major intermediaries) were compromised then that could be catastrophic to the code signing system in theory. In practice, the attacker would also need to masquerade as the Apple update server, which is a different problem. But if you put these two things together, yes, they could push anything they wanted in theory.
If you have installed signed code based on being signed by a X.509 certificate signed by a bogus root, it might have been bogus code. And it might have done some unpleasant thing or another on your system. 
Code signing does not ensure that code is benign. There are several malicious things I could do that would be almost impossible for Apple to detect before approving the app. And just because they have a credit card on file doesn't mean Apple really knows who submitted the app.
So code signing is an important security measure, but it isn't the only security measure. As you suggest, the keys are very important, but they're just one part of the system.
Because Apple controls the app store and iOS, there are actually some other options at their disposal. They could patch iOS to do a one-time verification of every piece of software against the hashes at the app store, and then apply a new signature. When you control all the parts of the system, it's easier to determine trust.