A vec2 is handy because you have absolutely no need to store the third component most of time.  It's only needed when actually doing affine transformations.  You can even have different mul_point and mul_vector operations with your mat3x3 to avoid the need to even construct a vec3 in a great many cases.  In 3D, we typically use vec3 everywhere on then occasionally use it to construct an appropriate vec4 where necessary, which is fairly rare.
For matrices, the same applies.  You have to deal with non-affine transformations all the time.  There's no good reason to use a mat3x3 where a mat2x2 will work.  Again, same in 3D, where there are plenty of places that don't bother with a full mat4x4.  It's a bit more useful in 3D since rotations are considerably more complex and you end up wanting to work with matrices for them more often than you might in 2D, but you still end up using them.  It's not always convenient or efficient to use a scalar rotation value in 2D given that it requires sin/cos/tan calls in places that a matrix would not.  You'll likely find that you often take your scalar rotation and convert it to a 2x2 matrix for computation of rotations where there simply is no need for translation.