The easier solution may be to step a few pixels back and aside in a random direction. Not only will this typically solve your problem, but the unpredictability of the behavior is harder for the human player to counter or exploit.
What you want to do in your game is define a grid of possible locations for the AI player and have the player come up as an area of really high resistance. The algorithm will try to find the shortest route between it and the ball. If a player is in between, it tries to find the shortest route to the ball around the obstruction.
Using the human player as the origin draw a line in this new direction (either the same length as the original line or some minimum?)
I tried few ideas but it proved not easy to do it when both the human player and the ball are constantly moving so at each step computer would change directions and “oscillate” again. Once when the computer player reaches the ball it will kick it with certain amount of random strength and direction towards the human’s goal.
At the moment the game logic of the computer player is that if it hits into the human player will step back few points on the pixel greed and then try again to go towards the ball. The problem is if the human player is in-between then the computer player will oscillate in one place, which does not look very nice and the human opponent can use this weakness to control the game.  You can see this in the photo – at the moment the computer will go along the red line indefinitely.
The question here is how to formulate the logic of going around the ever moving human opponent and how to translate it into the co-ordinate system and frame by frame animation… any suggestions welcome.
I have finished a simple 2D one-on-one indoor football Android game. The thing that it seemed so simple to me, a human being, turned out to be difficult for a computer: how to go around the opponent …