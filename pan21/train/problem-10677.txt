I don't have any experience with XNA/C# though, so I'm not sure how complicated that might be for you.
The issue here is that at < 60 FPS, the "intermediate" velocity is lost and therefore the character jumps lower.  At > 60 FPS, the game adds more "intermediate" velocities, and therefore the character jumps higher.
For the audio lag problem: you said all is ok if frame rate is 60 FPS. Well, if you use semi fixed timesteps the update logic loop will be called enough times to maintain a constant 60 updates per second, only will lag in very old hardware or when something else is sucking system resources. Also note that you can have 60 screen refreshes and 120 logic loop updates, for shooters I think is not bad solution.
At first I thought to just loop and play more gunshots per frame, but I found that this can cause audio clipping or make the bullets fire in "clumps."
I don't know about XNA specific but as I understand your scenario, you have two options for the jumping problem (that will probably appear again in other situations later, ie misdetected collisions that allow wall trespassing): 1- You must measure the delta time between frames and multiply each acceleration/velocity vectors using that delta as factor. 2- Fix your timesteps. You do this by not allow other than a fixed, previously choosen, delta. Depending on the time spend rendering each frame, you will call your logic update loop one time or more for each screen update, but each iteration is guaranteed to represent the same delta. Maybe this link can help you: http://gafferongames.com/game-physics/fix-your-timestep/ (pay attention to key concepts: "your renderer produces time, and your simulation consumes it", and "spiral of death" that is important when resuming from a pause for example. Ignore C++ specifics and concentrate in the concepts).
If with "lag" you did mean latency (sounds delay): assuming your playSound function does not block, that's ok, but the code that look for the audio resource to play should block and run in the same thread that your game logic, game logic must stop until the sound resource is found (if you have some kind of audio resource manager for example). Otherwise you will notice that in some situations the sounds are not correctly synchronized with what happening in the rendered scene.
Now, obviously, the frequency of playGunShot depends on the framerate.  I can easily fix the issue if the FPS is higher than 60 FPS by capping the shooting rate of the gun, but what if the FPS is less than 60?
I like 2, because it simplifies logic planning and assumptions made for physic simulation as it lets you use constant values and the game will still adapt to different machines and produce the same results. In the worst case, the game will lag (ie: in old hardware), but still things like wall trespassing won't occur.