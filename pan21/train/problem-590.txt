Well, finding 3+ is easy if you realize that regardless of their respective positions to each other, at least one of them will always have at least two neighbors.  Once you've found a location in the grid that is part of a triplet, use a floodfill algorithm to locate the entire cluster.
I'd suggest that the list contains only the markers that detect that they are part of a cluster (i.e. only the tokens that have 2+ identical neighbors) and then working from that list removing duplicates (any token that has a matching neighbor that is also in the list can be removed, and for every removed token, all of its neighbors can also be removed).  This will produce a list that contains 1 entry for each cluster (or very close to it).
Although if you're interested in having the whole cluster represented, then do the reverse, for each token, add all of its matching neighbors, rather than removing.
You'd not be altering your map, but the basic process would be similar: for each token perform the action on every neighboring token, skipping completed locations and non-matching tokens.
You won't be able to assign this to a "dedicated variable" but you can store the result into a list, then return the list.