Having done all the right things - picked an appropriate shard key, scaled horizontally, distributed my data across several shards, I find I now have no real way to determine how well balanced the data is in terms of document counts, and data size.  The sh.status() command will tell me how chunks are distributed in terms of counts, but not what makes up those chunks.  
So, how do I determine the distribution of documents in each chunk, the relative sizes of each chunk and (of course) where those chunks currently reside? 
It's pretty basic at the moment, but it does the job.  I have also added it on github and may expand it further there.  For now though, it will do what is needed.  On the test data set described at the start, the output looks like this (some data removed for brevity):
That is a pretty good command I use often for stuff like this. It will show you total chunks, average chunk size, document counts, all on a per shard basis. It doesn't give you the data for each chunk like the answer above, but this is pretty quick and gives a good overview of what you're looking for.
While the estimate:true version is not free (it uses counts and average object sizes), it is at least reasonable to run even on a large data set.  The estimate version can also be a little off if object size is skewed on some shards and hence the average size is not representative (this is generally pretty rare).
There is currently no built-in way to do this, so a small function is needed.  For the purposes of this answer I have created a 2 shard cluster with ~1 million documents as per these instructions.  Next up I used this function to examine those documents:
There are plenty of ways to infer these things - but they all have a downside.  The vagaries of how database size are calculated means that if there have been significant deletes in a database, the stats may not be an accurate reflection of data distribution.  If I look at traffic hitting each shard, that might give me some clue, but only if my traffic is nice and predictable.
The first argument is the namespace to examine (a string), and the second (a boolean) is whether or not to use the estimate option or not.  For any production environment it is recommended to use estimate:true - if it is not used, the all the data will need to be examined, and that means pulling it into memory, which will be expensive.  