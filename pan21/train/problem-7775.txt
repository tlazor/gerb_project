But remember that if you want to modify this sub-sequence afterwards, your changes won't be propagated to the other copies. You have to modify one of them, then delete the other ones and re-do the copy-paste for every other instances. To be clear, this won't improbe the maintainability of your Kismet script, only the reading of it.
You can't make Kismet function in the sense that it will exists once in memory and can be called from several places at the same time. Every time you want to have the same piece of script, you must duplicate nodes.
However, you can use sub-sequences to clean-up a bit your Kismet canvas. A sub-sequence is a single node into your main sequence, which contains itself several nodes. It can have inputs, outputs and also variables.
In the Unreal Development Kit, when using the Material Editor, one can factorize frequently-used groups of nodes by creating a Material Function (content Browser → right-click → new matrial function, IIRC).
You can see the subsequence in the parent canvas with all the inputs/variables/outputs you created. When you're done, you can copy-paste it as much times as you want to make a copy of the same piece of script, and simply links the corrects input/variables/output to it.
At first, right-click on your Kismet canvas, and create a new sequence (which will actually be a sub-sequence.
If I have many actors that share the same behaviour, then I'll copy-paste these nodes, and change the variables so they point to the other actors.
Finally, it is also possible to export a sub-sequence to a package to use it in different level. However, it won't be editable anymore after that (you can't open a Sequence from the Content Browser with Kismet), and by experience you may have trouble to import it in your kismet scripts if you do this.
This leads to inconsistencies (a modification in the behaviour of an actor isn't propagated in the copy-pasted nodes), complexity (you end up with hundreds of nodes), and generally useless effort.