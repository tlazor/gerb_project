The question I have is very basic, I understand what load balancing is and how it works, however I can't visualize it in practice.
The two application servers should be connected to a single data source.  For this purpose, you can use a clustered database which works pretty well with MariaDB (free, open source and a MySQL folk).
As to database - single database server, separate from application, hosted with reasonable RAM and disk space, can handle a lot of connections and a lot of queries. You would have to start worrying if queries per second would reach thousands. But if you'd reach that point, then solution is, already suggested, db cluster. To build a cluster, you need at least 3 database servers and a load balancer (proxy).
the second option is generally used when using a load balancing device.  That is, there are two application servers and the load balancing device distributes the incoming traffics among the two application servers based on different algorithms.  For example, Round Robin, least requests first, etc.
Lets say I have an AMP application running on a server. One day traffic gets too great and I must start to balance the load and I add another server. I already have all of my data stored on the first one so what would I put on that server? I could copy the website's files but my database would still be on the first server and I would still have to connect to it from my new one, so that doesn't seem like a good solution? I could add a third server and make that a MySQL server and use that to store my data and have my Apache servers connect to that, but that doesn't seem like a good solution either because I would still have all requests getting data from a single place.
First - yes, you copy your entire www directory to other server with installed apache and php exactly the same versions as on first node. If your application uses file storage then best is to to put it on share - NFS or sshfs for example (on separate server). If you would want to put this file storage on both app servers, then you need to synchronise them in real time (not a good solution). NFS created on SAN is in this case the best, because you have protection of SAN etc.