Pressure is then spread up/down/sideways from any tile with a higher pressure to tiles with a lower pressure during each tick, cellular automata style.  I'd have to get an actual simulation up to figure out exactly what to equalize to.  A block's pressure should be equal to its implicit pressure plus the "excess" pressure from around equalized (so you'd only need to store this excess pressure, not the implicit pressure).
I'm unsure how to deal with or whether one even needs to deal with the "air bubbles" that would be created (where a non-surface tile will have non-full water amounts as water is pushed upwards).  I'm also still unsure how'd you'd avoid loops of water pressures being unequal on one side and then after ticking being unequal on the other side, back and forth.
You can add a rule that try to go left or right (through the walls) with the tiles until you find a free spot, starting with the layers on the bottom. If you cannot find, then the tile stays on the current position. If you find, then the another rules will guarantee the replacement of the moved tile (if necessary).
This system works pretty well. I can easily fill up pits of water, which overflow to continue outward. I can fill up U shaped tunnels as you see in the gif above. However, as I said, the system is incomplete and I haven't worked everything out yet. I haven't worked on the flow system in a long time (I decided it wasn't needed for alpha and I'd put it on hold). However, the issues I was dealing with when I put it on hold where:
This roughly simulates the idea that the deeper the water "point" the more pressure it has, albeit the pressure values represent more the height than actual pressure (since higher tiles are expected to have higher "pressure").  This makes the pressure kinda sorta like the h term in the equation (but not really):
You will get loops where the water pressure flows too far one way and then has to correct but since you don't move the whole amount of water per tick these will be damped.  I think it's actually a good thing as you'll get surge effects as water floods into an area like you would in reality.
I know, that's pretty high level. But it's hard to get into more detail without getting way into detail.
If a surface tile has a pressure larger than its implicit height-based pressure would be and if the tile above has free space for water, a small portion of water is moved upward.  Water only flows down if the tile both has room as has lower pressure than expected.
A block generates a pressure equal to it's own weight (how much water is in it) and applies it to the blocks below and beside it.  I see no reason it's position in the world is relevant.
The result is that if the water's pressure is higher than it should be for its depth, it'll be pushed up.  It should mean that water levels in closed systems will equalize pressure across all height levels over time.
Flow cubes pull water from their source by following their flow direction back up until they reach a source cube or a flow cube with no parent. Storing the flow direction in each cube makes following the path to the source as easy as traversing a linked list.
Here's a little gif I made of the pressure mechanics behind an invisible wall (played at high speed):
Note that I've never done this; these are only ideas which may help.  Or might be totally bogus.  I'd been wanting to tackle this problem ever since Terraria but am not currently working on such a game.
On each tick move water from high pressure to low pressure but move only a fraction of the water needed to equalize.  Water can also be pushed up if the pressure in the block is too great for the pressure being applied down on the square.
I created a system similar to the one you're after in 3D. I have a short video demonstrating the simple mechanics of it here and a blog post here.
Now that we know the data, lets look at a high level overview of the algorithm. The basic idea of the system is to prioritize flowing down and out. As I explain in the video, I work from the bottom up. Each layer of water is processed one level at a time in the y axis. The cubes for each level are processed randomly, each cube will attempt to pull water from its source on each iteration.
A way I've considered trying is to give each surface water block (any block with water in it and with no water block above it) an initial pressure value equal to (or a function of) its height from the bottom of the world.  The implicit pressure value of any impassable tile is MAX_PRESSURE (say 255), and for an open air tile is MIN_PRESSURE (0).
Let me explain the data involved, to give an idea of some of the features of the system. In the current system, each block of water contains the following in 2 Bytes: