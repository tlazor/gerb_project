The details of that query aren't important. I just wanted something that wouldn't finish too quickly so I could easily observe the running query in SSMS. Here is the query actually executed according to sp_whoisactive:
It took me a little while but I was able to connect to my local SQL Server through SQL Developer. The issues that you are seeing are probably caused by the driver. The SQL that you are sending to SQL Server may not necessarily be what you expect. Let's suppose I submit the following query through SQL Developer to SQL Server:
The queries are now different. The query run by SQL Server has a local variable. Replacing a hardcoded literal with a local variable in SQL Server can have a dramatic effect on performance. This is mainly because SQL Server will not know the values of the variables before creating a query plan. SQL Server often can create better performing query plans if it has access to more information. The use of local variables (hiding information) can throw off cardinality estimations and lead to a suboptimal plan. This is mentioned as a possible cause in the link provided in the comments.
Okay, so far so good. However, what happens if we use a bind variable in SQL Developer? Let's suppose I submit the following query through SQL Developer to SQL Server with a bind variable value of 10000:
I urge you to troubleshoot performance by observing the query text that is actually executed on SQL Server. Maybe you, or someone else, can access the server through SSMS and you can do side-by-side testing.
The two most straightforward ways to work around this problem are to avoid using local variables (for you this means not using bind variables) or do add a RECOMPILE hint to the query. The RECOMPILE hint allows SQL Server to create a query plan with the real values of the variables at the cost of not being able to use a previously cached plan. If your queries are run thousands or more times a day RECOMPILE could add too much overhead.