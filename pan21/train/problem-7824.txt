It becomes unfeasible with a large number of combinations of parameters to code and maintain for each, although you could code-gen them. Instead, deal with the lesser combinations with dynamic SQL, or static SQL with OPTION RECOMPILE:
With a single stored procedure (SP) you will run into parameter sniffing problems.  RECOMPILE becomes mandatory. Every invocation now has a compilation overhead.  This can mount up since the SP is, almost by definition, very large.  Lots of small SPs are less likely to need OPTION (RECOMILE) individually and the cost of compiling less when it does happen.
Query and quote courtesy of Erland Sommarskog's reference article on the topic, Dynamic Search Conditions.
By coding specifically for the common cases you reduce the overhead of RECOMPILE incurred on the less frequent cases. That said, I confess I'm getting good value from more liberal application of RECOMPILE recently. In the era of more cores & hyper-threading, the recompilation overhead can (but certainly not always!) be preferable to one-size-fits-all execution plans.
I'd like to break things out of the case statements because it doesn't seem proper to duplicate the select piece all over the place but I'm not sure if dynamic sql or many procedures would be better. 
I haven't seen this project's procedure layout before and was wondering if it's ok / what would be better. 
A problem I've had previously with "one file to rule them all" solutions is developer contention.  Since all changes have to be implemented in the one module, the team spends a lot of time merging individuals' updates into the master version.  Of course this will vary with team size and functional volatility.
Your question may be a candidate for closing as "Primarily opinion-based" but yes, I'd follow your proposed pattern, to a point. What I tend toward is identifying the most frequent parameter combinations and coding discrete procedures for them. 
The corner-case query Mark quotes is viable option.  Be careful it does not become so complex that the optimiser hits compilation timeout limits.