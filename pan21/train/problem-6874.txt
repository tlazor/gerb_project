Please, for the love of goodness, don't create your own superclass named Object, be more specific. The lower-case object is already a defined type and this is just confusing.
You can also dynamically create forms, etc. for each business type by instantiating a base Form and then adding boolean fields to it for each tag in my_business.kind.possible_tags. And, of course, you could create sidecar tables for particular business types to store additional, non-boolean fields. E.g.,
This way, you minimize the amount of special code required for different businesses, but retain the ability to add extra information where necessary. All of this together avoids your need for the stacked if/else statements and the large quantities of hard-coded strings in your views and templates, and allows you to configure everything using data rather than code.
Anyway, back to reviewing your actual code. Since all your tags are simple boolean fields, it would have been much cleaner to keep these categories in their own table, create a many-to-many mapping, and simply do existence checks into your database. To make the types of businesses easily editable and addable, you could create a type system in your database itself, creating a kind of "virtual" inheritance system.
The multi-language name and category approach isn't scalable. I needed a similar solution recently, and what I tried was something like the following:
You can then keep a language for each user, and when you want to look up the name, just do category.name(request.user.language). You can thus easily add new languages and tweak translations in the future just by altering the database.
You still have access to all the same information, but it's all configurable through the database rather than through your code. E.g., to get a restaurant and check if it has an Italian kitchen,