This problem is indeed complete for the class of polynomial time Turing machines with access to an NP oracle with log many queries (also known as $\Theta_2^p$).  The result appears in a 2000 FST TCS paper by Spakowski and Vogel titled "$\Theta_2^p$-Completeness: A Classical Approach for New Results."  The proof presented there and a proof that I arrived at independently both rely on the $\Theta_2^p$-completeness criterion of Wagner ("Bounded Query Classes" SIAM Journal on Computing archive Volume 19 Issue 5, Oct. 1990).
This seems like a fairly natural question to ask, and yet I have been unable to find a complexity class for which this problem is complete.  Does anyone know of such?  As a starting point, it is readily seen that the problem is NP-hard and contained in P with access to an NP oracle with log many queries.
While the referenced result of Krentel proves the many-one completeness of the problem in ${\mathsf{P}}^{\mathsf{NP}[O(\log n])]}$, the above reduction only shows Turing-completeness, since in the binary search we have to call the oracle several ($\log n$) times. 
Question:  Is the size of the max independent set of G1 at least as large as the size of the max independent set of G2?
Apply the above to  the graph complements to  determine the exact size of the max clique in $G_2$, rather than the independent set. Having determined the size of the max clique, we can decide whether it is divisible by a given number $k$. Then we can invoke the result that deciding whether the max clique size of a graph is divisible by a given number is complete for ${\mathsf{P}}^{\mathsf{NP}[O(\log n])]}$ (see Krentel, "The complexity of optimization problems," J. of Computer and System Sciences, 36(1988/3), pp. 490â€“509, Theorem 3.5)
I seems, your problem is Turing-complete for the class ${\mathsf{P}}^{\mathsf{NP}[O(\log n])]}$. As mentioned in the question, you already know that it falls in this class. To show Turing-completeness,  one can notice that taking an independent set of size $l$ for $G_1$ allows us to determine (using the task as an oracle) whether the max independent set in $G_2$ is $\leq l$. Repeating this with binary search for $1\leq l \leq n$, we can determine the $exact$ size of the max independent set in $G_2$. 