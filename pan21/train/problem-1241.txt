There's a variant of this procedure, too. Recent versions of Shim and MokManager enable you to register a binary's hash as a way to authenticate it. This works even with unsigned binaries. Thus, you could register your kernel's hash to enable it to boot. The trouble with this is that you'll need to register the hash of every unsigned kernel you want to launch. This may not be a big deal if you've got just the one working kernel and you don't plan to update it; but if you update the kernel every couple of weeks, you'll be forever registering new hashes, which will both be a hassle and consume increasing amounts of limited NVRAM space. Thus, this approach is a bit easier in some cases but is much worse in others.
I realize you've found a solution that involves disabling Secure Boot via Shim/mokutil; however, there is another way: You can sign the kernel yourself.
This procedure is covered in more detail on this page of mine. It's tedious, and may not be worth the effort compared to disabling Secure Boot -- but then again, maybe it is. You'll have to make the judgment call of whether you want to jump through these hoops to keep booting with Secure Boot active.
Note also that if you install rEFInd, it may generate a set of Secure Boot keys and store them as /etc/refind.d/keys/refind_local.*. (The refind-install script does this if the necessary utilities are available, but won't do so if they aren't available.) Thus, if you've ever installed rEFInd, step #1 may already be done. You can then use the local rEFInd key to sign your kernel.