Taking inertia and the forces into account, the engine moves the objects around. The output of the physics engine is simply the new state of "the world", which the game can then read out and modify as necessary.
What's the difference? Even if there is nothing else in the world, the object is unlikely to move in quite the same way, because the physics engine will handle things like realistic acceleration. But it is also possible that other forces might be acting on the object at the same time, as might inertia, and the engine will take all of them into account. For example, if you apply a northward force on the object, but something else is applying a westward force (or the object was already moving westward and nothing is slowing that down), then the engine will move the object northwest.
In practice, physics engines are not necessarily so "pure". Objects need to be created and destroyed, and sometimes they need to be moved around in ways that the physics engine's laws would not allow. This can sometimes be done outside of the engine, but sometimes it's done inside, and to do that, the engine needs more inputs. But the three inputs stated above cover the basics.
For example, let's say that you needed to move a character in a game using a joystick. If you aren't using a physics engine, this is pretty straightforward: when you see that the user is moving the joystick, you move the object accordingly. With a physics engine, you don't move the object directly: you apply a force to it, corresponding to the direction you want the object to go, and let the engine handle actually moving it.
That's what a physics engine gets you: It keeps track of objects, their positions and velocities, and the forces acting on them. Thanks to the laws of mechanics, it can even create some forces on its own, to automatically handle things like collisions, friction, and gravity, all without you, the game developer, having to do anything extra.
A physics engine is responsible for simulating the motion of objects in "the world" (whatever that means in the context of the engine). Most physics engines nowadays use Newtonian mechanics to do this, as they are relatively simple to simulate and "accurate enough" for most purposes unless you're doing a space sim.