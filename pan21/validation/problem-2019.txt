By making the Move a container, and breaking the pieces down into smaller elements you will find it easier to reuse them.
However, it is unclear if you want to make the logical break on implementing distinct moves as a 'Move' with subclasses. You may find it more useful to think about the content (animations, sounds, particle effects), effects(buffs, debuffs), actions(damage) as the actual abstract objects, and the 'Move' as simply a container of animations, effects and actions performed when 'Invoke' is called. Trying to create a unique subclassed Move for every move available is going to be be brittle and will lead to you having to rework your hierarchy often. Instead I would consider a Move as having a bunch of different objects inside it, perhaps scheduled in steps, with timers. The values for the different actions, effects and content (like range of heals, time of a buff) would be provided as parameters, not hard coded in derived classes, when possible. It would make sense that a lot of this data come from a text, json, excel or xml file. I would further suggest that you should be able to define these objects as code, created on demand from the text file. Then you may plug them together in different combinations simply using the text system so you can mix and match them. 
I see no other solution that having distinct 'moves' that are implemented in some mechanism that allows the 'owner' to invoke them without really knowing what those moves are. 