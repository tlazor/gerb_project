Notice how my version is easier to see what code is in what scope and executes when because you don't have to figure out what closing parenthesis and brace goes with which opening parenthesis and brace.
I like that you are setting the row size and column size in the ctor, which has a flavor of Dependency Injection and an extensible design; you can change those values to 10 and 10, and solve the more generic N-Queens problem very simply.  The problem is that you hard-code the values in without giving the caller a chance to say which version they want solved; you should make these parameters for the caller to specify.  Because the 8-Queens problem is the most common variant of the N-Queens, these parameters could be optional, which would let the caller solve the 8-Queens problem by creating:
First, your indentation is a little crazy, which makes it very difficult to see which code is in which scope.  Consider:
Using std::endl will flush the IO buffer, which ensures every character is printed before it lets you continue, and is a very expensive operation.  You should just use \n (or System.Environment.NewLine if you are using Visual C++), and only flush the buffer at the end of the method, if necessary.
Overall, your naming is pretty good.  print_solutions is an excellent name, but T, t, r, and c in main aren't so good.  I assume the r and c stand for row and column?  Why not name them that directly?