There's more to work on, but I think this provides some good places to start. A final note -- some of your code makes me think that you're working from an old version of C++ (e.g. you passed filename.c_str() to the ifstream constructor, you're not using range-based for loops). C++11 (released in 2011) improved the language significantly. Most compilers should support it by now. If you're using g++ or clang++ and they don't seem to support C++11 features, you can try passing -std=c++11 to the compiler.
There's a number of improvements here. First, as mentioned before, the rest of the functions don't have to know how to parse the file. Second, we're using istream's built-in parsing instead of calling out to atoi. We're not really doing much error checking here (but then again, neither were you). I'd say that the file format isn't very helpful here. If the first line of the file gave the total number of student records, you could throw an exception if file.fail() returned true after reading that number of records.
OK, let's start at the top. You need to choose good abstractions to make your code readable and maintainable. Right now, if you want to change anything about the problem, you have to change multiple places in the code. The details of the student file, for example, are spread all over the place.
Starting with the function signature: why should we copy the entire input to compute statistics? Let's pass by reference instead. Note how using a vector of Students allows us to omit arrayItemCount.
One of the fundamental types should be the Student. Instead of reading in a bunch of lines and making every function understand how those lines are formatted, let's write the code so that we read in a bunch of Students.
C++ is (among other things) an object-oriented language. Let's use those object-oriented features to help us understand the code.
Let's save on memory by a different choice of algorithm as well. Instead of copying all the test scores into a single array, add them up where they already are.