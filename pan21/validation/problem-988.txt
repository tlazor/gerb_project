Repeated Code: When you check the value for the specific square, you do the same operation with different values. Instead, you can write one function that does the same operation and takes the values as arguments. That way, if you find a bug, you only need to change it in one place.
Long methods and Deeply nested code: You should be breaking your methods into smaller pieces. paitComponent() is over 150 lines long and at one point is nested 7 levels deep in brackets. This makes the code harder to read and harder to maintain. Find section that does encompasses a block of code and pull it out into a different function.
Magic Numbers: paintComponent() has a lot of hard coded values. Changing those to named constants will make the code clearer to a reader as well as making UI tweaks easier. For example, if you want to change the size of each square, you have to find all of the locations where you draw one. Find & Replace 80 to 100 might work, but you might also use 80 somewhere else to mean something else. Where as if you define a constant, you just need to change the value.
RoToRa mentioned already not to run any premature optimization. Usually any optimization will lead to worse readability. E.g. understanding byte left_or_right requires reading the whole method (left=1|0|-1?). The meaning of boolean isLeft is obvious.
The switch statement will look even cleaner once you extract the repeated code into a function as I mentioned earlier.
Performance wise - throwing exception in java is very costly. JVM needs to create an exception context and whole bunch of other stuff.
Please check your naming conventions. I'm not sure from which language you are coming, but Java is usually using no under_scores but camelCase for variable and method names. Especially if you pick one notation don't switch in between of a single program (horizontal_pressed vs. rotateRight). It is also a common pattern to start the method names with the verb. On the other hand, classes are usually nouns (Generate?) and are never written in all-caps (TILE). All-caps words are usually constants (final).
Although naming seems to be only a minor issue, it requires a lot of effort for the reader to understand your code, if she is used to a common pattern for a specific language.