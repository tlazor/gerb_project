Personally I wouldn't add a messaging system just for the sake of decoupling code - you obscure the flow of control for very little gain. But if you find your code is too tightly coupled, then sure, add a messaging system.
I would also stick to active changes ("when this happens, move the player to the left") rather than passive changes( "so that when the actor manager code is called, it sees that the player must be moved to the left and moves it to the left"). If you make things too passive then the flow of control becomes too awkward to follow and you can't easily track what has caused a change in an object's state. If you're sending messages, send them immediately (if possible) and act on them immediately (if possible). 
There's no best practice really. It would depend a lot on the engine you're using, the complexity of the game, etc. If I was writing a small Flash game then I'd write the PlaySound call right into the sensor check for the player. If I was writing a bigger game using Unity or equivalent I would do the same, except the PlaySound call might well be implemented as a message (since you wouldn't want every object to know about all the possible systems that can result from all events).