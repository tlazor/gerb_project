If your app is stuggling with 20 concurrent users and its not doing something very intensive like industrial-strength number-crunching, I would be inclined to take a guess that its the code that may be to blame rather than IIS.
250 concurrent users of application that generates uncached page content dynamically on a single box is a pretty tall order simply due to the constraints of the hardware itself.  The pipes are only so big and without caching, you will fill them fast.
Analyze your app and see what can be cached at what level, starting with Asp.Net's Page Output caching and diving into the layers adding caching in each layer as fits.  Find your bottlenecks and ask yourself how often that process needs to be called.  Is that data unique to each user?  If not, then cache it once and use the cached value for subsequent requests.  Does the data only change at a certain time?  If so, fetch it once and set the cache to expire at that time.  I can assure you that this alone will make dramatic improvements in your capacity.
My first suggestion is you check the codebase for bad design/logic, optimise database and data access routines and see if that has any effect. You could try using Resharper or similar to assist  you in this.
If you are getting a 500 response and a timeout, that indicates that the webserver is handling the request just fine, but something needed to complete the request is timing out - probably the request that the web server posted to the app server.  If the problem was on the web server, you would be more likely to get a connection failure or network timeout error (i.e. no HTTP response at all), rather than a 500 response. I would start by looking at the metrics from the app and db servers. If the usual metrics look good, then look for locking behavior. A DBA should spot this quickly on the db, but in the app server code (custom code, I assume?), you will need to dig deeper.
Use the ANTS profiler to find the slowest lines in your code. Also, increase the number of threads permitted, I think in the web.config. Maybe also increase the timeout, and remove functions (such as getdate) and especially table valued functions from your SQL code. If you absolutely need a function in your views for example, use ODBC escape sequences, such as {fn curdate()}, because ODBC functions are canonical functions (indexable), while ordinary SQL server functions are non-deterministic (not indexable).