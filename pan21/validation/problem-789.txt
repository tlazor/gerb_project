The customer's server login (supplied unique with the product) is not administrator level, for reasons not relevant to this question. Engineers could not simply use a default username and password for admin access as they would also be able to share this information and compromise security, without us tracing the leak back to them.
As far as I'm aware it is not feasible so assign each engineer their own key pair as every product would require updating with a new public key every time we hired a new engineer.
We have distributed many (hundreds) of home server type devices to customers, each of which contains the same RSA Public Key.
Let me start by saying that I know distributing a private key is a pretty stupid thing to do, akin to making copies of your password and handing it out (in this case, encrypted copies that will be decrypted for use) - it is not something I want or intend to do. However, I cannot think of any other alternative, so either I find a secure way to go about the unthinkable, or I ask for the wisdom of the superuser community in finding a suitable alternative.
Naturally they would each require a copy of the private key, which would be password protected - however if they were given the password to use it they would be able to freely distribute the unencrypted private key and compromise it.
The company is the only owner of the associated private key, however we hire engineers for support purpose that must use this key to access the customers' servers and work effectively.
I am also aware that a determined person could extract an unencrypted key even if it is only ever stored in the computers memory temporarily - yet another reason I would like an alternative.
So would there be any way, perhaps using a 3rd party program, to give each engineer their own password, which said program (having securely stored the true password for the key) would then use as authorization to decrypt the key and use it for connection - without storing the decrypted form on disk/ permitting access to the engineer?