I'd propose a simplification, where any single room in the ship (building, whatever) always carries one single air pressure only.
Particles obviously only collide with things in their immediate vicinity and so you can leverage spatial optimization techniques (simple grid, quadtree, bsp etc.) to avoid quadratically testing each pair.
I could imagine a simple simulation to basically just apply a force on objects near the vacuum opening where air is whooshing out and have that force increase as the distance decreases and as the size of the hole increases. Done. For some visual flair, Animate particles whooshing out (just near the opening)
The action would start by any vertex beginning to leak air, so nullify it's pressure. The next vertex (say a door vertex) would not get zeroed completely, as it has a resistance. Calculate how much it can take and remove that much from it's neighbours. Etc, you get the point. 
Some of the vertices would have a resistance, telling how much air can pass per time unit, and ofc depending on the pressure in connected neighbour nodes. Those that have no resistance would simply be measuring points.
The pressure of a gas is a direct result of its particles colliding with each other and their environment, which means you can simulate pressure simply by modeling those collisions.
In practice, there will in both cases be one single pressure in the room at any time. Air is fast, the bottlenecks (size of hole) will slow down the escaping, but not for example the mass force of air (or it will, but too little to be relevant).
The data model would be a node graph, ie. connected vertices. In the middle of each room there would be one vertex, and at each door (or hole) one. Perhaps at each corner (for example in a corridor) as well. If a door opens into a corridor, the door vertex would apparently connect to two nodes in the corridor. Imagine having these "lines" going through the entire area, potentially also through air channels etc.
Then do some recursive magic to walk through the entire graph. Remember that even if it models a physical space, it is still only a data set - the graph doesn't know what the space ship looks like, it only has vertices (indeed with positions, that's how you map to physical locations), nodes and weights. The graph need not "look like" the physical room distribution! It doesn't look like anything, it's just a bunch of numbers.
A simulation is always a number of degrees off from reality. So the question you need to first have an answer to is what degree of reality needs to be mimicked? 