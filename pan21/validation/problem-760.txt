You can also create one big vertex buffer where you would put each mesh's vertices continuously and then the mesh instances would index that vertex buffer with an offset. You can specify an offset as an argument to the Draw() function. The same is true for DrawIndexed, you can specify an offset into an index buffer as well.
You can just create a unique vertex buffer for each mesh as a simple approach. Then for each mesh instance, you would bind the vertex buffer, set some shader constant buffer with per instance properties, set the textures, material and call Draw(). 
You can use instanced rendering (for example DrawIndexedInstanced function) to render each object in a single draw call, but with unique per instance data. But you can't bind unique textures per instance this way. You can however bind a texture array or texture atlas and have the per instance data index those in some way. In DirectX 12, you can do bindless textures and index textures dynamically which also extends instancing easily.