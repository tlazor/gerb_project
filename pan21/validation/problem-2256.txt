Separate SQL Server instances trivially allow distinct tempdbs, and allow limitations on the amount of server memory each instance is allowed. It may also be possible to restrict instances to specific CPUs. However, by the time you do that, the advantages of sharing a single server would tend to evaporate. If you wanted to limit the CPUs an instance can access, and you've got a virtual machine environment, simply setting up distinct virtual machines with the number of CPUs each instance should have makes more sense.
This would also prevent the possibility of a significant server issue that requires the reboot of the server itself - you can restart 5 SQL Server instances on a single machine separately, but a reboot of the server itself takes them all down. I would be inclined to say that, given no budgetary constraints, separate servers for each application would make sense.
Of course, in the real world, that sort of situation (no budgetary constraints) is rare. Ultimately, a hybrid approach may be appropriate. If certain applications are more critical than others, set them up on separate servers. Set up less critical applications as instance on a single server.