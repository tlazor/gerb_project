I would avoid static methods as much as reasonably possible; however, in some cases it is a better choice to use them.  For example, one would not typically benefit from subclassing the java core types.  So if I needed to write a method that operated on String objects, I would probably prefer to put that as a static method on a StringUtils class.  On the other hand, if it were a class that I had written, I would probably go out of my way to stay more object-oriented.
is going to be very hard to test.  If only you had made an interface on the MyAPIClient, you could do something like.
With static methods, no such polymorphisim is possible.  This can lead to switch statements embedded within the static method (to function on key fields, acting somewhat like the state pattern).  The primary reason this tends to become a smell is that switch statements put the burden of code maintenance outside of the object.  In extreme cases, it begins to feel like the object is not encapsulating it's behavior, but rather the switch statement dictates external behavior depending on the data fields within the object.  Such code becomes difficult to maintain over time.
I agree that inability to mock can be inconvenient for testing existing code, but the need to mock in the first place is a sign that your code has rigid dependencies.
Too much static code typically means not enough code in the objects, or not much object oriented structure.  Since objects provide boundaries between the in-object code and the rest of the system, they allow "leverage points" for future change (and for testing).  You can, for example, subclass an object to provide a variety of implementations of a particular class method.
When you make methods static, you make dependencies between inputs and outputs explicit without having to read the body of the method. It's a similar argument to why dependency injection is helpful.
Each new call to this method creates a new instance of the interface thus all calls to this method use a resource (JsonHttpResponseHandler) different.
I disagree completely with all the others in this thread, probably because I find Functional programs so much easier to reason about than Imperative Object-Oriented code. Making a method static is the first step to making java code functional-style.