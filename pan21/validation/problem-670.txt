The replication oplog is a system capped collection whose implementation varies somewhat based on the underlying MongoDB storage engine and version of MongoDB server. Conceptually a capped collection is maintained in insertion order with a maximum size in bytes or documents. You can think of this as similar to a circular buffer: once the capped collection reaches its maximum size, the storage engine removes or overwrites the oldest documents based on insertion order.
Forced reconfiguration should only be used as an administrative last resort. This is a risky approach with only two replica set members as you can easily create data challenges that will require significant manual recovery effort.
The capped collection implementation for the oplog has some additional nuances (as compared to a standard capped collection) to improve performance for the replication use case. WiredTiger (the default storage engine in MongoDB 3.2+) does not preallocate the full space for the oplog so this collection will grow until it approaches the maximum oplog size. WiredTiger has a background thread that periodically prunes a batch of the oldest entries from the oplog.rs collection, so the size of this collection on disk is expected to fluctuate depending on overall write activity.
If you have a network partition and inadvertently reconfigure both sides to have a primary, you will have to deal with rollbacks and manual reconcilation of conflicting writes. The worst case scenario would be having enough independent writes for the oplogs to no longer have a common point: you would have to choose one member to use as the primary and then resync the other.