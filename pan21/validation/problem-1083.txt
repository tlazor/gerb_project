As well as being a hint to the compiler, it is also a hint to the developer who is reading the code. AKA self-documented. If the variable is declared as a const, even if there is no optimization advantage, the reader can be sure the value that is assigned at the time of initialization is the value that will be used when the const is referenced later.
A const value is never changed after it is initialized. By declaring a const the compiler can do certain optimizations, like calculating the const value at compile time instead of at runtime and replacing references to the variable with the actual value so that there is no extra overhead.
In the case of the example in the question, it's possible and likely that the value passed to the mipcount argument is also a const. When compiling, the compiler will analyze the code, following the execution paths and if it finds that the value passed to mipcount is a const, it can then optimize rangeClamp to a literal value instead of a subtract, multiply and pow operation.