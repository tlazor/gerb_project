For us, this wasn't that detrimental a solution - as almost all of the usage are Write operations with fairly low reads - obviously we have a maintenance plan that tries to take care of the Fragmentation as best it can (there are some Update operations - so Read and then Write but the delay is within threshold).
My test on Sample table (2044398 record, 95% fragmentation) shows that 10,000 rows are returned in about 6s. After I rebuilded  clustered index (fragmentation 0.35%) query was executed in 2.5s.
Just pointing that out as a consideration as it suggests that combining a Hardware Issue at one of the Nodes, a Network Issue and some incredible bad luck could result in duplicated ID's, maybe!
The Identity columns were a nightmare to manage, through our Dev testing and working on automating the separation of the ranges, we gave up on them (never made it into production) - in my opinion, it is more trouble than it's worth - we settled back on the GUID's that were already in the database and settled with the known issues of a bit of wasted memory and Index Fragmentation.
In our Dev environment we worked through converting most of the GUID's to Identity columns, set up the replication to match the intended Production system and ensured that the Identity columns had separate ranges per node (as per http://technet.microsoft.com/en-us/library/ms146907(v=sql.105).aspx - this also gives suggestions for Automatic Identity Range Management, which may work for you).
Don't forget also that a NEWSEQUENTIALID can start again from a lower range when Windows is restarted which may have a bearing:
Good suggestion Dave, but wouldn't that give Nihad problems with keeping the ID's unique between his Nodes:
I think this could be the case in Nihad's situation as he mentions requirement for Bidirectional replication and also mentions Merge in his Comment.
If we decide to use last table structure TEST 3 because it has relatively good performance for minimal effort, what would be the consequences for replication? For the new column will we have the same problem as if that was primary key (identity range for every server problem)?
The beauty (and uglyness!) of the non-sequential ID is that it should always be unique (I say should because of course there is always possibility of duplication but it's slim- 
Instead of simply eschewing GUIDs as your clustering key, why not change how you're assigning them?  Are you using NEWID() to generate your key?  If so, use NEWSEQUENTIALID() and you'll likely do a lot better on fragmentation.
In a previous role at a different Organisation to where I am now employed, we faced a similar decision whereby the GUID issue (as pointed out in the link) was a factor for us (both Width and poor choice regarding Index fragmentation) - but we needed to move to Transactional Replication (Peer-to-Peer) to allow our Sites to be Geographically separated.
I.e. Node one uses ID 101, Node 2 uses ID 101 before it has replicated transaction from Node one from the Shipped Transaction log (depends on setup, but in the peer to peer situation I described, it was extremely busy at all Nodes as the Client app wrote to the closest Geographical Node - add in some latency and this could happen a lot !)
My 2 pence are - avoid Identity Columns (unless you already have a great plan for them - or you can add a static unit (i.e. Server 1 always has a preceding letter A1, A2 etc. Server 2 = B1, B2, etc)) when replicating and test the life out of it - assuming you can set up a replica Dev system or whatever. Of course it depends on the business whether you can put up with the poor read access that GUIDs provide because of their Index issues!