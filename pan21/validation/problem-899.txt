What would be a good procedure to upgrade these drives to 1TB each?  I have no more available SATA ports.  I've considered pulling one of the drives out, replacing it with a new 1TB drive partitioned with two 250GB partitions, and a 500GB partition, and rebuilding the array.  Repeat for each drive, then create a new RAID5 on sd[abcd]3.  That seems "less than optimal": abusing the sync/recovery process seems to not be the right way to do this.
My home Linux server has a four drive software RAID 5, where each SATA drive has two partitions, named sd[abcd][12].  /dev/md1 is built up from sd[abcd]1, /dev/md2 is built up from sd[abcd]2.  Each drive is 500GB, and each partition is 250GB.  I use LVM to merge md1 and md2 into a single volume group.
There's really no good reason to have multiple arrays, spread across the same disks, so if the process eliminated that, that would be good.
You could do the resync-and-replace dance as you suggest, but once you're done copy all the files from md1 & 2 onto md3, then nuke the md1 & 2 partitions and expand the md3 partition to use the new space. To do that you'll want to make the first partition on the TB drives be part of md3 so you don't have to relocate the data later. 
My recipe for this would be (If your data is very important, and you are very paranoid, you can add a USB drive as a hot spare during this operation, but it will take a lot more time):
USB is incredibly slow and CPU intensive, so attaching four drives in sequence and copying that much data will take ages. I would much rather just swap the drives one at a time. 
After this, you'll have four 1TB disks with one 1TB partition each, joined in a RAID5 with LVM on top. Perfect result.
Does it make more sense to use an external USB enclosure, stick in a new 1TB disk, partition it, add it to the md1 and md2 arrays, resync, then remove one of the old disks from the array, repeating that for each disk?
First of all, partitioning the drives into several RAID arrays and merging them back with LVM makes very little sense.