First, decide how long you want it to take the sphere to travel between waypoints.  Let's say you want 1 second, so...
Your code has a couple of errors in it I wanted to point out.  Fixing these won't get you the desired outcome, but I thought it would be important to point them out for your education.
So as long as your waypoint is moved up, the speed will just continue to increment more and more, making the sphere move faster and faster.  It will just keep getting faster and faster until you move it back down to zero.
What you want to do is calculate the distance between each waypoint, and then adjust the speed so the time it takes to reach the next waypoint is the same.
If you recalculate this speed at each waypoint, that will make the spheres all travel across the lines in the same amount of time, meaning they will both reach the far side at the same time.
Next, assume you are at a given waypoint, and want to figure out how fast to go to the next waypoint.  Start by calculating the distance to the next waypoint...
So if you have a distance of 1 for example, the speed is 1 / 1 = 1.  But if the distance was 2 (twice as far), the speed is 2 / 1 = 2 - meaning you have to travel twice as fast to cover the distance in the same time.
You are trying to compare the two positions to determine if the current position is the same as the target waypoint.  But unless the positions are EXACTLY the same, this won't work.  So if the position goes just slightly past the waypoint, then they won't be equal - but clearly the sphere will have reached the waypoint.  Instead you'd want to do something simple like check if the sphere X value was > the target waypoint X value.
First, the problem with your current code is that when you grab and move the waypoint upwards, you're triggering the following bit of code...
so I tried to get those first and third ball to be able to move with same pace no matter how curvy their target path is, I tried to get the y position of the target that the ball is moving to, but I cannot figure out how to actually control the speed of the ball when the target y position is higher or lower than the ball y position, it seems that the ball will keep on speeding and not at the same pace with other ball as well. 
I assume that the code posted is in some update function? It appears as if you are continuously increasing the speed if you increase the y distance. Doesn't seem like that is necessary.