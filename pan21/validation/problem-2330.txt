The first reason that comes to mind is that you should, in general, follow accepted practices. The way a shell is invoked governs the configuration files it reads. From man bash:
Finally, it often desired to have different environments set up if the user is logging in through ssh for example and if she is physically present and opening a terminal. By making all your shells login shells, you lose the ability to make that distinction.
Most distributions will place global aliases, variables and shell options in /etc/bash.bashrc because they are configured to make most shells (terminals etc) interactive, non-login shells. Therefore, if you switch to using login shells, you will loose all these settings. This could conceivable cause problems downstream if, for example, certain global variables have not been set correctly etc. 
Now, it can't be as bad as all that since, if I understand correctly, OSX's terminal app starts login shells by default. However, OSX has been designed that way so the potential problems I've mentioned have presumably been taken care of. That will not be the case if you modify your Linux setup to do so yourself.
In addition, the default setup is to run a login shell when you log in and non-login shells thereafter. This makes it easy to set up environment variables or simple jobs that should be executed once in the login shell's setup files (e.g ~/.profile), The advantage is that these will only be run once, when you log in. If you make all your shells login shells then these commands will be executed multiple times which is i) not elegant and ii) can slow down your system if these commands are resource intensive.