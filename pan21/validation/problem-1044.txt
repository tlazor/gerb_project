This really depends on how your code is organized, I don't think anyone can give a really good answer to what you should and shouldn't do without knowing your code and style in depth. In any case, it doesn't sound like a problem that is prone to consuming problematic amounts of memory. But it could cause problems for you the programmer to manage because it is a lot of code. So don't worry too much about memory, worry about making something that you can work with.
You can also enhance the ImageAnimation class (or create a derived class) to handle scrolling images.
I'd just start coding new visual effects, either via a branch in your animation method, or via inheritance. Generalize where it makes sense (i.e. it's silly to write "animate fireball hitting enemy" and "animate energy bolt hitting enemy" classes, just write "animate image hitting enemy" and specify the image based on the spell.) As you write more visual effects, look for ways to combine them sensibly into a larger structure. Maybe one will become apparently. Maybe it won't! Maybe it's just annoyingly complex code.
Now if you had a baseObject class and your game objects are stored as an array of baseObjects, then you can add SpriteSheetManager to the game objects so it updates then. This would be useful for large spells that take up the whole screen.
Create a SpriteSheetManager class that can hold ImageAnimation objects. When SpriteSheetManager updates, it updates the current ImageAnimation object - ie the current frame. When the current ImageAnimation is done (duration has passed), the manager should move on to the next ImageAnimation. You would have to manually add in ImageAnimations and specify the image/duration/matrix (or somehow pull it from a data file).
I suspect this is one of those things that isn't elegant, just involves a lot of code. You can try to come up with reasonable building blocks to create attacks. You can try to generalize things massively. But you may spend more time trying to invent generalization than you would just coding it a dubious way, and there's no way you're accomplishing this without a significant chunk of code.
Create an ImageAnimation class derived from AnimationFrame, which has a SpriteSheet variable to hold your image, and possibly a matrix to resize/crop the spritesheet. When this updates, it draws the image (cropped/resized). It should also super.update() to update the time passed.
Create an AnimationFrame class which only has a duration. When this updates, it updates the time passed. (If you have a baseObject class, make sure this derives from it)
I asked myself a similar question a while back and here is what I came up with (using a component-based system):