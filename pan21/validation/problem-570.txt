Could be - not enough information to say. If the query needs to read more than approx a tenth of the data, the a full table scan will be faster than an index lookup. 
I'm basing this off timing issues I've had at work with connection pooling between a Tomcat web app and a proprietary database system. It may not be relevant.
With a slow down occurring when the number of simultaneous connections increases this could be a connection pooling issue. If the server/connection pool is set to only allow a set number of connections (say 5) then later connections will be queued up till there is space in the queue. Also if a single page hit leads to various SQL queries being fired, but each one opens a brand new connection to MySQL (rather than re-using an earlier connection) then this can lead to masses of connection requests being generated.
What's the max connections? How big is the database? What engine? What's the key buffer size? How much free memory does the DBMS have?
OTOH do you mean that when you analyse the queries using the same tool as in your screenshot it tells you it's processing thousands of rows? In that case fixing the indexing will have a huge impact.
You have menus on your web pages with 1000 entries? Then most of your problems are not in the database. Your application is fetching FAR TOO MUCH DATA from the database. If it's then sending this information across internet then performance will be appalling. If it's not sending out all the data it's fetching then why aren't you doing the filtering on the DBMS.
Otherwise, most scripting languages used for web stuff (as an example) have database libraries that open a connection at the start of the page and then you just reuse that reference for the rest of the page. Worth checking whether this is happening (though you may not have massive control over the code).
Maybe you should think about aligning your schema with your queries (i.e. add relevant indexes) however  think the biggest problem you've got is that you're fetching data from the DBMS which just isn't getting used.
How you control connection pooling is implementation specific (different languages/libraries do it in different ways) and there is a sweet spot as far as how many connections to the database are kept open. With systems such as Tomcat, Tomcat itself can be set to open connections to the database when it is started and have these available for applications/servlets as and when they are needed. You'd have to profile your app and usage to see what a sensible sweet spot is (as holding open unnecessary connections uses memory).