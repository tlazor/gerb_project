You could do this by splitting the table into two, putting the 10 columns that you report on (along with the primary key) in one table (and a separate tablespace) & the other 40 in another. You can then present a view that joins the two together as the primary table. This probably won't be doable without application changes though. To insert, use an INSERT ALL query or an INSTEAD OF trigger on the first table plus an INSERT on the second table.
ASM beats RAID10 primarily because it understands the data being written to it - so for example it can vary the stripe size between data blocks and logs.
Your whole premise behind the question is faulty. You do not need to split your data between tablespaces to spread the i/o across more disks, you need to increase the number of disks in your RAID10 or (better still) ASM array. You will get less performance gain, less space efficiency and far more maintenance trying to manually tune the i/o like you are suggesting.
Whilst technically possible, I'd question whether this is needed. You'd be better off wide striping over all of the disks (ASM does SAME - use it if possible) to increase the number of spindles & IOPS available, rather than effectively putting some disks out of action because they hold data that isn't used for reporting.