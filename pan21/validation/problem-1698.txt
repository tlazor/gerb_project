There's a perception that now we've have failed since the 1960s to create a secure OS, we can all of a sudden create secure virtual machines, where one virtualized environment cannot interfere with another. This is nonsense, of course. We can't even created CPUs that completely protect two running processes from each other.
Being able to use one physical system to run N application sets, where said apps have no possible (or at least, highly unlikely) chance of interfering with each other is often a huge win.
Maybe you have 10 of the same server and you only need one most of the time, but sometimes when your load gets higher you need a few more. This way you don’t need to boot up 9 more servers, you have everything consolidated and running on one (or a few virtual servers).
Maybe you host applications for other people and want to give each person their own individual “machine.”
Your idea of just putting all the N sets of applications together has all sorts of risks. What if all of a sudden one needs a patch that requires a reboot? You patch and then reboot all the others; with multiple VMs, you reboot just the one. What if one app runs best on RHEL 5.2, while another likes Suse 10.0? What if one app absolutely requires version X of Oracle, and another absolutely can't use version X? (We've all seen this kind of thing!).
When you want a clean environment for compiling/testing purposes, a virtual machine is handy for avoiding additional hardware purchases, but that's really the extent of it. In many cases, properly designed applications could be run exactly like you describe, each running in their own userid where the OS decides which resources can be accessed. 
Say I got N physical servers that are lightly used. Why don't I just combine all the apps on those N servers into 1 physical server? This way I don't incur the performance penalty of virtualization. 
Maybe your applications can’t all be installed on the same server or maybe for security purposes you don’t want them on the same server — if one gets hacked, only that one gets hacked.