As far as basic collision goes, that should pretty much set you up. Assuming you are not going at crazy speeds, your character should "bounce off" the hollow pipe. But how do you set the game up to react to the collision with "Game Over"? Why, with some basic scripting!
There are also three different events for each of these collision types. It might sound confusing, now, but with practice you will see how it all comes together. If you are familiar with input, and the likes of GetKey, GetKeyUp and GetKeyDown, it is the same principle.
The player will also need a Collider, but we can leave it up to you to decide what type fits best. Again, ensure that no matter what, Is Trigger is not selected. You will also want a RigidBody. It is important to note that a RigidBody is required on at least one of the game objects involved in a potential collision. Without it, Unity will not detect a collision. Since RigidBody also manages the physics side of things, you will probably already need to have one on the player. Apart from that, it is usually best to place it on the moving object, if you are not entirely sure what side to implement it on.
Add a script to your player. Any script will do, as long as it still inherits from MonoBehaviour. Any script that inherits from MonoBehaviour will have a bunch of different functions called under certain situations, and a bunch of them are for collision. You can check them all out at the Unity API; it is extremely helpful, and will definitely broaden your horizons on exactly what you can react to in your code.
If you find yourself having to place a RigidBody on a stationary object, you can use the Constraints fields at the bottom of the component view to lock movement and/or rotation along the X, Y and Z axis. You would probably also want to ensure Use Gravity is deselected. Again, none of this should apply to this example, but it is good to know.
The first thing we need to do is add a collider to your pipe. We can not use the generic CapsuleCollider, as although it fits the rough shape, it does not give us the hollow center we need to move the player.
Let me start by stating the assumption that you have imported a mesh to use as your hollow pipe. If this is not what you are currently doing, it will either not work, or be far more complicated than it needs to be. This answer might be a bit more in-depth than you were looking for, but I feel it is more important to explain the concepts behind what your wanting to do, in order to greatly expand what you can actually do with your game.
You are looking for the OnCollisionEnter(Collision collisionInfo) method. Simply set up a simple script, as follows, and work your way from there.
You want to add a MeshCollider component via the inspector. With your hollow pipe selected, scroll to the bottom of the inspector, and select "Add Component". From here, you can look at all the possible components you can add to your game object. This is very useful for seeing what is available, as alternates or in general. For example, if you type "collider" in to the search bar, it will show you all the available Collider components. We want to select "Mesh Collider".
One final word of advice: as you describe, you initially have a very simply game. A player and a hollow pipe. Eventually, maybe even already, you will have a lot more objects. Some of them will also have colliders, and you may not want to have the player automatically die when they trigger OnCollisionEnter with every non-trigger collider at play. This is where tags come in. You can read up on them via the Unity Manual, but basically, you can give objects unique tags and look for the tags in the collision code with collisionInfo.gameObject.tag or collider.tag to determine exactly what it is you have collided with.
There are two types of collision you will generally handle events for, in 3D; OnCollision and OnTrigger. Remember how we made sure our colliders were not set to Is Trigger? Trigger collisions, where we want to know if an object is within a certain area but do not want to force physical collision, is handled differently to physical collisions. They also take in different information; 
You will also want to ensure that both Convex and Is Trigger are left unchecked, although you should not be able to check Is Trigger unless Convex is already checked. This tells Unity that this collider will enforce collision detection, and force other colliders (the player, for example) to bounce off it. You don't necessarily want this behavior, but it prevents the player from clipping through the pipe in ideal circumstances, so it goes towards quality improvements.
Assuming you have a Mesh attached to your game object (the model of your hollow pipe - set this up, first!), the MeshCollider should automatically store a reference to it under its Mesh parameter. While the default is to use the same mesh used to render the game object, you can change the MeshCollider to any other mesh you may have. We won't need to do this, now, but it is useful to know. For example, if you were to create a complex character model, you could save a copy containing far less polygons to use as the collider. This would make collision easier to manage, as Unity would be dealing with a less-complex shape.