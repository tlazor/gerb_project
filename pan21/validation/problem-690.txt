When you change the MAXDOP setting from 0 to 1 this simply prevents SQL Server from being able to use parallel execution plans.  Parallel plans mean that SQL Server can use all the processors for a single query. When you set this setting to 1 it means that each query can use no more than a single thread.
To identify the root cause you need to look at the execution plans for the problem queries and see what the problems are.  You could have missing indexes, you could have out of date statistics, you could need more RAM, you could have slow hard drives, etc.
it surprisingly did not show any effect at all. The CPU-Usage stayed the same high as before executing the script.
When this change was made SQL Server expired all the execution plans from the plan cache.  When this happened every query that was being run SQL Server had to generate new plans.
Based on my experience, the CXPACKET was always the tricky wait type for younger DBAs that often caused some predictably wrong reactions. I've tried in Troubleshooting the CXPACKET wait type in SQL Server article to present most of the reasons for high CXPACKET but also to explain the CXPACKET background
I know that i cannot expect a full satisfying answer as my details of that story are not detailed enough. But i would appreciate if you could just point me into the right direction like Hey, have a look at I/O , set up your PerfMon like this , etc, etc.
Besides i have to say that i took over responsibility from the other guy that worked in this company before me as the Accidental DBA, but now it's my job :-)
He googled a bit and found out that the MAXDOP parameter has got something to do with it. So they went to the SSMS and changed the MAXDOP from the one value "0" to the other value "1" or vice versa. As soon as the parameter was changed (regardless of which direction) the performance immediately got better. Before switching the parameter the CPU was very high (working with the product was almost not possible) after the switch it immediately went to minimal CPU-Usage. It looked as the SQL Server was bored to death.
We had set up several maintenance plans (from what i've learned is not always the best approach, we are now following Ola Hallengren's MaintenanceSolution) to rebuild indexes and update statistics. But the performance problems were still there.
With one of our products from our company we "connect" to an existing database on customers side and import orders into our own SQL Server to let our desktop product plan and optimize them all for different lorries that will take different tours to deliver the goods from A to B. During that import we experienced some performance problems that could have been solved the following way:
The CX_PACKET wait type just means that one thread of a parallel query is waiting for another thread of that parallel query to complete.  CX_PACKET is a symptom not a cause.