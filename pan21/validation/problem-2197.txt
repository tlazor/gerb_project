I recently did some extensive benchmarks on Percona XtraDB Cluster 5.6.21-70 and noticed a degradation after 32 threads when running transaction (insert, update, delete) against the Cluster. I then run the test against 1 node only and the degradation at 32 Threads went away. 
If there is anything you can do to lower the volume of writes to the DB from your application, you should do this. If you have any ways to increase the write throughput of each individual node (and the network between them), you should also do this. For example, we installed an SSD cache on our storage, resulting in greatly reduced transaction times. This alleviated the problem for a while, but as the volume of traffic increased it was still not enough to completely prevent cluster failure under load.
This is "normal" on Galera when the traffic gets too high. Remember that every write needs to be replicated on every other node, so the volume of write traffic on the cluster is multiplied by N-1, where N is the number of nodes in the cluster. If the writes are evenly distributed across nodes, too much load can result in very frequent cluster contention, and eventually a backlog of transactions that piles up as in your case.
Randomly my database gets locked completely and queries hang and they pile up until it gets "Too many connections". 
Currently we use HAProxy to direct all reads and writes to a single node. If that node fails, HAProxy chooses another node and directs all traffic to that. This is still better than a master-slave configuration for reliability, but there is an accompanying trade-off in performance. The one performance benefit was that we were able to direct read-only traffic such as backups, reporting and one-off queries to the non-master nodes. This greatly reduced the impact of such tasks to the general performance of the application.
This is simply a product of the mathematical certainty of the CAP theorem: https://en.wikipedia.org/wiki/CAP_theorem 
Version: 5.6.24-72.2-56-log Percona XtraDB Cluster (GPL), Release rel72.2, Revision 43abf03, WSREP version 25.11, wsrep_25.11