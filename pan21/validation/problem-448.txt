The previous 2.x version of inxi never performed a call back on the parent_script.  I can imagine many users or system admins have been using the inxi utility in a monthly script to help document their server(s).  And, with the inxi 2.x it was properly working for them. 
The inxi developer believes it is perfectly normal to do a call back to the parent_script without any intimate knowledge of the parent_script.  Common sense would be to never do a call back on the parent_script unless you have working knowledge of that script and how it will behave.  You are just asking for a vicious recursive loop.  If  the vicious loop is left running long enough it could fill up the Linux proc table or exhausted all available memory.  And the inxi developer has made a fundamental change to inxi using very bad assumptions and created this scenario.     
The 3.x version of the inxi utility changed the foundational behavior.  Now, inxi will perform a call back to the parent_script --version.  The inxi developer assumes the parent_script will respond in kind to the --version argument.   Why would anyone expect the --version call back when the 2.x version of inxi fundamental behavior did not do this?   This can be very nasty for a cronjob script.  
The 3.x version has a very fundamental change that will catch many users off guard with a vicious recursive loop.   I attempted to get the inxi developer to explain why he would change an existing foundational behavior, and what useful purpose does the parent_script --version provide.   Good luck getting an answer. 
Place this simple "dltest" script in your one of your PATH directories, and it will reproduce the problem:
Has anyone discovered the dmidecode, lshw, lspci, lsusb, lsblk, or blkid utilities attempting to call back the parent_script? No.  For that matter any UNIX or Linux utility doing a call back to the parent_script.  No.  Surprise, surprise, surprise, the newer inxi version does.