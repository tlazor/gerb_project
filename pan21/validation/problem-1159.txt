When @200_success asked if you had tested the code you seemed puzzled and pointed out that you had included two tests.  Unfortunately, writing things out to the screen and sight checking the results would not be considered good unit testing and for a reviewer they are not very useful as all we can tell is that some output was displayed. There is nothing to indicate what the expected results were or if they were achieved.
You have two declaration styles, I would say that mixing them up isn't "fashionable" -- I guess is the word?
We do not use the List functionality anywhere in the function but insist that the user passes in a List.  I would push for changing the interface to IEnumerable<int>.
Bottom line: Testing a function like this is a great place to use an automated unit testing framework. It may seem like doubling the code to be written but by the time one has run the code, read and checked the answers and repeated umpteen times for each tweak to the code to deal with the next thing we hadn't thought of, it does save time and gives a nice warm fuzzy feeling that we can see that it works and if any changes break it.
Should we return start = 0 and end = 0 if there are no elements in the input or if all are negative. The result (0) is correct but it seems to indicate an array of length starting at 0, ending at 0.