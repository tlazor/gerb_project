All in all though, it's not bad. I've seen much worse and I might even venture to say that you've used them rather well, all in all. Just be careful with it. It's easy to let your regions get away from you. It's easy to just keep shoving things inside of them when you should really be extracting logic and creating new classes. I don't feel that's the case here, but I do feel it's worth mentioning.
There could be a concept of a "style", that contains foreground and background colors for both regular & Alert modes, and then you could replace the whole switch block with a single call - something like this...
This is beautiful. It makes sense to group all of the different WriteLine overloads together. This is a good use of regions.
In order to add any new styles to your code, you potentially have to make changes to three places in your code. Minimally, you have to add it to your enum and your switch. A little OOP can go about making this much easier to deal with. Particularly because these all do a very similar thing. You could extend this indefinitely and easily by inheriting from your Bootstrap class and overriding Customize. 
Which in and of itself wouldn't be such a terrible use of regions. These all belong to the same logical group of methods, but now you're not being consistent with how you're using them. Are you using regions to logically group concepts, or overloads?? I suppose this is part of the reason so many people hate them. 
To make it worse, the "comment" in the region doesn't match the method. One says it's a MessageBox while the name of the method is Popup. I understand why. You didn't want to muck around with a namespace conflict, which is okay. Although, I might have just called it ShowMessageBox and been done with it myself. Popup is a noun, but you're taking an action here. I digress however, because there's also this:
Here, for example, you've wrapped a single method inside of a region. Why? What does this do for us other than clutter the code?
And so on. With this method of creating new types of coloring schemes, you don't even have to open up the Bootstrap file. You just create a new child class and over ride Customize.
There is one more refactoring that should probably happen though. The "If style == alert then set background color" logic gets repeated in each and every one of these overrides. It could be simplified by extracting this logic into a protected method of your base class.
Some people hate them. I'm not one of those people. I think that used correctly, they're a great thing. For example, I think this is a wonderful use of a Region.
First, you would need to change the signature of Customize in the base class so that we can over ride the method. Second, change it so that only the default case gets executed here.
The huge switch block in Customize has a lot of repetition going on. It may be worth extracting a method here: