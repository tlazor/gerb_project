Let's start with cleaning up Person. As suggested by others, you should adhere to Separation of Concerrns. We will have to take out the Console printing. Furthermore, we need proper naming and member declaration conventions. Do not abbreviate member names. Prefer properties over public fields.
Let's make a class UserPane, which will handle both user input and formatted output. The code method for reading input is Read<T>. It provides a generic way to prompt the user for input, validate the input, allowing for retries, exiting the application on demand and projecting input to any other meaningful type.
To get there, we require some refactoring. Also note, that unlike your perpetual checks for early exit, I would opt to let a low level handler (shown later on) exit the process on one place (DRY). This enables us to avoid redundant code in the likes of..
With all these methods in place, we can now read a Person from user input. Like suggested by others, the middle name is optional. The phone number is parsed as any string. As an exercise, you could extend the parser to allow for a ReadPhoneNumber method.
It's time to focus on user input. You already started a class KeyInput, which is a good idea to offset Console interop to. But you could have gone much further with this design to allow for clean application code.
You have been given some good tips about separating concerns and coding to prevent exceptions. The application itself should be a very simple loop. Parsing user input and formatting output takes up most of the code.
This allows us to make convenience methods for asking user input. The ones we need for our application are..