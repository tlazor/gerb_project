Given that info, you can consult your own database of known hardware and driver versions you've tested to select decent defaults, with a "low quality" setting being a good guess for unknown cards.  Just be sure to let the user tweak the setting values.  Even if, e.g., you detect an Intel GPU, those GPUs have improved a lot in recent iterations and for all you know might even be NVIDIA/AMD contenders a few years down the line; don't presume to know the future or know the user's hardware better than he does.
You can use DXGI_ADAPTER_DESC used from IDXGIAdaptor::GetDesc to read the PCI ID of the device for DX10+ cards.  Use IDXGIFactory::EnumAdaptors to get the interfaces.  There are similar methods to use for DX9 cards (if you support them), but I don't know them off the top of my head.  You can also, with some manual string parsing (at least the only way I recall) get the driver version number.
You can use feature detection, but this doesn't particularly indicate speed or efficiency.  Sometimes a driver version is just busted or lying, too.
Specifically, you will need a list of hardware PCI IDs you explicitly you want to specially handle.  Typically, modern games do this with a large bevy of settings and simply have a "detect best settings" option that allows the user to tweak further as desired.
My laptop has an "integrated" Nvidia 5400M. It plays most games with ease. Make sure your laptop is not using the Intel 4400 graphics GPU and is actually using the AMD 7520G. (Many newer laptops have two graphics options these days). 
Or you can a very short simulation and ask the user to check their settings if you find the simulation isn't running well, or continue with the standard settings if no problems are detected.
To answer your question, it doesn't make much sense to test for integrated or not, you need to know the capabilities of the GPU, not if it's user replaceable. You can do that by compiling a list of the most common graphics cards and creating pre-configured settings for them based on how powerful they are.