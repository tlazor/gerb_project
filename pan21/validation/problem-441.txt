I suppose the biggest questions I have here is - am I missing some design pattern that would make this more intuitive. Including the iterator interface seems to only make things more confusing. Additionally, I'm not confident that keeping a Map of unavailable indexes is the best course of action. 
Purpose of not using the interface hasNext method: In my original idea, hasNext would simply return false if there are no more datasources available. However, then I would actually have to iterate to find the next datasource if the next one is not available. Additionally, I'm using a priority queue to check if the longest waiting DB has not yet waiting long enough, so we immediately return. Since I already have that, I'm simply returning the oldest's index in the scenario that all databases are full, since we already know which one we want to return. 
This is a bit tricky to explain. I'm trying to model a cyclic iterator that would return the next available DataSource(SQL). So infinite calls would just pick the next source nicely. The new twist comes with the idea that one DataSource might be 'busy' or somewhat. That is abstracted as a 'waiting' datasource. This designation must be set by the user. Here is my idea to implement a cyclic db source in addition to skipping specified sources for a certain amount of time. 
Here I'm simply keeping track of the indexes that were taken. I initially thought of using an array and just fill the index position with some value, but I didn't want to enforce a limit with the array size. 