IMO where is a little bit abstract and hurts my eyes a little bit. Maybe whereCondition would be better ?  
which is all good, you are using readonly , sure one could question the PascalCase casing of the protected fields, but otherwise this is ok.  
So if you would use the class level DtoBuilder you could limit the usage of reflection by caching the PropertyInfo's in a Dictionary<Type, Dictionary<string,PropertyInfo>> by first checking if the desired TDto is in the dictionary and if not you could add a new Dcitionary<string,PropertyInfo> containing all the PropertyInfo's of that type. Something along these lines  
then the Assemble<TEntity, TDto>() method which is called by the DtoBuilder.Build() method would blow in your face because displayname would exists twice in the fieldsNamesList and therefor the call to customDto.Add(propInfo.Name, value); would throw an ArgumentException because the key already exists in the dictionary.  
This class is well written and structured and easy to read. The only thing I don't like is the name where for the passed in Expression<Func<TEntity, bool>> in the overloaded Get<TEntity, TDto>() and GetAll<TEntity, TDto>() methods.  
But if we take a closer look at your class, we see that the DtoBuilder DtoBuilder isn't used anywhere in that class but only in the constructor. If you use a DtoBuilder object you are creating a new one each time you need it (BuildContentResponse and BuildContentResponseMultiple).  