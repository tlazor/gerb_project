Timeout.  Pitstop.  We're using a lot of "xPosition" and "yPosition".  Let's just make a "position" struct real quick, shall we?  We'll also make a "size" struct while we're at it.  This will simplify some things moving forward.
Before though, with static prepended to all of our variables, we essentially had global variables that could be accessed through out the entire program.  Now, we don't have that.  You can only access player1's position if you can access the player1 object.  So we'll need to pass the player1 object around... this will require a pretty major restructuring of your program however... just as a warning.  This answer has just shown you the basics of the proper usage of classes--there is still much more to learn.
When you declare a variable as static, that means only one copy of that variable exists for the class.  Instead, what we want are "instance variables" (without the static keyword).  What this means is we're going to create instances of our classes.  The position variable on the Player class will be unique to each "player" we create.
I say that using a class might be correct, because some might argue that in your case you actually want a struct.  I've seen the argument made that in C++, passive objects that just carry data should be structs while class should be reserved for object which define method you might call on them.  I'm not a C++ master, and I'm not sure how many people follow this convention.  For the sake of this answer, I'm going to assume we're okay using a class here rather than a struct.
An instance of this class represents a "player" and the "info" about that player is held in any instance variables we stick on here.
First of all, if every member of our class is static, we almost certainly don't need a class.  If everything is static, essentially what you want is a namespace.  In this case, however, using a class might be correct, but using static for everything definitely is not.
Well, we've created four different variables of type Player.  Each of these Player instances keep track of a Position.  They each have their own unique position, and we've set this position for all four players individually.
A class should represent a thing (not info about a thing, but the thing).  We should capitalize the names of classes, and the info suffix is unnecessary.  For example, we want: