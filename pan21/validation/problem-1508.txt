By comparison UTC does not have this problem and orders cleanly.  So, even when working with just one time zone, you do want the DB to store and process times in UTC and convert to/from local time for input/display.  This is the behaviour of TIMESTAMP WITH TIME ZONE.
Conversely, if you are designing or working on a distributed system or in any system where parts of the system will be distributed across different timezones, it might be considered to be an anti-pattern to not use timestamp with timezone, although some systems might be designed to run in one timezone, eg UTC. In this case the timezone logic may be being pushed into the application layer -- but I would consider this an anti-pattern, yes.
It's valid to use timestamp and date for any timestamps and dates which are always in the same timezone, or are being stored relative to some known timezone.
It may seem temping to store and process dates/times in local time if your application is limited to a single time zone but I believe this to be a mistake.
If the timezone is always the same or implicit then it's more of antipattern to store it than to not store it (redundant information).
Timestamps can also be used for storing technical information such as used in application logs or for performance measurements. In this case, the timezone can also be unimportant.
If you attempt to order events by time using local time that means events from two separate hours are mingled together and do not appear in the order in which they actually happened.
When switching back from daylight savings time to standard time an hour in local time is repeated (assuming the difference is an hour).  Where I live this typically happens around 2am so local time runs 01:58, 01:59, 01:00 and only advances to 02:00 at the end of the repeated hour.