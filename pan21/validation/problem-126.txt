Adjusting the transformation is generally as simple as applying your own corrective transformation on import (or writing your own exporter), so once you know it's there, it's not hard to work with.
I would say it's a bit odd that the importers for a particular modeling tool like Blender don't all default to exporting in Blender's coordinate system, but it is true that most of Blender's exporters were community-sourced (last time I used it), and so there was not necessarily a lot of design oversight on the functionality of each importer and their relative behavior.
There isn't really a universally standard coordinate system. I have worked on games and with tools, across all of them, have used almost every possible combination of systems. I think the only ones I have no worked with in practice are "+X is up" and "-X is up." 
It's pretty much impossible to say why a particular exporter for a particular format for a particular tool operates in the way it does other than to ask the author, since it comes down to that author's preference.