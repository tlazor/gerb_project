What you're describing is best implemented as an HTTP Referer [sic] whitelist on the api side.  Http Referer header describes the referring site, and the browser will ad it by default - but be aware that the header is client supplied, so while this will stop naive web users from hitting your API from different sites, if the user themself is motivated to reach the api from a site, they can forge a http Referer header trivially.  
Whitelisting certain referrers should make that work.  A link typed directly into the URL doesn't provide a referer so that wouldn't match your whitelist.  You're not really blocking access to the api, which needs to be accessible from the arbitrary IPs of legitimate users of your site, but you are doing a simple authorization check by checking 
The only real way to protect an API from illegitimate usage is to provide authentication and authorization to the API server.  Even then, anyone authorized cna provide the same credentials in an api call with a forged http header.  So at the end of the day, you can't really stop a motivated party from accessing the api without using the site.  Websites today don't typically worry about this, though - they focus on making sure they use CORS to protect against cross site scripting attacks on unknowing users, and focus on authentication and authorization to block bad actors, who will simply forge anything client supplied.  