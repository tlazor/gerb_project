There's some repetition here that could be ironically be solved by using some loops, but I feel that wouldn't be quite as clear.
Takes the padded data, and "joins" the data together with ":". I recommend getting very familiar with join. It's a very useful function.
This puts the three time data into a list, and maps zero_pad_format over it, and returns a list padded containing the padded data. The line below it 
That gets rid of the majority of the code in draw_time though, which is a hint that that code shouldn't have been directly in draw_time in the first place. That chunk of code has nothing to do with drawing the time. It's just figuring out what to draw. You might want a set-up closer to this:
Really, it's unnecessary to turn the number into a string just to check if it needs to be padded. If the stringified number has a string length of greater than 1, that also means it's >= 10. You can just check if the number is less than or equal to 9 to see if you should pad it. That's what I'm doing in the first function. Instead of writing the same code three times, I moved it to its own function so the single function can be used three times.
get_time has a fair amount of repetition. I'd move the "padding" check to a new function, and just map it over a list holding the three pieces of time data:
Use division to figure out how many hours you can get out of the current_time, store the number in hours, then multiply that by 3600 to figure how much needs to be subtracted from current_time. Then you do the same for minutes.
The looping bit at the top of draw_time to get hours, minutes, and seconds from a raw seconds number is quite messy and inefficient. You're looping where straight math can be used: