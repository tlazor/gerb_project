More, packets are acknowledged one by one separately(2) by the receiver but sometime packets can be lost. Then no ACK will be returned from the destination of the packet to the emitter. Then the emitter should resend it (that is also the role of TCP). Sometime the packet is received correctly but the ack is not received by the emitter (lost packet again). In such a case, the emitter will resend it, but the receiver sees that it already received it (that is a Dup packet) and eliminate it but resend the ack to the sender.
The OSI level 4 protocol TCP is responsible of the scatter/gather. It means that your data stream is split into smaller parts (called the segments) and sent separately through the network. At the other side, the TCP layer is responsible of re-gathering the packet in the correct order to reform the stream just like it was sent. Nothing can tell you that the segments will arrive at the destination in the same order than at the departure. That is also why packets are numbered.
The IEEE 802.3 / Ethernet link layer refers to a single contiguous physical-layer transmission as a "packet".  The MAC data-link portion of the packet is called the "frame". The frame begins with the destination MAC address and ends with the Frame Check Sequence. The part of the frame that may contain an IP datagram (or fragment thereof) is called the "MAC Client Data field".
But in other cases the term "segment" includes the whole TCP message, including the TCP headers. In fact in at least one case the spec mentions TCP segments with no application data (such as plain Acks).
The original IP RFC refers to link-layer messages as "packets". IP datagrams can be broken into "fragments" to fit into the packet size limits on small-packet networks.
Also to improve throughput the emitter can send several packets in series and do not have to wait for the previous ack to send the next packet. It is also part of TCP protocol and it is called sliding windows. The number of sent packet pending for an ack is limited.
In some cases, the term "segment" refers to just the current piece of the application data stream that's being transmitted, which excludes the TCP headers. For example, the TCP "Maximum Segment Size" (MSS) is the maximum size of the application data chunk in this message, not counting the TCP headers.
So, technically, there is no such thing as a "TCP packet" or an "IP packet". Packets are terms from the layers below IP. TCP has "segments", and IP has "datagrams".
Keep in mind that Datagrams are encapsulated data sent on a IP network or using a connection-less protocol like UDP. Packets are encapsulated data for a connexion-oriented protocol like TCP. Segments are portions of a data stream sent on TCP.
(1) In facts, there are no negotiation at all, each end-point tells the Maximum Size he is able to deal with. This value do not include the 20 bytes of IP Header, neither the 20 bytes of TCP Header.
When you send data thought a TCP connection, the amount of data you send may exceed the maximum size of bytes allowed by the connection in a single packet. This amount "Maximum Segment Size" (also called MSS) is "negotiated"(1) at the connection time between the two TCP end-points (the client and the server).