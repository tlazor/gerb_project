In this particular case, you should also remove the old _10 JDK. Then either put your existing _45 in its place in glassfish3/jdk7; or do any necessary changes to PATH, JAVA_HOME, glassfish3/glassfish/config/asenv.conf, etc to get it running. You don't want to accidentally run an old JDK.
So to answer your question, there is no "using" EE without also using SE. And the only real requirement to use EE is to have its JARs on the classpath. Eclipse should have a way to "point at Glassfish" and have it find everything.
The EE JARs are in glassfish3/glassfish/modules. The main ones have names that start with "javax", so you can see them with find . -name 'javax*.jar'
When you run an app in Glassfish, it should do the classpath magic to make those JARs available. If you're using an IDE, it should do something similar so that you can compile your code. If you're programming manually, you have to do it yourself.
The Java EE you linked installs the Glassfish server; that particular bundle has its own JDK -- an older one in fact. So wherever you put it, if you go to the glassfish3/jdk7 directory and run bin/java -version, it will report java version "1.7.0_10", not _45. Note that the "core" runtime is in jdk7/jre/lib/rt.jar
Java EE is effectively a bunch of enterprise libraries (in .jar files) running on top of Java SE, usually in a server. So java -version by itself just says "SE". It also says "Server VM", which is tuned for running servers; but it is the default VM on 64-bit Linux for everything. (You configure or override the VM choice at startup. The VM doesn't "know which kind" of app it's running, so it doesn't choose for you.)