I'm not 100% sure if this is what you were after, so let me know if there's something different you wanted to know.
So, the right thing to do he would be to forward TCP:443 (at the load balancer) --> TCP:443 (at the instance, or some other port).
I think the accepted answer is not correct. Uploading your SSL certificate to the load balancer and asking for a HTTPS channel will cause the loadbalancer to decrypt the SSL traffic and pass it in decrypted behind the loadbalancer. (The OP asked for SSL to the application).
Usually your load balancer will handle negotiating https connections to your clients, then it will connect back to the origin tomcat server(s) to get the content over plain http (since there's not too much need to encrypt for that short hop, and presumably you can trust the local network). You should set your load balancer to redirect any http requests it receives to https, and you'll only need to set up the https certificate on the load balancer. For the tomcat back ends, you'll need to make sure all links are either relative, or tell the client to go to https.
This will also mean that ELB can't fiddle with your HTTPS headers -- which I think is needed for sticky connections. For stateless application servers, this is a non-issue.