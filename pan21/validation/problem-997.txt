From the looks of the way you've used the class, I would say there is little point having filePath and fileName separate. Instead, I would just pass in the full path. That way, you have all the information you need without having to combine the two strings each time you use them (which if used a large amount could slightly affect performance). If you find you need them separate in some cases, you can always retrieve them using the helper methods in System.IO.Path.
I would combine some of the suggestions already given and make the class stateless.  Storing the object and path in fields does not really buy you anything, and it ensures that you have to construct a new object whenever you want to serialize/deserialize something else.
One final point I would make, is to use a using statement when dealing with streams. This is much nicer and makes the stream disposal more explicit. i.e.
Also, since the formatters are generically used, I would re-use them. So instead of creating a new formatter each time you wish to serialize/deserialize some data, I would put the following  (or something similar) at the top of your class:
In addition, I would probably change the name.  PersistData is not a good class name (classes should be nouns).  I am naming impaired, though, so I leave that as an exercise for the OP :)
There is no point in catching the IOException and then throwing a new exception. You only loose information here. Either handle it or remove the try-catch altogether.
Other than that (and the wrapping of IOException which has already been mentioned), I would say it appears to be fine.