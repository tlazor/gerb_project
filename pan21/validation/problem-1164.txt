Looking around, I am surprised to find almost NO people in my position, talking about the tradeoffs and complexity at hand for such a switch.  Any thought?
So I'm now looking for the best way to group all of these calls into one (or two or three) draw calls.  It looks like the cleanest, most efficient and canonical way to do this is to use VBO objects, available from OpenGL ES 2.0 on.  However, this would require a HUGE refactoring on my part to switch my whole graphics backend from ES 1.0 to ES 2.0.  I am not sure if this is a good decision, or if there are acceptable ways to group my drawing calls in 1.0 that would work fine for relatively simple 2D data (squares, rounded rectangle TRIANGLE_FANs, etc.), or if it really might be worth biting the bullet and making the switch.  I might also mention that I have a HEAVY reliance on translation and scaling that is so convenient with the fixed pipeline of ES 1.0.
I have been developing an Android app using OpenGL 1.0 for quite some time using a naive approach to rendering, basically making a call to glColor4f(...) and glDrawArrays(...) with FloatBuffers each frame.  I am hitting a point where graphics is becoming a huge bottleneck as I add more UI elements and the number of draw calls increases.