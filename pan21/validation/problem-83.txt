The next part I'm not 100% sure of but I do recall that the C++ ABI isn't stable for Visual C++. Hence to link with a C++ .lib/.dll you need to compile the lib/dll with the same version of Visual Studio. Obviously if you only ship source code, there's no problem. But the C ABI is stable so a C library wouldn't have any issue there.
For the library to be useful I would like some more dialogue types. For example I would like to be able to give user defined buttons as an array and get the clicked button's index back. I would also like a text entry field type dialogue for quick 'n dirty user input. Possibly with a callback to validate the input and re-try the dialogue.
There is nothing in your API that requires C++ (sure you use some C++ features like enums but they aren't technically required here). As it is a library, making the API in C (with appropriate #ifdef __cpluplus extern "C" thinggies) makes it more widely usable.
This is not much of a code review. I think your code is great and I don't have any suggested changes at the moment, but I'd still like to share this bit of information with you, which was hard to compile, due the lack of official documentation.
You're missing the __declspec(dllexport)/__declspec(dllimport) and equivalents for Linux/MacOS if you're going to pass this of as a library,
Documentation is very sparse, or plain inexistent, but the following example compiles without warnings, so it appears that the API is fully supported and not deprecated as of OSX 10.10.4:
As this is a library I'm missing documentation for the header file. At the very least it should say that it is a modal dialogue (is it in all cases?) and what error scenarios there are. 
I do not like the fact that error to initialize GTK cannot be distinguished from the user pressing the cross without making a choice. I would rather it threw an exception which I can choose to handle or not.
If by any chance you aren't very happy about mixing Objective-C with a C++ project, there is a way of accessing the underlaying message dialog API with C++, using CoreFoundation.
Functionality should be equivalent to the Cocoa version you have. The advantage is keeping everything C++, if you care about that. The key point in the above is CFUserNotificationDisplayAlert(), which is the MessageBox() equivalent of OSX.