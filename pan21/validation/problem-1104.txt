Expect to use a lot of mock objects. Because of how tied together a lot of systems are, it's hard to test individual components of that.
There are certain aspects of games that can (and probably should) have unit tests written for them.  Any kind of generic "file reading" system should be tested.  Maybe have some tests for initialization of hardware things (3d surfaces, etc).  Maybe have some mock servers and test your client/server interaction code.  Things like that.
There are, however, a lot of things that aren't necessarily unit tests in the traditional sense of the word, but that exists as "tests" for specific features.  Things like test levels for AI navigation are pretty common, but aren't necessarily the easiest things to automate.
Plus a lot of things can't be thoroughly tested.  How do you test-drive, say, a particle system?  How do you test that your animation system is working correctly?  A lot of things are visual in nature, and aren't obvious (at least to me) as to how to do proper testing.
It's certainly viable, although a lot of game programmers haven't really gotten on board with the idea yet, or have a good understanding of how to test complicated systems.  I admit myself that I rarely use it, except for non-gameplay-related systems that are easy to test.