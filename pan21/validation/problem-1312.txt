Your class lacks an API. There is no interface for others to extend from, making it hard for anyone to know how to use it. There is also no documentation/doccomments, which makes it harder to use. At the very least you need some doccomments for your public scoped methods to make integration easier.
My biggest problem with your code, asides from the regex, is the inconsistencies in how the $template property is set. In the following snippet that property is changed three times, yet, it only looks like it happens twice. Either way is fine, but it should be consistent. I don't think there is a right or wrong here, except in maybe that the first way is more reusable, sort of like the situation with echo and return earlier.
If you aren't going to do anything with your constructor, there is no need to have one. You can remove it. That being said, you can probably find something to do with it. Rarely ever, unless using a base class to be extended from (usually an interface or abstract class), will you not need a constructor. I've already given a couple of suggestions.
You should generally avoid outputting text directly. This makes your code less reusable. Let the application using your class determine what it wants to do with its data. Change those echos to returns.
If you are just doing this for experience that's fine, but there are already many popular templating engines out there. Trying to compete with them isn't going to be easy or even probable. Sorry to be so blunt about it, but its the truth. Don't expect this to "make it big" or anything. That being said, have you profiled your engine and compared it to others on the market? If not, you should consider it. That will let you know if you really want to continue development, or if you need to go back to the drawing board.
Your tidy() method has an error. If the tidy class doesn't exist, then you still attempt to return $string, which hasn't been set. An appropriate move here is to either return early with the default string, or to throw an error.
I really don't know the proper procedure here. There are only a few functions in PHP that use references to automatically populate variables provided to them via their arguments, but I don't really use that many of them. Typically, when I see these functions being used, this referenced variable is not declared beforehand. I don't think there is anything wrong with it really, it just confused me at first. So, I'm not saying this needs to be changed, just letting you know its unnecessary to declare the $matches array beforehand.
Regex is sometimes slower than other options, especially with HTML. Have you considered loading your HTML into DOM to manipulate it? I'd give it a shot and profile it to check for any differences. I'd be willing to bet you'd see some improvements, and not just in speed, but in legibility as well. Regex is really bad on the eyes.
If you aren't going to use the value portion of the foreach loop, you can just loop over the array keys. There's no need to NULL out the value. Additionally, what is $ntmp? Don't use acronyms or obscure references for your variables/functions unless they are extremely common (PHP, HTML, etc...). Doing so will make your code harder to read. Strive for self-documenting code. This sort of goes along with that advice I gave about magically accessing arrays too.
A NULL value is essentially the same as not being set. This means that a default value of NULL isn't really necessary, an isset() check will determine this for us. Empty, on the other hand, is sometimes useful for callbacks when checking FALSE values (FALSE, NULL, etc..), but is more commonly used for determining if an array is empty. So, to check if a string is NULL we could use isset() or is_null, or we could just query the variable directly without needing to use a function at all. The benefit of not using a function is that the code is a little more efficient (slightly faster, though negligible), and is a little cleaner (less parenthesis to clutter the statement).
Accessing an array's elements "magically" ($matches[ 2 ]) is really confusing. I for one have no idea how you came to the decision to use "2" here, nor why you chose to use "4" later. This might be a familiar formula for the regex functions, I don't really know because I never use them, but to the regular user, they probably aren't going to know what's going on. There are a few ways you can fix this to make it easier. One is to use list() to label each element of your array. Another is to use more general array functions, such as array_shift() and array_pop() to abstract the desired elements. And the final way, assuming the array is an associative one, you can use extract() to dump the array into the local variable scope so that each of its keys corresponds to a new variable. The latter obviously wont work here, but either of the first two might.
Inline CSS/JS is slow. By using file_get_contents() to dump these files directly into your HTML you are forcing your browser to load all those styles and scripts every time the page loads. This is why its strongly urged for people to use external scripts and styles, so that the browser can cache them. Instead of reading the file, you should just verify that it exists, and then use the external script and style tags to include them.
You are continuously scraping your HTML with regex. If you could find some way to do it once, then you would probably notice some immediate improvements in performance. Since, most, if not all, of your templating language begins with a dollar sign $, you could probably scrape for that and get everything into an array. Then you could loop over said array to determine what methods you will need to run.