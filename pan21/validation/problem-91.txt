If you see your browser's console, it will return a data matrix in JSON format. But how would we know if the request is made? In other words, how can we handle the answers with Ajax?
If readyState is equal to 4, it means that the request has been made. The readyState property has 5 responses. Learn more about this here.
In addition to making an Ajax call directly with JavaScript, there are other more powerful methods to make an HTTP call, such as $ .Ajax, which is a jQuery method. I will discuss that now.
Disclaimer - if you are looking for Windows specifics, this answer does not have it (I'm a Linux system admin, so  I understand the technologies and have done similar things in a Linux environment - Windows will be similar)
An option C would be to set up WAMP as above, and get a LEB (Low end box) and set up as a VPN server on the LEB and use the web server as a client.  Set up NAT, Firewalling and port forwarding on the LEB to bypass your internal VPN and allow traffic to flow as required.  You may also need to set the MTU on the box to 1400 or so because you are encapsulating a VPN in a VPN. 
The onreadystatechange property has two methods, readyState and status that allow us to verify the status of our request.
Ajax is the traditional way of making an asynchronous HTTP request. Data can be sent using the HTTP POST method and received using the HTTP GET method. Let's take a look and make a GET request. I will use JSONPlaceholder, a free online REST API for developers that returns random data in JSON format.
To make an HTTP call in Ajax, you must initialize a new method XMLHttpRequest (), specify the end point of the URL and the HTTP method (in this case, GET). Finally, we use the open () method to link the HTTP method and the end point of the URL and call the send () method to trigger the request.
We record the HTTP response to the console using the XMLHTTPRequest.onreadystatechange property that contains the event handler that will be called when the readystatechanged event is activated.
There are (at least) 2 ways of solving this problem -  Depending on your timeframes, your idea of having an external server which you can pole on a regular basis to initiate a deployment is a good one - it provides a level of isolation of your network while getting the job done.   
The alternative way would be to run a web server on  your LAN system.  You should be able to add a standard WAMP stack to your computer (Windows, Apache, MySQL, PHP), then code a PHP website to handle the web requests, SANITIZE THE INPUT and execute the script.    You would also need to port-forward/pinhole an appropriate port from your router to the web server - and, for good measure, may want to enable HTTPS on it as well.   