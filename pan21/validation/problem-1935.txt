The ports are basically just a way for a computer to determine what type of request is being made to it.
For a client to make a connection to your service, it needs to know your IP and which port your service is listening on.  Because your IP and port uniquely define your end of any incoming connection, only one service may listen on a given port at any one time.  If you had nothing else using port 10, you could definitely host your webserver on it, and all clients would need to specify the :10 at the end of your hostname/IP.  There's nothing magic about port 80 or 443, except that they are the standard ports defined for HTTP and HTTPS (so clients will use those ports if the user doesn't specify one).
If the same client makes a second connection at the same time, it needs another unused port number (5308 this time), because the other three pieces of the connection are constant - the service's listening port and both IP addresses are already set.  This allows a single client to have multiple distinguishable connections to the same service.  Another client could also connect using 5307, and it would be distinguishable from the first by the different IP address.
Now that you have that visualization, port numbers on a computer are similar.  You have TCP and UDP with TCP having a port range of 1-65535.  That is where those numbers come from.  Now, some of these ports are reserved for common traffic types.  Example, 80 is for HTTP, 443 for HTTP-SSL, 21 for FTP, 25 for SMTP, 110 for POP3.  There are a lot more of course, but I hope that this helps with the general idea.  Now, you can make use of non-reserved ports for things you want to do, but I wouldn't use a low port like 10.  If you want to host your site on an alternate port, choose 8080 or 8443 (alternate HTTP-SSL port), some number that is not reserved or is well-known alternate port for HTTP traffic.
Same situation goes for SSH/SFTP (port 22), HTTPS (port 443), DNS requests (port 53), etc... There are thousands of standardized port numbers for different applications/services.
If you want to connect to the FTP program running on the server, you connect to port 21: XXX.XXX.XXX.XXX:21. When the server accepts your connection on port 21 it understands that you want to use the FTP.
There's no significance to those numbers 8080 and 9000, by the way â€“ they're merely the 'traditional' unprivileged port numbers to use for alternate web services; because they're unprivileged, any non-root user can start up a service listening there, as long as there's no service there already.  
At least on Unix, port numbers below 1024 are privileged, in that only processes running as root can bind to them.  This isn't a restriction imposed by TCP, but a unix-specific thing (it was originally intended as a very lightweight security measure).
A service can listen at only one port (and yes, listen(2) is the name of the system call where a service binds to a port), and a port can have at most one service listening at it.  If you want to listen on two ports (say running an HTTP server on ports 80 and 8080), then you have to start up two processes, one for each port.
When a client (1.2.3.4) connects to a web server (11.12.13.14) on the default http port, it picks a currently unused port on its side, for example 5307, and establishes a connection.  Now the connection is uniquely identified - 1.2.3.4:5307 <-> 11.12.13.14:80
To set this up, your end service (web server, email, VPN, whatever) needs to know what port to listen on (which cargo bay to go stand beside and wait for stuff to come in or go out).  Also, your firewall will need to have an exception (your security guards for your hub check to see if you are allowed to go to certain places) for that port as well.  
Alternate ports are used because you can only have one service listening on a specific port at one time.  Example, you can't have Apache and IIS both listen on port 80 for web request on the same machine.  This is because those services are distinct and they will not be able to tell who was supposed to get what traffic.  By using different ports, those services know that the traffic on that port was meant for them.
Think of your network interface as a giant loading dock (like a UPS hub or something).  Each one of those cargo doors has a number.  By default, trucks carrying certain types of cargo use certain loading docks.  By having multiple loading docks, the hub can handle more than one truck at a time and helps to keep the cargo types segregated.
The upshot of all this is that if, for example, you wanted to have several web servers on a machine (or of any other service), you can, as long as you start them up whilst telling them to listen on different ports.  You might do that with a command-line option when you start the service, or an entry in a configuration file.
Port numbers aren't reserved in any sense -- you're allowed to have a mail server listening on port 80 and a web server on port 25, but it'd be pretty confusing for everyone.  But ports are associated with services in two ways:
Lets say you have a server and it's IP address is XXX.XXX.XXX.XXX.  You can connect to your server to do a variety of things. You always connect to it using the same IP address, but the port number you use is how the server determines what you are trying to do.
If you want to view the webpages on your server, you'd connect to the server using port 80: XXX.XXX.XXX.XXX:80. When the server accepts your connection on port 80 it understands that you want to view a webpage.
You might have a web service on port 80 (root would have to start that), plus some other HTTP-based services on port 8080, or 9000.  The first would be addressable as http://example.org/, the other as http://example.org:8080/.  Because port 80 is the documented default for HTTP, your web browser (or whatever client you were using) would automatically pick port 80 in the first case.
Port numbers don't 'do' anything specifically.  They are one of the ways a connection is uniquely identified.  Each TCP connection is defined by four things:  the IP addresses of each machine, and a port number on each machine.  Every IP packet that comes in contains these four pieces of information, allowing the network layer to determine what should be done with that packet.  For example, a packet arrives with a destination port of 80, and the system knows Apache is listening on port 80, so it hands it off to the webserver (I am glossing over some details).