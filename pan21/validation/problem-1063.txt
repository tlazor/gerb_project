If I didn't have log file after log file demonstrating that this happened, I wouldn't believe it to have been possible!  Thanks to the questioner, I no longer feel crazy!
Edit:  It doesn't tell if it's a script or a binary, but assuming your 'ls -l' output is correct, then you probably don't have a 93kbyte script...  so this is probably a binary meaning my answer is totally incorrect.
Just like the questioner, I was unable to diagnose the source of the problem.  My PATH looked right, it was which-able, and hash did not reveal any prior entries of mycommand.  The next day when I logged in, everything magically worked again.  Now, I will note here that there was a known system issue that occurred just before I saw this problem where a mount was remounted.  Perhaps that's a clue?
Just before the command in the nested script, I printed out the command, e.g. echo $(which mycommand)
I had exactly the same problem, and failed to find an answer because the original poster's problem resolved itself. But this didn't work for me, and I finally managed to track the problem down. So I'm adding the following as an answer to the original post.
Not a full answer, but wanted to report my experience as I had the exact same problem as the questioner, and thought it might help future users experiencing the same maddening problem.  I could which the file, and see it in my path, and even execute it by giving the full path, but could not execute it otherwise.  However, in my case, it only happened within a sub-shell (i.e. when it was executed from a script, in this case there were a few nested sub-shells).  I could run it from the command line just fine.
I'm guessing that your script doesn't have a valid shell after the #!.  For instance, on some older SCO systems, scripts with #!/bin/bash don't work because bash REALLY lives in /usr/bin/bash.  Dumb, but hey SCO is almost dead for a reason, no?
So, by all accounts, I'm still as confused. Just for grins and on the off chance this is a shell-related bug, can you try it with a different shell?
Have you tried logging out and back in?  I know if I use a binary that's in /usr/bin then install a /usr/local/bin version from source, the system still tries to execute the original one until I log out and back in.
Hmmm...  So perhaps the script is not calling the right scripting language (perl, in this case).  The top of the script has the correct magic:
P.S. I don't think user226160 had the EXACT same problem as the reporter, but it sounds related, and lends credence to the mount theory.
Verified permission of the file (execution flag is set). Verified $PATH (though there should not be an issue).
have screwed up the permissions on the partitions.  And indeed, in /etc/fstab, the exec permission was missing!