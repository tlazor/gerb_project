In the long run, I'd recommend running the functions in services periodically in a separate worker process which saves results to a DB. Then, in your webapp, query your own DB for the results you need. Why?
For one, the NHL site probably doesn't appreciate you sending 800-some requests (this is a guess from your numbers, I didn't read the code too carefully) EVERY time someone visits a page on your site. Depending on how much traffic you get, it could cause them to block or throttle you. They may even impose global rate limits. Part of being a good API consumer is caching things so you don't have to tax the API.
Secondly, your webserver can only handle so many TCP connections. IIRC requests does keepalive and connection pooling, but your web server runs across multiple processes these might not be shared. In any event, any outbound requests beyond those absolutely necessary (which, as I argue above, is none) will decrease your capacity to handle incoming traffic.
At a high level you definitely have the right idea about pulling things out of your views. In MVC, we generally keep business logic out of views. That includes things like calculating player stats and information, so this definitely seems like a good choice.
I can fairly confidently say you correctly identify the actual speed issue (but you dismiss it). Speaking very generally, unless you're doing something super crazy, a couple of loops with a few hundred items aren't going to cause much of a problem. This can only truly be confirmed by profiling, but if there are pages that require API requests to 800 different URLs, then that's almost surely your bottleneck.
Third, if you want to do any analytics on your end that does take a non-negligible amount of time (say, some sort of fancy predictions using regressions or other models), doing it outside incoming web requests means your site won't become any slower if you choose to add something like this.
If you wanted to confirm this, you could place a proxy (that ignores Cache-Control/Expires as the API endpoints may not properly set it--see Squid) between the NHL site and your app. This will make those 800+ requests MUCH faster. Your site should speed up significantly. As a quick temporary solution, this is actually pretty decent as you'll likely get a decent speed boost for free. You'll probably want to configure Squid to cache responses for a few hours.
Another easier way to achieve this would be to decorate your services functions with a caching decorator. This isn't as good as the proxy, because unless it persists to disk, your cache won't survive rebooting the server, but this doesn't require learning how to setup Squid.