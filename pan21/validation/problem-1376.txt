Me thinks, you've got two questions in one. The first, "what DBMS are capable of persisting game data in an efficient way." (subjective, imho) The second, "how do I scale that DBMS to perform with 1000s of users?"
More and more online services are sandwiching in a NoSQL solution into their architecture. I have some experience with CouchBase and find it useful. 
We have mobile games with 1000s of players and we saw a huge drop in load by going to persistent IIS/.NET mysql connection pools. mysql 5.1   
Think about keeping "write only" data somewhere else to reduce load on whatever db you choose Cassandra or syslog even. Think about keeping quickly changing, highly transient but reconstructable data in a nosql db like memcache, riak, etc.
Many online services have found the combination of MySQL and Memcached to provide excellent performance and scale. However, there comes a point where that solution falls down too. However, it might be exactly what you need.
Any RDBMS will fall down with scale depending how it's configured, scaled and how the application utilizes it.
I think any of the major databases can handle the load if designed well. Sadly I would estimate that less than 1% of all databases are designed well. (I have personally dealt with data from literally thousands of different databases performing a wide variety of functions, so I think I have a good idea of the lack of quality that is out there inteh real world.) 
I would strongly suggest that you get some books on performance tuning for the database you choose and read them thorughly before begining to design. There are many things that will help your database perform better that should be designed in from the start. Just knowing how to write performant queries and design indexes is critical to getting a good design. This type of study and designed-in performance is not premature optimization. There is no reason at all to use known performance killing techniques in the design.  Databases need to be designed for performance from the start. 