Note that this only makes sense when you know the linear and angular velocities of the body, or reduce the movement to either translation or rotation, not both.  Otherwise, the problem is vastly underdetermined and will have a huge number of complex solutions.
But now I want a collision response that translates and rotates the hull away from the point so it no longer intersects.
With the numerical method, you just incrementally change t until you get a distance value that lies within an acceptable threshold.  The simplest way to do this is to switch the direction you change t and also reduce the magnitude of the delta whenever the point switches from interior or exterior, or vice versa.  A more complex algorithm (that will also converge in fewer steps) will increment based on the arc length between the point and the body (this is what Bullet does in its CCD solver).
I'd like the simplest algorithm possible, I don't want to implement a physics engine or rigid bodies.
Basically, given a position and rotation of the body expressed as functions of time t, you want to solve for a value of t that reduces the distance from the point to the edge of the convex hull to exactly zero, and integrate the body using that time value.  It's possible to do this analytically, but for a game it's more efficient (and much easier) to do it numerically.