I thought about using a library like CImg in order to assemble the different parts (which are images) and then using the created sprite in my game.
It is a tree structure at heart. You have the "bare weapon" ("un-enhanced") which has n slots for extensions that will be positioned accordingly in with some translation, rotation or scaling possibly (S1, S2, ... Sn) and once you add an extension, it may open up new slots for extensions that will be positioned relatively to that extension's position.
In my current project I am creating a 2d game (rpg) which should be able to dynamically create new weapons and armor based on different components. So, i.e. a sample weapon would consist of barrel1, grip3, etc. It's much like Borderlands, but in 2d.
The bottom line is that as a data-structure the underlying idea is a tree that grows recursively as new pieces are added in, possibly with some constraints (perhaps you don't want a cannon with a silencer on top of it).
To position the pieces that you add to the weapon you could wither use a slot specific transformation matrix that will move, rotate and scale the sprite pieces accordingly or use the needed math to position the enhancements accordingly.
So if you placed extension A in slot 3 and A has 2 slots then slot 3 is taken and the new slots (3, 1) and (3, 2)  will be placed and could be occupied by new suitable enhancements.
So basically you have the root of the tree which is a basic un-enhanced weapon type. It has slots where new enhancements could be added randomly by the generator and possbly some enhancements could be further adorned with more complicated improvements if that enhancement has its own slots. You basically need to randomize recursively and decide in each step what to add. Some slots could be occupied with mundane stuff and on rare weapons they may contain some important improvements.