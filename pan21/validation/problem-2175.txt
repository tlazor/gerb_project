Both functions are similar.  The first function loops a maximum of 127 times in the second loop, whereas the second function loops through the string again in the second loop.  So depending on if the string is longer or shorter than 127 bytes, one function or the other will be faster.  But since both functions need to traverse the string at least one full time, they have the same asymptotic complexity of \$O(n)\$, where \$n\$ is the length of the string.
Theoretically, there is a way to only have the one loop and then determine the answer in \$O(1)\$ time after that.  The way to do it would be to create a doubly linked list of characters seen, ordered by the order in which they appear in the string (you create this list as you traverse the string, in addition to keeping a map of character -> node in a separate array).  Whenever you encounter a repeat of a character, you remove that character from the doubly linked list.  What remains at the end is a doubly linked list of non-repeated characters, of which you simply return the character at the head of the list.