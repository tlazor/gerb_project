I'm not a professionnal game dev, and only tried implementing IoC in C++ once, so this is just speculating. 
Since the Strategy Pattern is a form of Dependency Injection, if you take a look at engines like Unity for example they are completely based off this principle.  Their use of Components(Strategy Pattern) is deeply embedded into their whole engine.
One of the main benefits aside from reuse of components is to avoid the dreaded deep class hierarchies. 
Now, it might be a coincidence, but both tend to be a little bit more complicated and/or problematic for performances in C++ (which is widely used in game, isn't it ?) than in Java , where IoC became widespread (Probably because it was relatively easy to do, help people design saner object hierarchies, and because some believed it could turn writing an a application in Java into writing an application in XML, but that's another debate :P)
I would say that it is one tool among many, and it is used on occasion. As tenpn said any method that introduces vtables (and generally any extra indirection) can have a performance penalty, but this is something that we should only worry about for low-level code. For high-level structural code that isn't really an issue, and IoC can have positive benefits. Anything to reduce dependencies between classes and make your code more flexible.
Here is an article by Mick West who talks about how he introduced this type of system into the Tony Hawk series of games by Neversoft.