This review is not comprehensive. There is likely much more in your code that needs to be addressed, but as it currently is with code structure and readability, I am unwilling to spend my time analyzing the logic of your code (maybe someone else will be kind enough). I suggest you read my suggestions, then take a look at a good C++ book, then read the C++ core guidelines. Afterwards, you should improve your code and submit it for a second review.  
In C++ (as in C), header files (.h files) are intended to contain an interface and .cpp files are intended to contain an implementation.  One significant difference is that a header file might be #included into multiple different files but a .cpp file should never be #included.  Instead, each .cpp file is processed by the compiler to generate an object files (typically a .o file on Linux, or .obj on Windows).  Then the linker combines those object files into the executable you're creating.  Note that only .cpp files result in an object file, while header .h files do not (and should not).  The advantage to doing things this way is that when your project grows, only the parts that need updating will actually be recompiled if you're using any kind of a modern build system.  That's the reason you code did not compile in the online IDE.
Within RPGCharCreator.cpp, std::cout and std::string are used but the required #includes are not present.  Fix that by adding
There are a couple of problems with this, but the most important one is that if, as you say, you're planning to add more attributes, this code will grow and grow and become a maintenance headache.  Better would instead have two classes:  RPGAttr which would be a single attribute and perhaps RPGAttrCollection which would, as the name suggests, be a collection of such attributes.  If you do things that way, all of that repetition in the code will go away and you'll have a nice, clean, regular interface.  I'd suggest doing something like this:
The code currently uses for (;;) in a number of places, but it doesn't really loop infinitely.  It's better, generally, to have the loop exit condition explicitly stated.  For example, the loop in main() is actually simply trying to get a number from the user.  It could be rewritten more clearly like this:
The difference betweeen std::endl and '\n' is that '\n' just emits a newline character, while std::endl actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to only use std::endl when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using std::endl when '\n' will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.
Right now, each Ghoul contains a collection of attributes.  That's a good idea, but the implementation of it can be improved.  Right now the RPGAttr class looks like this:
For only recently having learned how to program, this is pretty good. So good, in fact, that I find it hard to believe you haven't been programming for longer than one week :)
In the RPGAttr class, many of the functions only return a value without altering the underlying object.  Such functions should be declared const as in: