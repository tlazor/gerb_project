The D3DXMATRIX class has several constructors, one of which takes an array of floats. If your array and D3D's array order their components the same way, then you can just use that. If not, then you can use it anyway and simply transpose the matrix afterwards.
The first step in the most efficient angle/axis->matrix transform is converting the angle/axis matrix into a quaternion. So if you already have a quaternion, there's no point in turning it into angle/axis, only to give it to someone else who's going to turn it back into a quaternion to make it into a matrix.
I have a feeling that breaking the quaternion down might be the easier rout, but I am not sure as to the actual operations to do this break down.
for either approach it would need to yield the component rotations (theta about X, phi about Y, rho about Z).
My game entities currently hold a quaternion for their orientation with the ability to return either a 3X3 full rotation matrix (based on that quaternion), or a full 4X4 transform matrix. though what I have come to find is that I am not able to convert from my matricies to DirectX matricies directly, so my next thought would be to force the conversion by hand. which of the following methods would work best/easiest/accurate?