I haven't. To my mind, anything in binary format isn't a script. I would be interested to see an example.
If you want to create a program whose source-code cannot easily be read, you can convert the script to a compiled language or make use of various hacks. But decompilers, disassemblers and other tools can often recreate readable source code from compiled code.
gzexe is an  underappreciated awfulhack. There is a similar functionalty in one of the various zip incarnations - pkzip? If it can solve your problem, please let me know :). Being a presenile dummy, I would use a small perl stub to xor and unxor the script and pipe it to sh.
You could, in principle, create a Set-UID script-interpreter that when run, uses higher privileges and can therefore read a script file to which the user themself does not have read access. Some script interpreters are written deliberately so they refuse to run with elevated permissions in this way for security reasons.
Just thoughts - I've never actually tried anything like this - but could you not write your own script interpreter which contains a decoder engine?  So the first line of your script is "#!/bin/cryptoshell", and everything else in the script file is encrypted by a separate script encoder engine.  
There are ways of obfuscating scripts but that is just making life harder and not really preventing reading of the script.
Scripts are plain text files (not non-text binary) that have to be readable by a script interpreter. The script interpreter runs using the ID and permissions of the user running the script. Therefore the script has to be readable by the user and can therefore be read directly without using the script-interpreter.
The question, though, is why you would want to do such a thing.  I mean most bash scripts are hard enough to figure out as it is :-)