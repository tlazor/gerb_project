Bottom line Python was designed to fill a need, and due to that it has it's strengths and weaknesses.  The difference between a great sys-admin and a mediocre sys-admin is they know the strengths of the various tools.  Learning Python is a good idea, but it's not the one size fits all tool.
You're asking a somewhat rhetorical question here.  It's like asking why would someone have different socket sets in their tool box when one socket set would work.  Each tool (in this case program/language/scripting environment) has it's own unique strengths and weaknesses.  For example why would you use Puppet (Written in Ruby) when CFEngine (Written in C I believe) does the same thing?
One of the biggest advantages of a scripting language over a shell environment is readability (obfuscated Perl not withstanding).  It can also be a lot easier to do in language string manipulation.  In Bash for instance you may need to echo your string to sed/awk/grep to parse it, but in Python/Ruby/Perl you have regex and string manipulation built in.  Also communication with remote sockets might be easier than having to write a script around curl, wget or netcat.  Also scripting languages don't need to fork to do their processing.  Example:
As a sysadmin that uses python and bash frequently, I can say that I often have the same question you do. Generally (very generally) I seriously reconsider using python for sysadmin stuff when I realize I will need multiple open() commands or need to import subprocess (or similar) if I implement it in python. That said, sometimes python is easier for you to add extra functionality later. On many occasions I have written something I thought was simple in bash, then reworked it in python (or whatever programming language) because I realized it was much more complex than I thought.
Also, you say you are learning python so I suggest you to stick to what you know best first. Get some test projects rolling to get intimacy with python and when you get better at it you will see that you will naturally tend to do things in bash or python according to the complexity of what you want to do.
As a rule of thumb (that I use, YMMV): if you will have to run a lot of commands you will be better with bash, and if you will have to do formatting and calculations from text files python will be better.
Really it is up to you as the programmer to decide. Don't rule out one method if you don't know how though -- if you can learn from the experience, why wouldn't you?
I am a sysadmin and a python programmer. What I usually do is to think ahead and weight what I will have to do to achieve something in bash and in python, and then using the best tool to the job (the one that gives me more speed/power). One doesn't exclude the other, take a look at the python os module and you will see that there are many things there that can help in system administration.