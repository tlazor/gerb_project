Then copy all the files from your first revision to this new dir, git add and git commit. This will give you your first real commit.
This works because Git does not keep any information about the state of the repository outside of the .git directory, so it doesn't care that you're moving .git rather than replacing the files. However, if you have e.g. files that you want to ignore by .gitignore, this would require you to add the ignore file to each project version individually. 
Back before I had heard of the wonders of version control, I kept projects in folders like "project x 1.0", "project x 1.1", "project x 1.2", etc. There's tons of redundancy in this approach, so I'd like to use git to consolidate and version control the system for the future. 
There's a good book for git called Pro Git. There's a section on how to migrate from a custom structure as well. (See Custom Importer). It's a little bit harder, but if you have a lot of history then that would be the best way.
You use it by sending all the folder paths to the script and specifying the repository directory (it must not exist):
Another way would be to, after initing and committing in your first project version, move the .git repository directory from your 1.0 copy to your 1.1 copy, add those changes (use git add --all to notice deletions) and commit, then move it to 1.2, and so on.
I'd start by creating a new empty directory, creating a repo in it with git init, and doing a first commit with just a .gitignore file or something.
You can repeat that as much as you want. The very first step isn't really necessary, you could do that in your first revision's directory. But doing so in a fresh directory allows you not to change anything at all in your backups, so you can start from scratch again if you want to improve/tweak the process, without risking losing anything in your old directories.
What's the best way to do it? I assume I should start by running git init on "project x 1.0", but then how can I consolidate the other folders into the project as new commits? (I'm still very new to git)
This can be optimized but this script can easily be understood. You need to remove all old files from the repository before updating the contents because otherwise you would have some old deleted files hanging around.