The env command takes care of finding the command, and is itself always in /usr/bin (so I've been told...)   This is a common trick in Python scripts, necessary due to different distro putting python in different places, but no one wants to monkey around trying to find where.
The 'which' command uses the directories listed in $PATH to search for the 1st occurrence of a command.  Very likely PATH is not set to what you think it is.  Try adding '/usr/bin/env >> /home/user/you/env.txt' to your crontab to run today, one minute from now.  Then look in /home/user/you/env.txt to see what PATH was set to.  If that PATH is not suitable for your purposes you may have to put all your commands in a small shell script where you can set PATH yourself.  You can also look in that env.txt file for other exported environmental variables as that might come in handy, depending on what you want to do via your crontab.
If 'which' could find the executable, then so could the shell interpreter that is running your cron command.  So I don't see why you'd want to use 'which' for this purpose.  But maybe you have some reason that is not apparent.
Where is git actually located (i.e. if you run /usr/bin/which git from the console, what does it print)?  If it's not in a directory in $PATH (which is just /usr/bin and /bin on my Snow Leopard machine), /usr/bin/which won't find it, and you need to either hardcode it or add a line like