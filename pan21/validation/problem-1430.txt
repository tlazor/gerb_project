With this contrived example, we know that foo.bar was set to null for GC purposes, and not anything else.
With the approach above, you can easily visualize what your markup is going to look like while keeping data separate from it. Mustache also has constructs for repeating items, handy for building menus from an array. It also has "partials" - reusable markup which comes handy when you use a  common header, footer, or sidebar.
Now for the rest of your code. Mustaches work great with body content. I've never seen people use it to prep the <head> (except in server-side rendering cases). Just a little warning. Your mileage may vary if you try doing it.
That doesn't really tell me anything other than the fact that its repeating what I already know. Besides, why null? Why foo.bar? Why do it now?
What I suggest for this small project is to just put everything in regular stylesheets and put them in a page. Single or multiple files, that's up to you. But what I do suggest is to read up on BEM. It's a way to organize your CSS styles in a way that huge stylesheets won't start killing each other with !important and load order.
This is normal behavior, especially to newcomers to the web - the "do everything in JavaScript after you discover its power".
Sometimes it's just best done where it should be done - markup. So skipping everything, I would suggest you take a look at Mustache. It's a simple templating library (it only interacts with your code in one line). Given a data object (which could contain everything dynamic inside your site), you pop in a template and poof! Page! It also makes you aware of the separation between presentation and the data.
Loading CSS dynamically this way is unreliable as <link> elements have wonky error and load events. So you can't really rely this method. An alternative is using AJAX to load the sheet, but that's taking it too far.
Comments are always good, no matter what form. There's also JSDoc which looks like JavaDoc. Also, comments should not tell the story of what is being done, but instead tell why it's being done. Code like the following would make no sense: