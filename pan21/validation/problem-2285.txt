Right now, to avoid two or more picking up the same link, I'm allowing each instance only to pick up a certain set of records (based in the MOD of their ID), but this is not a transparent way to increase queue processing speed just by adding new instances.
How can I ensure that each record is picked by one app only? Is there a way to flag/lock the record?
Have the application server run an update query against the queue updating a date/time field and a "app server" field with that app server's name or better yet numerical ID. This will cause a lock or if there is a lock already from another server obtaining the next row, it'll be blocked and wait for the other app to finish getting the next row. You will then want the app to pull back the most recent record from the queue for it's app field and get whatever information you want from it. Using MySQL's internal locking mechanism (the update command) will ensure only one app server will get any one record. 
I have a table in MySQL that represents a queue of links to be processed. The links are processed by an external app, one by one, and deleted in the end. This is a high volume queue and I have multiple instances of the processing app, spread across several servers.
I have done something similar with offline DBCC checks (two servers doing backup restores and then a DBCC checkdb). One server gathers all the 31 server's backups yesterday and puts them into a queue and then that server and another pull from that queue. While not a lot of servers, the method should remain the same:
NO WAIT is useful for avoiding waiting until a concurrent transaction releases the locks that we are also interested in locking. Without NO WAIT, we either have to wait until the locks are released (at commit or release time by the transaction that currently holds the locks) or the lock acquisition times out. Therefore, NO WAIT acts like a lock timeout with a value of 0.
SKIP LOCKED is useful for implementing job queues (a.k.a batch queues) so that you can skip over locks that are already locked by other concurrent transactions.