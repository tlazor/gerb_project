One of the concepts I used in designing this project was the idea of Top-Down Design. I welcome any feedback on this approach as a whole and its fit in a project like mine as well as my implementation of it. As this was my approach in building the project I will also present it to you in this manner.
In the above section the only part that I am going to continue to present is the ModelData class. The Viewport contains the presentation logic and I am reserving that for a future question.
The ModelData class has quite a few getters for the Viewport to collect information to display. Should I prefer a friend class here? As a rule I try to avoid friend classes because I worry that I am going to break encapsulation that way but having getters and setters can be an anti-pattern in C++ too? Or is this the simple and correct solution? This class also uses the player class and the Deck class which I will also provide.
The first file I am sharing holds all of my constexpr that I use to eliminate magic numbers. It also holds a static PRNG and my enums. I don't know if this is considered acceptable practice so I would appreciate a comment in regards to what I did here.
I have a Memory style card matching game. The project is big enough that I want to break up the review. The first part that I am giving you is the data model. If you are interested the full project can be found on github.