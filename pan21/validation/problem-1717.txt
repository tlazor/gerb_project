A number of libraries exist for this, each of which deal with the little niggles that tend to get in the way (like bytestream endianness and such).
To serialize something essentially means to change it into a series. This is necessary if you want to send something over a network or write it to a file, because both of those expect a series of bytes. So it's generally a fancy term for the save and load systems. In the case of Bullet, it's simply taking the mesh data and saving it out in a form that Bullet can effectively use. You can save this out and load it in later without needing to re-analyse your meshes.
As I understand it, serialization is just the concept of taking an object or a set of objects, transforming them into a byte stream (for data storage, or network transmission, etc.) and then later reconstructing the original object from that bytestream ("deserialization").
I personally use serialisation for networking. Outside of that I don't really have much use for it. If you want to know why it's used in Bullet, the best chance you have of getting an answer is by asking in the Bullet forums or reading the documentation. 