Scripting languages (PowerShell, cmd.exe for example) are always useful though for monitoring, deploying etc. I've often had some Perl scripts I had to maintain (just about). Then there are the assorted ETL packages that you'd be expected to know about.
You won't be doing any programming in the sense of developing client applications if you're strictly a DBA, but you should know how they work (generally speaking).
Saying that, most DBAs (that I know) would be able to write basic CLR stuff or know PL/SQL well. For me, the dividing line is knowing about the broader patterns or architecture of .net or Java. I don't need it as a DB developer or DBA. In the same way that .net or PHP or Java Monkeys don't understand database design or architecture or code as well as I do.
I had a Database Administration instructor in grad school who gave us a list of questions that any good (Oracle) DBA should be able to answer: (I'll just post some of the highlights from the list of 40 or so)
(Oracle) DBA's need to know these things to be effective.  Most developers I know (who code against Oracle) would be hard-pressed to answer even one or two of these correctly.
I'm pretty convinced that only big shops with big applications have demand for a non-programming DBA, as small shops with simple databases can get away with the jack-of-all-trades developer / DBA. For a DBA to become a master of a product (Oracle, SQL Server, whatever) there has to be demand for this knowleadge! The DBA must be subjected to complex environments and problemas to help him become more knowleadgeable. This is basically a rant of mine, because I'm a DBA at a small shop and I don't do anything that requires more than 2 neurons, I think I'm wasting my time at this job. I want to be a developer.
In a big shop, maybe not because you have 1000s of servers to look after and your tools are provided. In a small shop, you'll probably need more knowledge because you have a wider remit.
If you're the DBA, you're probably working in the realms of performance and security (among others). This could involve profiling and assisting with tuning client applications that the developers are working on. Thus it certainly wouldn't hurt to know the basics of the languages the developers are using, and how to interface with the database server. For SQL Server, that's probably .NET. For MySQL, probably some combination of php or java.
For example, if the server is pressured for client threads, then it helps to be able to inform the developers that they should be using singleton instances for their ObjectDataSources so that they can reuse a single database connection. And also make sure they're using parameterized queries properly to limit SQL injection. Stuff like that.
It's been my experience that while most DBA's have some kind of development background, they are not at all required to write code.  The really good DBA's I've worked with have had extensive knowledge a variety of topics including shell scripting, operating systems, and specialized application knowledge (ex: PeopleSoft).
Personally, I decided to stop chasing the latest or best client language years ago and focus on database work. That doesn't make me a "non-programmer": I'd need to learn it again if I had to.