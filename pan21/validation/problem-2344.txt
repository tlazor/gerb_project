I'm having issues with ALTER TABLE SWITCH between a staging table and a target table which is schema-bound to an indexed view. 
You need an indexed view on the staging table that matches the definition of the one on the production table, and indexes on the staging view that match every index on the production view.
If I alter the view to not schema bound, then SWITCH Works, but when I ALTER the view again and set it back to SCHEMABOUND, all the indexes (12 of them including clustered index have dissapeared) 
I cannot Switch the data from staging to target once a primary key has been added to each of the two views, where view 1 and view 2 are identical, except that view 1 uses the target table joined to other tables and view 2 uses the staging table joined to the same 'other' tables as view 1, and also the columns selected in both of the views' PKs are the same.  Also note that the underlying tables including nullability are also identical as are constraints - crazy
The idea is that the engine must replace every index, including the ones declared on the views. If it has build an index (ie. if there is an index on production but not on staging) then the switch will fail. Also all constraints, filters etc must match so that the engine knows that the data is valid (staging data will not violate production constraints).
Well it would appear that it's not possible to SWITCH between two identical tables, one a staging table and the other the target when they both have an indexed view, using simply SQL Server 2008 standard edition!
We use only SQL Server 2008 Standard Edition so partitioning is not a solution. I need to SWITCH about 10 million rows daily, yet not loose the indexed view solution? 