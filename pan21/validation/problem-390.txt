See, if anyone wants to learn how to do anything on the computer, technically anyone can go to the internet and try and learn it themselves. So I personally feel that the teacher within this all is responsible far more so to motivate the students in learning  what they probably already know they should.
Nothing motivates a person more than to feel that they, and their work matters. If your students feel unmotivated I feel you should try and take a look at your own behavior that is unrelated to what you are actually teaching.
From early on, show how programming can be used to accomplish cool stuff.  Here is a very simple Python example.  Get a text file with a book in it; the Gutenberg project is a great source. Open it and use read to suck it into a giant string.  Now see how many words the file contains. Is the word "syzygy" to be found?  Can you figure out how many times a given word is used?  Can you find out if a particular phrase is used?  How can you use Python's string methods to explore it?  Only very basic ideas are needed to do this.
Give programming some punch by doing some "cheap parlor tricks" that will attract student attention.  
Above all, write tons of code in front of your kids. Engage their opinions and get them to contribute ideas and whole segments of code.  Encourage a little friendly competition and get them to generate and discuss competing solutions to a given problem.  
Also remember that positive reinforcement (especially nowadays) is far more powerful than negative. In other words, compliments, even if small, will have a far greater impact than to tell them that they'll fail if they don't keep up. If you can show a positive and supportive side of you, then your students will want to work for their own sake and for the sake of doing their good teacher proud.
This means that drawing diagrams and showing them how its done is an important part of this all, as it helps them understand and learn more easily, but showing genuine interest and concern for the needs and wishes of the students is far more important than simply explaining things in a structural and orderly fashion.
By the way, here is my musing on memorization.  You end up memorizing only a small amount of stuff while programming.  You need to know about the basic form of loops, functions and other programming constructs. But that's small stuff.  You will wind up memorizing things you use often for the simple reason that it saves work and helps you to code faster.  However, you should emphasize that Google and documentation searches can help you find more esoteric stuff.  
So I'd say to try and ask your students what THEY want to focus on in class. If they struggle with X, but you teach them Y, a lot of people will just get frustrated with the things you didn't teach them (to their feeling) sufficiently.
Python has turtle graphics.  JavaScript has the wonderful Canvas object. Get this stuff out when you are teaching looping.  You can have a lot of fun drawing cool art.  There is a universe of fun and exciting toys out there. (Can you download a web page programmatically and search it for words?)  Engage your kids in unearthing, understanding, and applying it. 
I personally always felt very motivated to, and know that almost all my former classmates did too, when the teacher would tell us what we'd be doing first, giving some examples, then converse with the class about what they understand and don't about what you just explained to them. Given time constraints it'd be best to focus on what the majority wants and needs, and then give more personal attention and support to the students that have more or specific needs.