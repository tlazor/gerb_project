Again, a function/method, but a property of a document object, not an action, so no parens. A boolean value or an integer is strictly speaking not a real-world object, but it's more like an object than an action.
Even though author is probably a function/method, an author is an object and a noun, so it's a property and thus no parens here.
Because either is technically acceptable, you are right that it is a style issue and simply a case of choosing a coding convention.
It depends on the purpose. I prefer parenthesis for "real" methods, doing something. For properties with at most small getter/setter and simple checks I use the shorter version.
However, I think that you have hit a very important point. So few other languages that use parentheses for functions allow a parameterless function call without parentheses that it can be very surprising for developers unfamiliar to perl.
Again, send and write_book are functions/methods, but since those are actions (as designated by verbs), we write parens behind them. 
That being said, go ahead and standardize on one style or the other. Do it because you like that style, not because it might possibly one-day help people learn Perl.
The only reasonably possible confusion that I can come up with is that someone might think that methods and subroutine calls are parsed the same.
This point would sway me in favour of always using them and, indeed, I always do so out of habit because I use other languages a lot and it just comes naturally.
I prefer to make a distinction on semantic level: there are no functions or methods, but instead there are properties and actions. Every property is an object (in real-world sense) and an action is something done on an object. A good mnemonic is probably to read () as do it!.
Most beginners start by looking at example code they find on the internet. Those examples may very well have both styles in them. So people wanting to learn Perl, will eventually need to know that they are equivalent. Probably sooner, rather than later.