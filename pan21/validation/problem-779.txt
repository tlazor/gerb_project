You'd use SAT on non moving polygons (2D), although you can extend it to cope with relative linear motion.
GJK is an algorithm for finding the closest point of two convex polygons.  With a little bit of extra work you can use it to find incident points for intersecting objects, and hence calculate a collision manifold.  This is done via polygon clipping, same as if using SAT, but GJK saves you some steps (since you'll already have the closest points).
For moving and rotating polygons (and polyhedrons) you can use Conservative Advancement to find the exact time and point of contact.
Other narrow phases are used more in specialized games.  Racing games usually use ray casting as modeling actual tires and getting realistic (or even just fun) behavior is not yet possible using traditional collision shape and resolution modeling.  Platformers also typically use highly customized collision and physics, as the preferred "Mario-like" physics are not modeled with traditional physics algorithms.  You'll also often see different collision and physics methods for fluids and such, though I know less about those.
Variations of color intersection mixed with SAT or Hitbox intersection is used in games like Sonic, Megaman with good results.
However, SAT is pretty standard in my experience for generic physics libaries, Ex. Box2D uses it extensively (Angry Birds, and many other games use Box2D). 
MPR (Minkowski Portal Refinement) is another algorithm, similar to GJK (they both use Minkowski spaces).  It can't find the closest point between non- intersecting objects like GJK, but it does have a lot of other nice properties for games, and is way to use to get a contact manifold.
MPR is one of the more popular for games.  It is very efficient, numerically stable, and easy to implement.
Another technique you can use is Minkowski Difference, which shrinks one object down to a point and 'grows' the other by the shape of the first. Then you test the combined object against the point which is a lot easier - this gives you penetration distance and normal. I find this tool is conceptually very useful for approaching new collision detection problems; easier to visualise than SAT.