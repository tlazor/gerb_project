Due to the age of the original backup image used for deployment and no newer one available, I had to use an old version of SQL server, as the newer versions of SQL Server did not support the old format backup.  Then in the process of applying nearly all of the application updates in sequence I had to apply an SQL server upgrade over the top of the old SQL server version due to the application update requiring a newer SQL server version than was originally required by the old version "deployment backup" image.
I say don't do it.  Use an SQL script made from as standard as possible statements as you can make, taking note of what SQL server versions that version of the script worked for.
As a DBA I found this VERY frustrating to figure out and then actually perform the required steps.  As an extra bonus I was doing this during a disaster recovery situation so I could restore the current production database from backup, as it required the latest version of the software which would not install without it installing the original "deployment backup".
Everything is wrong with using backup files as deployment. But the burden is not on the DBA to provide the DDL, is on development. Your design and development artifacts should had been database installation and upgrade scripts. Never change anything in the database manually, everything should be modified using your app. Rails gets this in spades with he whole migrations infrastructure and you should try to adopt it too. I have for long advocated using similar techniques, see Version Control and your Database.
First let me make the case why source code based deployment/upgrade is superior to binary based deployment (.bak, or diff tools):
I've had problems with software that was distributed via a backup when I've needed to do a re-install of the software at a much later date.