The preferred solution is to not use FTP.  What you can use instead may be limited base don what the web host provides as an option.  One great alternatives is SFTP, implemented with PuTTY's PSFTP.EXE.  There may be some ambiguity since there are multiple secure variations of FTP, like FTPS.  SCP, implemented with PuTTY's PSCP, may be a bit easier to use in some cases, so I suggest starting with that.
Note the period at the end, which specifies the location where files will go.  Customize that as needed.
There may be other implementations available as well.  WinSCP supports a command line client called winscp.com (and there is also the winscp.exe which provides the GUI).  Windows Script Host can use HTTP by using an object that is built into Microsoft Windows, so there is no need to download an executable file.  Again, I refer to Jesper's answer as an answer that you may find works quite well for you, and that uses software that is typically pre-installed with Windows, so no extra software needs to be downloaded.  I'm betting that there are many more options available...  you've got lots of choices that you can choose from.
I propose another solution: don't use ftp.  FTP will not offer security over a network.  It can also be problematic with certain network designs, particularly if NAT is used or when a firewall is used.  These problems probably won't exist now if manual FTP uploads are working fine, but they could start to exist if someone makes changes.  For example, problems could exist if you replace a DSL modem with another DSL modem that provides different features.
To do this, first grab the files from PuTTY-s download site.  http://chiark.greenend.org.uk/~sgtatham/putty/download.html offers pscp.exe and the similar psftp.exe file. The the.earth.li/~sgtatham/putty/latest/x86/â€¦ (for version 0.63, which is the latest version at the time of this writing) may be simplest for people who prefer being walked through an easy installation process using a GUI, while the putty.zip file also contains putty.exe and pscp.exe and psftp.exe
Once you have that working well, you'll want to object that the user needs to type in a password.  Yeah, well, that can be resolved to, but that's just a bit more work, but is generally an option by servers that support using PSFTP or PSCP.  You'll probably want to use PuTTYGen to create a key.  Save the private key in OpenSSH format (not PuTTYGen's preferred *.PPK format).  That private key will need to go onto the server.  Using PuTTY will probably be an easier tool to make sure that the private key is installed where it needs to be.  Once the private key is handled, the batch file can be modified to use:
Alternatives are to use protocols other than FTP, SFTP, or SCP, like HTTP(S).  HTTP(S) can probably be automated by using WGET with --post-file=filename but you'll need to find out what URL your web host uses to permit HTTP uploads.  Actually, cURL is preferable over WGET.  It has a more lenient license, and I believe the code is newer and simpler as well.
If PSCP is working well, modernize things slightly by trying PSFTP.exe instead.  If that works, that is a bit preferable, as OpenSSH authors note that SFTP is a more developed protocol than SCP.
Jesper's answer shows how to do this in a way that most closely matches the way that the question was written.
C:\Program Files\PuTTY\PSCP.exe -l username -i C:\mykeys\mykey.pub C:\dir\stuff\to\upload*.* remoteSever:.