Although the files are being "deleted", as i mentioned, they are actually being moved to a different location on the file system... ie a Trash directory or something.    So it seems to me like the OS uses a pointer @ the file that is updated when it moves rather than accessing the files directly.
Note that a consequence of this is that the space occupied by a file can only be reclaimed once the last process using it has closed it. That's a FAQ for Linux/Unix file system operations: "'df' command says partition is full, while 'du' reports free space" (see e.g. http://batleth.sapienti-sat.org/projects/FAQs/ext3-faq.html ). If you need to free up space, it's not enough to delete big files (e.g. logfiles), you must also make sure no process keeps them open (typically a problem with logfiles).
As explained by Matt Jenkins, the OS (the filesystem) keeps track of files that are kept open by applications. As long as a process keeps a file open, its data stays on disk (even though it has been deleted and is no longer visible or accessible to other programs.
Also, with moving the file - if it's within the same filesystem - the file doesn't actually move as such, it just changes the pointer to the directory the file is in.
Can anyone shed some light on how this AWESOME capability is actually implemented?  I'm not even sure what to google to learn more about it.
In unix file systems, a file can have one or more hard links to it.  The file lives as long as there is at least one.  When the last one is removed, the file's space is freed.  link above will give you a starting point for more reading - see especially the "Link counter" section.
It's quite simple actually.  The file maintains a list of references - processes that are accessing the file.  When you delete the file it just removes the listing from the directory but not the file itself.  The programs that still have the file open can still access it.  The file is only actually deleted when all the programs that are accessing it close it.