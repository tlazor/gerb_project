The coins should not intersect the obstacles and the randomly generated number of coins in any row (e.g. a row of 6 coins all lined up) should be between 1 and 10.
An example of how you could use a Stage for collision, rendering, and input to do what you're looking for.
This is a great opportunity for you to learn how to use Stage2D for your game.  It already handles the rendering of tons of objects for you, including culling of actors.  Actors are capable of having location, rotation, scaling, input, and actions all associated with them and it's all managed for you.  Handling collision with them isn't all too difficult either, but does typically require another step.
It's a vertical scroller so the coins should be lined up vertically and disappear individually as the playerRect intersects the coinRect.
As for creating the coins, you can have the class Coin take x and y positions as constructor arguments. Then you can create as many as you like, wherever you like, and store them in some sort of data structure (for example, an ArrayList). To make them generate in a line, offset their y positions by a fixed value multplied by the iteration of the loop they're being created in. Sample code to do this (won't compile, see code comments for details):
If I used a loop (somehow...) the integer i would be the randomly generated number of coins in any row, so that 1<=i<=10, and if coin.position intersected obstacleRect then it i would become i-1 so that the coins stopped right before the obstacle.
Wouldn't it be more efficient/easier on memory&performance to create a 'coin' class and use a loop somehow?
Yes, you should definitely create a coin class. If all coins use the exact same sprite, you can make the sprite variable static, so that it's only created once and shared by all instances of coin. Alternatively, if there is some variance between coins (for example, some coins are red and some coins are blue), you could implement the flyweight design pattern for similar efficiency. 