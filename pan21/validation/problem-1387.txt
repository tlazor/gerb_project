You should checkout Vowpal Wabbit, which handles very nicely new features using a hashing trick and adaptive learning rates.
The simplest thing to do (which is usually a good place to start) is just one-hot-encode your cities where every city becomes a single feature and has values of either 1 (the person is from that city) or 0 (not from that city). If a new city appears in a test set that isn't present in the training set that person will just have 0's for all the cities in the training set. This might seem weird but, if that city isn't in the training set, then there should be no weight placed a person being from that city.
The next step would be something along the lines of what Mohammad Athar suggested and get some idea of geographic proximity to other cities in your training set. That is going to be much more complicated so I will let someone else comment on it. 
Not only will it not crash when new features appear (at train or test time), it will also start updating its weights on it. On top of that its wicked fast. It only implements variants of the linear model though, so you are restricted on that side. A very powerful tool to know about