3. Size: Less of an issue these days, but a GUID is 16 bytes long.  It takes up more space in the table and any indexes that include it.
I see three principal disadvantages of using GUIDs as database keys, and would avoid them unless you have some compelling reason to use them.  Note that the globally unique property doesn't get you any advantages over using a key that is locally unique within a table, because you already know what table the data came from.
Inconvenience: It's not terribly easy to type in a GUID if you want to do an ad-hoc query of the database, for example:
Your processes can create records that contain the GUID as a reference to the process instance, but using the GUIDs as a key is not necessarily optimal.
2. Natural ordinality: An autoincrementing primary key has he side effect of naturally ordering your transactions in the order they were entered into the system.  This is often quite useful.  GUIDs are not normally generated in order, so they are of no use in this regard.