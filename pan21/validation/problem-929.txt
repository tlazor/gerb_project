Delegates could be used to attach functions to the Animation object, which will return a boolean signaling whether the animation should stop or not. This way the Animation object can call this delegate method during it's update and it can return this value as the return value for the update. So your AnimatedSprite object just updates the top animation and, if the udpate function returns true, it removes that object from the stack.
I'm writing an AnimatedSprite class that has an Animation object (which itself contains a sprite sheet).
The AnimatedSprite plays certain animations during key input. My problem is that how do I cycle from one animation back to the original ? Is there a good method to do this?
One method is to have a stack of animations in your animated sprite class. When the user says jump, put the jump animation on the top of the stack. When the end condition for the animation has been met, remove it from the stack. If you are always using the animation on the top of the stack, then removing the top one will automatically continue the next one down.
For example, a function could be attached which returns true if the player is on the ground and false if their not. Attaching this to a jump animation would cause it to stop, and therefore be removed from the stack if the player hits the ground.