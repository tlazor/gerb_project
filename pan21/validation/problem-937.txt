You can enable user namespaces to avoid this risk, but when you do so, be aware that host volumes that intentionally map to users or groups on your host will no longer work, including developers mounting code for rapid development, and tools that mount the docker socket for management. Since user namespaces are implemented on the entire docker instance, not per container, you'll want to be sure there are no scenarios where they won't work for you before making the change.
Note, the security risk of host volumes is that a vulnerable application on the host, running with the same UID of a privileged application inside of a container, can get access to that container. While not good, it's not a container escape.
Moving data in and out of a named volume has always been with tar and docker I/O redirection, but you'll need to add a chmod/chown step after this if you change ownership from the host to the container:
This is only the case if the image you used to create the named volume does not have the directory in the image, or that directory in the image is not owned by the correct user. The fact that /var/lib/docker is locked down to only allows root in no way prevents containers from using volumes inside of that directory as a user.
Named volumes typically have fewer permission issues because they will be initialized using the contents of the image at the given location. When you create the image, and a user inside of that image, you will want to chown/chmod any directories that user needs access to as part of the image building process. Possible issues I've seen from people trying this: