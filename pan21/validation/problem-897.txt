I have gone the other way (making the LDAP stuff authenticate against AD & storing the "other stuff" in AD's LDAP store), and that's relatively easy -- I'd recommend this if at all practical, but without knowing more about your situation I can't say if it's the right move or not...
AD domains are more than just authentication and require a lot more than just an LDAP directory to work, so I think you'd need to deploy Samba or something to make what you're describing happen (though you can get Samba to use LDAP as its backing store).  I'm not sure what the state of Samba domain controllers is these days but I'd start looking here (samba.org docs).
I honestly depends on how much time, expertise, and money you have to spend.  FIM (Forefront Identity Manager) is a fine option if you're just looking to sync basic attributes, including username/pass.  However that's not what my university does, we've always needed a bit more flexibility than IDM solutions have ever really offered, which is why we've developed our own in-house middleware written in perl using LDAPS.  This allows us to script updates of what we want, when we want, and where we want with as much flexibility as we need.  We also force all users to use a web portal for password changes, so that our directories do not get out of sync.  We are currently syncing a SUN ONE LDAP system to our MS Active Directory and have been since 2002.
The only way I know to do this is to create an LDAP-backed Kerberos system, and establish a Kerberos-trust between the non-Windows Kerberos realm and the Windows domain (which is also a Kerberos realm). The key steps:
TL;DR   If you're short on time and expertise, but not money use FIM it will do what you want.  If not you're more than welcome to write your own middleware in coding language of choice to do the same thing.